// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for the cImgui API
class cImgui {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  cImgui(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  cImgui.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ImVec2> ImVec2_ImVec2_Nil() {
    return _ImVec2_ImVec2_Nil();
  }

  late final _ImVec2_ImVec2_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec2> Function()>>(
          'ImVec2_ImVec2_Nil');
  late final _ImVec2_ImVec2_Nil =
      _ImVec2_ImVec2_NilPtr.asFunction<ffi.Pointer<ImVec2> Function()>();

  void ImVec2_destroy(
    ffi.Pointer<ImVec2> self,
  ) {
    return _ImVec2_destroy(
      self,
    );
  }

  late final _ImVec2_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'ImVec2_destroy');
  late final _ImVec2_destroy =
      _ImVec2_destroyPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  ffi.Pointer<ImVec2> ImVec2_ImVec2_Float(
    double _x,
    double _y,
  ) {
    return _ImVec2_ImVec2_Float(
      _x,
      _y,
    );
  }

  late final _ImVec2_ImVec2_FloatPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImVec2> Function(ffi.Float, ffi.Float)>>(
      'ImVec2_ImVec2_Float');
  late final _ImVec2_ImVec2_Float = _ImVec2_ImVec2_FloatPtr.asFunction<
      ffi.Pointer<ImVec2> Function(double, double)>();

  ffi.Pointer<ImVec4> ImVec4_ImVec4_Nil() {
    return _ImVec4_ImVec4_Nil();
  }

  late final _ImVec4_ImVec4_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec4> Function()>>(
          'ImVec4_ImVec4_Nil');
  late final _ImVec4_ImVec4_Nil =
      _ImVec4_ImVec4_NilPtr.asFunction<ffi.Pointer<ImVec4> Function()>();

  void ImVec4_destroy(
    ffi.Pointer<ImVec4> self,
  ) {
    return _ImVec4_destroy(
      self,
    );
  }

  late final _ImVec4_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec4>)>>(
          'ImVec4_destroy');
  late final _ImVec4_destroy =
      _ImVec4_destroyPtr.asFunction<void Function(ffi.Pointer<ImVec4>)>();

  ffi.Pointer<ImVec4> ImVec4_ImVec4_Float(
    double _x,
    double _y,
    double _z,
    double _w,
  ) {
    return _ImVec4_ImVec4_Float(
      _x,
      _y,
      _z,
      _w,
    );
  }

  late final _ImVec4_ImVec4_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImVec4> Function(ffi.Float, ffi.Float, ffi.Float,
              ffi.Float)>>('ImVec4_ImVec4_Float');
  late final _ImVec4_ImVec4_Float = _ImVec4_ImVec4_FloatPtr.asFunction<
      ffi.Pointer<ImVec4> Function(double, double, double, double)>();

  ffi.Pointer<ImGuiContext> igCreateContext(
    ffi.Pointer<ImFontAtlas> shared_font_atlas,
  ) {
    return _igCreateContext(
      shared_font_atlas,
    );
  }

  late final _igCreateContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiContext> Function(
              ffi.Pointer<ImFontAtlas>)>>('igCreateContext');
  late final _igCreateContext = _igCreateContextPtr.asFunction<
      ffi.Pointer<ImGuiContext> Function(ffi.Pointer<ImFontAtlas>)>();

  void igDestroyContext(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDestroyContext(
      ctx,
    );
  }

  late final _igDestroyContextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDestroyContext');
  late final _igDestroyContext = _igDestroyContextPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  ffi.Pointer<ImGuiContext> igGetCurrentContext() {
    return _igGetCurrentContext();
  }

  late final _igGetCurrentContextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiContext> Function()>>(
          'igGetCurrentContext');
  late final _igGetCurrentContext = _igGetCurrentContextPtr
      .asFunction<ffi.Pointer<ImGuiContext> Function()>();

  void igSetCurrentContext(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igSetCurrentContext(
      ctx,
    );
  }

  late final _igSetCurrentContextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igSetCurrentContext');
  late final _igSetCurrentContext = _igSetCurrentContextPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  ffi.Pointer<ImGuiIO> igGetIO() {
    return _igGetIO();
  }

  late final _igGetIOPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiIO> Function()>>('igGetIO');
  late final _igGetIO =
      _igGetIOPtr.asFunction<ffi.Pointer<ImGuiIO> Function()>();

  ffi.Pointer<ImGuiPlatformIO> igGetPlatformIO() {
    return _igGetPlatformIO();
  }

  late final _igGetPlatformIOPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPlatformIO> Function()>>(
          'igGetPlatformIO');
  late final _igGetPlatformIO =
      _igGetPlatformIOPtr.asFunction<ffi.Pointer<ImGuiPlatformIO> Function()>();

  ffi.Pointer<ImGuiStyle> igGetStyle() {
    return _igGetStyle();
  }

  late final _igGetStylePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiStyle> Function()>>(
          'igGetStyle');
  late final _igGetStyle =
      _igGetStylePtr.asFunction<ffi.Pointer<ImGuiStyle> Function()>();

  void igNewFrame() {
    return _igNewFrame();
  }

  late final _igNewFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igNewFrame');
  late final _igNewFrame = _igNewFramePtr.asFunction<void Function()>();

  void igEndFrame() {
    return _igEndFrame();
  }

  late final _igEndFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndFrame');
  late final _igEndFrame = _igEndFramePtr.asFunction<void Function()>();

  void igRender() {
    return _igRender();
  }

  late final _igRenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igRender');
  late final _igRender = _igRenderPtr.asFunction<void Function()>();

  ffi.Pointer<ImDrawData> igGetDrawData() {
    return _igGetDrawData();
  }

  late final _igGetDrawDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawData> Function()>>(
          'igGetDrawData');
  late final _igGetDrawData =
      _igGetDrawDataPtr.asFunction<ffi.Pointer<ImDrawData> Function()>();

  void igShowDemoWindow(
    ffi.Pointer<ffi.Bool> p_open,
  ) {
    return _igShowDemoWindow(
      p_open,
    );
  }

  late final _igShowDemoWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'igShowDemoWindow');
  late final _igShowDemoWindow =
      _igShowDemoWindowPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void igShowMetricsWindow(
    ffi.Pointer<ffi.Bool> p_open,
  ) {
    return _igShowMetricsWindow(
      p_open,
    );
  }

  late final _igShowMetricsWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'igShowMetricsWindow');
  late final _igShowMetricsWindow = _igShowMetricsWindowPtr
      .asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void igShowDebugLogWindow(
    ffi.Pointer<ffi.Bool> p_open,
  ) {
    return _igShowDebugLogWindow(
      p_open,
    );
  }

  late final _igShowDebugLogWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'igShowDebugLogWindow');
  late final _igShowDebugLogWindow = _igShowDebugLogWindowPtr
      .asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void igShowIDStackToolWindow(
    ffi.Pointer<ffi.Bool> p_open,
  ) {
    return _igShowIDStackToolWindow(
      p_open,
    );
  }

  late final _igShowIDStackToolWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'igShowIDStackToolWindow');
  late final _igShowIDStackToolWindow = _igShowIDStackToolWindowPtr
      .asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void igShowAboutWindow(
    ffi.Pointer<ffi.Bool> p_open,
  ) {
    return _igShowAboutWindow(
      p_open,
    );
  }

  late final _igShowAboutWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'igShowAboutWindow');
  late final _igShowAboutWindow =
      _igShowAboutWindowPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void igShowStyleEditor(
    ffi.Pointer<ImGuiStyle> ref,
  ) {
    return _igShowStyleEditor(
      ref,
    );
  }

  late final _igShowStyleEditorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStyle>)>>(
          'igShowStyleEditor');
  late final _igShowStyleEditor = _igShowStyleEditorPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStyle>)>();

  bool igShowStyleSelector(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igShowStyleSelector(
      label,
    );
  }

  late final _igShowStyleSelectorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'igShowStyleSelector');
  late final _igShowStyleSelector = _igShowStyleSelectorPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  void igShowFontSelector(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igShowFontSelector(
      label,
    );
  }

  late final _igShowFontSelectorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igShowFontSelector');
  late final _igShowFontSelector =
      _igShowFontSelectorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igShowUserGuide() {
    return _igShowUserGuide();
  }

  late final _igShowUserGuidePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igShowUserGuide');
  late final _igShowUserGuide =
      _igShowUserGuidePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> igGetVersion() {
    return _igGetVersion();
  }

  late final _igGetVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'igGetVersion');
  late final _igGetVersion =
      _igGetVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void igStyleColorsDark(
    ffi.Pointer<ImGuiStyle> dst,
  ) {
    return _igStyleColorsDark(
      dst,
    );
  }

  late final _igStyleColorsDarkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStyle>)>>(
          'igStyleColorsDark');
  late final _igStyleColorsDark = _igStyleColorsDarkPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStyle>)>();

  void igStyleColorsLight(
    ffi.Pointer<ImGuiStyle> dst,
  ) {
    return _igStyleColorsLight(
      dst,
    );
  }

  late final _igStyleColorsLightPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStyle>)>>(
          'igStyleColorsLight');
  late final _igStyleColorsLight = _igStyleColorsLightPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStyle>)>();

  void igStyleColorsClassic(
    ffi.Pointer<ImGuiStyle> dst,
  ) {
    return _igStyleColorsClassic(
      dst,
    );
  }

  late final _igStyleColorsClassicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStyle>)>>(
          'igStyleColorsClassic');
  late final _igStyleColorsClassic = _igStyleColorsClassicPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStyle>)>();

  bool igBegin(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Bool> p_open,
    int flags,
  ) {
    return _igBegin(
      name,
      p_open,
      flags,
    );
  }

  late final _igBeginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>,
              ImGuiWindowFlags)>>('igBegin');
  late final _igBegin = _igBeginPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>, int)>();

  void igEnd() {
    return _igEnd();
  }

  late final _igEndPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEnd');
  late final _igEnd = _igEndPtr.asFunction<void Function()>();

  bool igBeginChild_Str(
    ffi.Pointer<ffi.Char> str_id,
    ImVec2 size,
    int child_flags,
    int window_flags,
  ) {
    return _igBeginChild_Str(
      str_id,
      size,
      child_flags,
      window_flags,
    );
  }

  late final _igBeginChild_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImVec2, ImGuiChildFlags,
              ImGuiWindowFlags)>>('igBeginChild_Str');
  late final _igBeginChild_Str = _igBeginChild_StrPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, ImVec2, int, int)>();

  bool igBeginChild_ID(
    int id,
    ImVec2 size,
    int child_flags,
    int window_flags,
  ) {
    return _igBeginChild_ID(
      id,
      size,
      child_flags,
      window_flags,
    );
  }

  late final _igBeginChild_IDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiID, ImVec2, ImGuiChildFlags,
              ImGuiWindowFlags)>>('igBeginChild_ID');
  late final _igBeginChild_ID =
      _igBeginChild_IDPtr.asFunction<bool Function(int, ImVec2, int, int)>();

  void igEndChild() {
    return _igEndChild();
  }

  late final _igEndChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndChild');
  late final _igEndChild = _igEndChildPtr.asFunction<void Function()>();

  bool igIsWindowAppearing() {
    return _igIsWindowAppearing();
  }

  late final _igIsWindowAppearingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsWindowAppearing');
  late final _igIsWindowAppearing =
      _igIsWindowAppearingPtr.asFunction<bool Function()>();

  bool igIsWindowCollapsed() {
    return _igIsWindowCollapsed();
  }

  late final _igIsWindowCollapsedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsWindowCollapsed');
  late final _igIsWindowCollapsed =
      _igIsWindowCollapsedPtr.asFunction<bool Function()>();

  bool igIsWindowFocused(
    int flags,
  ) {
    return _igIsWindowFocused(
      flags,
    );
  }

  late final _igIsWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiFocusedFlags)>>(
          'igIsWindowFocused');
  late final _igIsWindowFocused =
      _igIsWindowFocusedPtr.asFunction<bool Function(int)>();

  bool igIsWindowHovered(
    int flags,
  ) {
    return _igIsWindowHovered(
      flags,
    );
  }

  late final _igIsWindowHoveredPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiHoveredFlags)>>(
          'igIsWindowHovered');
  late final _igIsWindowHovered =
      _igIsWindowHoveredPtr.asFunction<bool Function(int)>();

  ffi.Pointer<ImDrawList> igGetWindowDrawList() {
    return _igGetWindowDrawList();
  }

  late final _igGetWindowDrawListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawList> Function()>>(
          'igGetWindowDrawList');
  late final _igGetWindowDrawList =
      _igGetWindowDrawListPtr.asFunction<ffi.Pointer<ImDrawList> Function()>();

  double igGetWindowDpiScale() {
    return _igGetWindowDpiScale();
  }

  late final _igGetWindowDpiScalePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetWindowDpiScale');
  late final _igGetWindowDpiScale =
      _igGetWindowDpiScalePtr.asFunction<double Function()>();

  void igGetWindowPos(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetWindowPos(
      pOut,
    );
  }

  late final _igGetWindowPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetWindowPos');
  late final _igGetWindowPos =
      _igGetWindowPosPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igGetWindowSize(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetWindowSize(
      pOut,
    );
  }

  late final _igGetWindowSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetWindowSize');
  late final _igGetWindowSize =
      _igGetWindowSizePtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  double igGetWindowWidth() {
    return _igGetWindowWidth();
  }

  late final _igGetWindowWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetWindowWidth');
  late final _igGetWindowWidth =
      _igGetWindowWidthPtr.asFunction<double Function()>();

  double igGetWindowHeight() {
    return _igGetWindowHeight();
  }

  late final _igGetWindowHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetWindowHeight');
  late final _igGetWindowHeight =
      _igGetWindowHeightPtr.asFunction<double Function()>();

  ffi.Pointer<ImGuiViewport> igGetWindowViewport() {
    return _igGetWindowViewport();
  }

  late final _igGetWindowViewportPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiViewport> Function()>>(
          'igGetWindowViewport');
  late final _igGetWindowViewport = _igGetWindowViewportPtr
      .asFunction<ffi.Pointer<ImGuiViewport> Function()>();

  void igSetNextWindowPos(
    ImVec2 pos,
    int cond,
    ImVec2 pivot,
  ) {
    return _igSetNextWindowPos(
      pos,
      cond,
      pivot,
    );
  }

  late final _igSetNextWindowPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ImGuiCond, ImVec2)>>(
          'igSetNextWindowPos');
  late final _igSetNextWindowPos =
      _igSetNextWindowPosPtr.asFunction<void Function(ImVec2, int, ImVec2)>();

  void igSetNextWindowSize(
    ImVec2 size,
    int cond,
  ) {
    return _igSetNextWindowSize(
      size,
      cond,
    );
  }

  late final _igSetNextWindowSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ImGuiCond)>>(
          'igSetNextWindowSize');
  late final _igSetNextWindowSize =
      _igSetNextWindowSizePtr.asFunction<void Function(ImVec2, int)>();

  void igSetNextWindowSizeConstraints(
    ImVec2 size_min,
    ImVec2 size_max,
    ImGuiSizeCallback custom_callback,
    ffi.Pointer<ffi.Void> custom_callback_data,
  ) {
    return _igSetNextWindowSizeConstraints(
      size_min,
      size_max,
      custom_callback,
      custom_callback_data,
    );
  }

  late final _igSetNextWindowSizeConstraintsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImVec2, ImVec2, ImGuiSizeCallback,
              ffi.Pointer<ffi.Void>)>>('igSetNextWindowSizeConstraints');
  late final _igSetNextWindowSizeConstraints =
      _igSetNextWindowSizeConstraintsPtr.asFunction<
          void Function(
              ImVec2, ImVec2, ImGuiSizeCallback, ffi.Pointer<ffi.Void>)>();

  void igSetNextWindowContentSize(
    ImVec2 size,
  ) {
    return _igSetNextWindowContentSize(
      size,
    );
  }

  late final _igSetNextWindowContentSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2)>>(
          'igSetNextWindowContentSize');
  late final _igSetNextWindowContentSize =
      _igSetNextWindowContentSizePtr.asFunction<void Function(ImVec2)>();

  void igSetNextWindowCollapsed(
    bool collapsed,
    int cond,
  ) {
    return _igSetNextWindowCollapsed(
      collapsed,
      cond,
    );
  }

  late final _igSetNextWindowCollapsedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool, ImGuiCond)>>(
          'igSetNextWindowCollapsed');
  late final _igSetNextWindowCollapsed =
      _igSetNextWindowCollapsedPtr.asFunction<void Function(bool, int)>();

  void igSetNextWindowFocus() {
    return _igSetNextWindowFocus();
  }

  late final _igSetNextWindowFocusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igSetNextWindowFocus');
  late final _igSetNextWindowFocus =
      _igSetNextWindowFocusPtr.asFunction<void Function()>();

  void igSetNextWindowScroll(
    ImVec2 scroll,
  ) {
    return _igSetNextWindowScroll(
      scroll,
    );
  }

  late final _igSetNextWindowScrollPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2)>>(
          'igSetNextWindowScroll');
  late final _igSetNextWindowScroll =
      _igSetNextWindowScrollPtr.asFunction<void Function(ImVec2)>();

  void igSetNextWindowBgAlpha(
    double alpha,
  ) {
    return _igSetNextWindowBgAlpha(
      alpha,
    );
  }

  late final _igSetNextWindowBgAlphaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetNextWindowBgAlpha');
  late final _igSetNextWindowBgAlpha =
      _igSetNextWindowBgAlphaPtr.asFunction<void Function(double)>();

  void igSetNextWindowViewport(
    int viewport_id,
  ) {
    return _igSetNextWindowViewport(
      viewport_id,
    );
  }

  late final _igSetNextWindowViewportPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igSetNextWindowViewport');
  late final _igSetNextWindowViewport =
      _igSetNextWindowViewportPtr.asFunction<void Function(int)>();

  void igSetWindowPos_Vec2(
    ImVec2 pos,
    int cond,
  ) {
    return _igSetWindowPos_Vec2(
      pos,
      cond,
    );
  }

  late final _igSetWindowPos_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ImGuiCond)>>(
          'igSetWindowPos_Vec2');
  late final _igSetWindowPos_Vec2 =
      _igSetWindowPos_Vec2Ptr.asFunction<void Function(ImVec2, int)>();

  void igSetWindowSize_Vec2(
    ImVec2 size,
    int cond,
  ) {
    return _igSetWindowSize_Vec2(
      size,
      cond,
    );
  }

  late final _igSetWindowSize_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ImGuiCond)>>(
          'igSetWindowSize_Vec2');
  late final _igSetWindowSize_Vec2 =
      _igSetWindowSize_Vec2Ptr.asFunction<void Function(ImVec2, int)>();

  void igSetWindowCollapsed_Bool(
    bool collapsed,
    int cond,
  ) {
    return _igSetWindowCollapsed_Bool(
      collapsed,
      cond,
    );
  }

  late final _igSetWindowCollapsed_BoolPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool, ImGuiCond)>>(
          'igSetWindowCollapsed_Bool');
  late final _igSetWindowCollapsed_Bool =
      _igSetWindowCollapsed_BoolPtr.asFunction<void Function(bool, int)>();

  void igSetWindowFocus_Nil() {
    return _igSetWindowFocus_Nil();
  }

  late final _igSetWindowFocus_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igSetWindowFocus_Nil');
  late final _igSetWindowFocus_Nil =
      _igSetWindowFocus_NilPtr.asFunction<void Function()>();

  void igSetWindowFontScale(
    double scale,
  ) {
    return _igSetWindowFontScale(
      scale,
    );
  }

  late final _igSetWindowFontScalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetWindowFontScale');
  late final _igSetWindowFontScale =
      _igSetWindowFontScalePtr.asFunction<void Function(double)>();

  void igSetWindowPos_Str(
    ffi.Pointer<ffi.Char> name,
    ImVec2 pos,
    int cond,
  ) {
    return _igSetWindowPos_Str(
      name,
      pos,
      cond,
    );
  }

  late final _igSetWindowPos_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ImVec2, ImGuiCond)>>('igSetWindowPos_Str');
  late final _igSetWindowPos_Str = _igSetWindowPos_StrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, ImVec2, int)>();

  void igSetWindowSize_Str(
    ffi.Pointer<ffi.Char> name,
    ImVec2 size,
    int cond,
  ) {
    return _igSetWindowSize_Str(
      name,
      size,
      cond,
    );
  }

  late final _igSetWindowSize_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ImVec2,
              ImGuiCond)>>('igSetWindowSize_Str');
  late final _igSetWindowSize_Str = _igSetWindowSize_StrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, ImVec2, int)>();

  void igSetWindowCollapsed_Str(
    ffi.Pointer<ffi.Char> name,
    bool collapsed,
    int cond,
  ) {
    return _igSetWindowCollapsed_Str(
      name,
      collapsed,
      cond,
    );
  }

  late final _igSetWindowCollapsed_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Bool,
              ImGuiCond)>>('igSetWindowCollapsed_Str');
  late final _igSetWindowCollapsed_Str = _igSetWindowCollapsed_StrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, bool, int)>();

  void igSetWindowFocus_Str(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _igSetWindowFocus_Str(
      name,
    );
  }

  late final _igSetWindowFocus_StrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSetWindowFocus_Str');
  late final _igSetWindowFocus_Str = _igSetWindowFocus_StrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  double igGetScrollX() {
    return _igGetScrollX();
  }

  late final _igGetScrollXPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetScrollX');
  late final _igGetScrollX = _igGetScrollXPtr.asFunction<double Function()>();

  double igGetScrollY() {
    return _igGetScrollY();
  }

  late final _igGetScrollYPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetScrollY');
  late final _igGetScrollY = _igGetScrollYPtr.asFunction<double Function()>();

  void igSetScrollX_Float(
    double scroll_x,
  ) {
    return _igSetScrollX_Float(
      scroll_x,
    );
  }

  late final _igSetScrollX_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetScrollX_Float');
  late final _igSetScrollX_Float =
      _igSetScrollX_FloatPtr.asFunction<void Function(double)>();

  void igSetScrollY_Float(
    double scroll_y,
  ) {
    return _igSetScrollY_Float(
      scroll_y,
    );
  }

  late final _igSetScrollY_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetScrollY_Float');
  late final _igSetScrollY_Float =
      _igSetScrollY_FloatPtr.asFunction<void Function(double)>();

  double igGetScrollMaxX() {
    return _igGetScrollMaxX();
  }

  late final _igGetScrollMaxXPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetScrollMaxX');
  late final _igGetScrollMaxX =
      _igGetScrollMaxXPtr.asFunction<double Function()>();

  double igGetScrollMaxY() {
    return _igGetScrollMaxY();
  }

  late final _igGetScrollMaxYPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetScrollMaxY');
  late final _igGetScrollMaxY =
      _igGetScrollMaxYPtr.asFunction<double Function()>();

  void igSetScrollHereX(
    double center_x_ratio,
  ) {
    return _igSetScrollHereX(
      center_x_ratio,
    );
  }

  late final _igSetScrollHereXPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetScrollHereX');
  late final _igSetScrollHereX =
      _igSetScrollHereXPtr.asFunction<void Function(double)>();

  void igSetScrollHereY(
    double center_y_ratio,
  ) {
    return _igSetScrollHereY(
      center_y_ratio,
    );
  }

  late final _igSetScrollHereYPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetScrollHereY');
  late final _igSetScrollHereY =
      _igSetScrollHereYPtr.asFunction<void Function(double)>();

  void igSetScrollFromPosX_Float(
    double local_x,
    double center_x_ratio,
  ) {
    return _igSetScrollFromPosX_Float(
      local_x,
      center_x_ratio,
    );
  }

  late final _igSetScrollFromPosX_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'igSetScrollFromPosX_Float');
  late final _igSetScrollFromPosX_Float =
      _igSetScrollFromPosX_FloatPtr.asFunction<void Function(double, double)>();

  void igSetScrollFromPosY_Float(
    double local_y,
    double center_y_ratio,
  ) {
    return _igSetScrollFromPosY_Float(
      local_y,
      center_y_ratio,
    );
  }

  late final _igSetScrollFromPosY_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'igSetScrollFromPosY_Float');
  late final _igSetScrollFromPosY_Float =
      _igSetScrollFromPosY_FloatPtr.asFunction<void Function(double, double)>();

  void igPushFont(
    ffi.Pointer<ImFont> font,
  ) {
    return _igPushFont(
      font,
    );
  }

  late final _igPushFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>)>>(
          'igPushFont');
  late final _igPushFont =
      _igPushFontPtr.asFunction<void Function(ffi.Pointer<ImFont>)>();

  void igPopFont() {
    return _igPopFont();
  }

  late final _igPopFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopFont');
  late final _igPopFont = _igPopFontPtr.asFunction<void Function()>();

  void igPushStyleColor_U32(
    int idx,
    int col,
  ) {
    return _igPushStyleColor_U32(
      idx,
      col,
    );
  }

  late final _igPushStyleColor_U32Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiCol, ImU32)>>(
          'igPushStyleColor_U32');
  late final _igPushStyleColor_U32 =
      _igPushStyleColor_U32Ptr.asFunction<void Function(int, int)>();

  void igPushStyleColor_Vec4(
    int idx,
    ImVec4 col,
  ) {
    return _igPushStyleColor_Vec4(
      idx,
      col,
    );
  }

  late final _igPushStyleColor_Vec4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiCol, ImVec4)>>(
          'igPushStyleColor_Vec4');
  late final _igPushStyleColor_Vec4 =
      _igPushStyleColor_Vec4Ptr.asFunction<void Function(int, ImVec4)>();

  void igPopStyleColor(
    int count,
  ) {
    return _igPopStyleColor(
      count,
    );
  }

  late final _igPopStyleColorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'igPopStyleColor');
  late final _igPopStyleColor =
      _igPopStyleColorPtr.asFunction<void Function(int)>();

  void igPushStyleVar_Float(
    int idx,
    double val,
  ) {
    return _igPushStyleVar_Float(
      idx,
      val,
    );
  }

  late final _igPushStyleVar_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiStyleVar, ffi.Float)>>(
          'igPushStyleVar_Float');
  late final _igPushStyleVar_Float =
      _igPushStyleVar_FloatPtr.asFunction<void Function(int, double)>();

  void igPushStyleVar_Vec2(
    int idx,
    ImVec2 val,
  ) {
    return _igPushStyleVar_Vec2(
      idx,
      val,
    );
  }

  late final _igPushStyleVar_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiStyleVar, ImVec2)>>(
          'igPushStyleVar_Vec2');
  late final _igPushStyleVar_Vec2 =
      _igPushStyleVar_Vec2Ptr.asFunction<void Function(int, ImVec2)>();

  void igPushStyleVarX(
    int idx,
    double val_x,
  ) {
    return _igPushStyleVarX(
      idx,
      val_x,
    );
  }

  late final _igPushStyleVarXPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiStyleVar, ffi.Float)>>(
          'igPushStyleVarX');
  late final _igPushStyleVarX =
      _igPushStyleVarXPtr.asFunction<void Function(int, double)>();

  void igPushStyleVarY(
    int idx,
    double val_y,
  ) {
    return _igPushStyleVarY(
      idx,
      val_y,
    );
  }

  late final _igPushStyleVarYPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiStyleVar, ffi.Float)>>(
          'igPushStyleVarY');
  late final _igPushStyleVarY =
      _igPushStyleVarYPtr.asFunction<void Function(int, double)>();

  void igPopStyleVar(
    int count,
  ) {
    return _igPopStyleVar(
      count,
    );
  }

  late final _igPopStyleVarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('igPopStyleVar');
  late final _igPopStyleVar =
      _igPopStyleVarPtr.asFunction<void Function(int)>();

  void igPushItemFlag(
    int option,
    bool enabled,
  ) {
    return _igPushItemFlag(
      option,
      enabled,
    );
  }

  late final _igPushItemFlagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiItemFlags, ffi.Bool)>>(
          'igPushItemFlag');
  late final _igPushItemFlag =
      _igPushItemFlagPtr.asFunction<void Function(int, bool)>();

  void igPopItemFlag() {
    return _igPopItemFlag();
  }

  late final _igPopItemFlagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopItemFlag');
  late final _igPopItemFlag = _igPopItemFlagPtr.asFunction<void Function()>();

  void igPushItemWidth(
    double item_width,
  ) {
    return _igPushItemWidth(
      item_width,
    );
  }

  late final _igPushItemWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igPushItemWidth');
  late final _igPushItemWidth =
      _igPushItemWidthPtr.asFunction<void Function(double)>();

  void igPopItemWidth() {
    return _igPopItemWidth();
  }

  late final _igPopItemWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopItemWidth');
  late final _igPopItemWidth = _igPopItemWidthPtr.asFunction<void Function()>();

  void igSetNextItemWidth(
    double item_width,
  ) {
    return _igSetNextItemWidth(
      item_width,
    );
  }

  late final _igSetNextItemWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetNextItemWidth');
  late final _igSetNextItemWidth =
      _igSetNextItemWidthPtr.asFunction<void Function(double)>();

  double igCalcItemWidth() {
    return _igCalcItemWidth();
  }

  late final _igCalcItemWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igCalcItemWidth');
  late final _igCalcItemWidth =
      _igCalcItemWidthPtr.asFunction<double Function()>();

  void igPushTextWrapPos(
    double wrap_local_pos_x,
  ) {
    return _igPushTextWrapPos(
      wrap_local_pos_x,
    );
  }

  late final _igPushTextWrapPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igPushTextWrapPos');
  late final _igPushTextWrapPos =
      _igPushTextWrapPosPtr.asFunction<void Function(double)>();

  void igPopTextWrapPos() {
    return _igPopTextWrapPos();
  }

  late final _igPopTextWrapPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopTextWrapPos');
  late final _igPopTextWrapPos =
      _igPopTextWrapPosPtr.asFunction<void Function()>();

  ffi.Pointer<ImFont> igGetFont() {
    return _igGetFont();
  }

  late final _igGetFontPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImFont> Function()>>('igGetFont');
  late final _igGetFont =
      _igGetFontPtr.asFunction<ffi.Pointer<ImFont> Function()>();

  double igGetFontSize() {
    return _igGetFontSize();
  }

  late final _igGetFontSizePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetFontSize');
  late final _igGetFontSize = _igGetFontSizePtr.asFunction<double Function()>();

  void igGetFontTexUvWhitePixel(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetFontTexUvWhitePixel(
      pOut,
    );
  }

  late final _igGetFontTexUvWhitePixelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetFontTexUvWhitePixel');
  late final _igGetFontTexUvWhitePixel = _igGetFontTexUvWhitePixelPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>)>();

  int igGetColorU32_Col(
    int idx,
    double alpha_mul,
  ) {
    return _igGetColorU32_Col(
      idx,
      alpha_mul,
    );
  }

  late final _igGetColorU32_ColPtr =
      _lookup<ffi.NativeFunction<ImU32 Function(ImGuiCol, ffi.Float)>>(
          'igGetColorU32_Col');
  late final _igGetColorU32_Col =
      _igGetColorU32_ColPtr.asFunction<int Function(int, double)>();

  int igGetColorU32_Vec4(
    ImVec4 col,
  ) {
    return _igGetColorU32_Vec4(
      col,
    );
  }

  late final _igGetColorU32_Vec4Ptr =
      _lookup<ffi.NativeFunction<ImU32 Function(ImVec4)>>('igGetColorU32_Vec4');
  late final _igGetColorU32_Vec4 =
      _igGetColorU32_Vec4Ptr.asFunction<int Function(ImVec4)>();

  int igGetColorU32_U32(
    int col,
    double alpha_mul,
  ) {
    return _igGetColorU32_U32(
      col,
      alpha_mul,
    );
  }

  late final _igGetColorU32_U32Ptr =
      _lookup<ffi.NativeFunction<ImU32 Function(ImU32, ffi.Float)>>(
          'igGetColorU32_U32');
  late final _igGetColorU32_U32 =
      _igGetColorU32_U32Ptr.asFunction<int Function(int, double)>();

  ffi.Pointer<ImVec4> igGetStyleColorVec4(
    int idx,
  ) {
    return _igGetStyleColorVec4(
      idx,
    );
  }

  late final _igGetStyleColorVec4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec4> Function(ImGuiCol)>>(
          'igGetStyleColorVec4');
  late final _igGetStyleColorVec4 =
      _igGetStyleColorVec4Ptr.asFunction<ffi.Pointer<ImVec4> Function(int)>();

  void igGetCursorScreenPos(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetCursorScreenPos(
      pOut,
    );
  }

  late final _igGetCursorScreenPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetCursorScreenPos');
  late final _igGetCursorScreenPos =
      _igGetCursorScreenPosPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igSetCursorScreenPos(
    ImVec2 pos,
  ) {
    return _igSetCursorScreenPos(
      pos,
    );
  }

  late final _igSetCursorScreenPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2)>>(
          'igSetCursorScreenPos');
  late final _igSetCursorScreenPos =
      _igSetCursorScreenPosPtr.asFunction<void Function(ImVec2)>();

  void igGetContentRegionAvail(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetContentRegionAvail(
      pOut,
    );
  }

  late final _igGetContentRegionAvailPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetContentRegionAvail');
  late final _igGetContentRegionAvail = _igGetContentRegionAvailPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igGetCursorPos(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetCursorPos(
      pOut,
    );
  }

  late final _igGetCursorPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetCursorPos');
  late final _igGetCursorPos =
      _igGetCursorPosPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  double igGetCursorPosX() {
    return _igGetCursorPosX();
  }

  late final _igGetCursorPosXPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetCursorPosX');
  late final _igGetCursorPosX =
      _igGetCursorPosXPtr.asFunction<double Function()>();

  double igGetCursorPosY() {
    return _igGetCursorPosY();
  }

  late final _igGetCursorPosYPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetCursorPosY');
  late final _igGetCursorPosY =
      _igGetCursorPosYPtr.asFunction<double Function()>();

  void igSetCursorPos(
    ImVec2 local_pos,
  ) {
    return _igSetCursorPos(
      local_pos,
    );
  }

  late final _igSetCursorPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2)>>('igSetCursorPos');
  late final _igSetCursorPos =
      _igSetCursorPosPtr.asFunction<void Function(ImVec2)>();

  void igSetCursorPosX(
    double local_x,
  ) {
    return _igSetCursorPosX(
      local_x,
    );
  }

  late final _igSetCursorPosXPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetCursorPosX');
  late final _igSetCursorPosX =
      _igSetCursorPosXPtr.asFunction<void Function(double)>();

  void igSetCursorPosY(
    double local_y,
  ) {
    return _igSetCursorPosY(
      local_y,
    );
  }

  late final _igSetCursorPosYPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'igSetCursorPosY');
  late final _igSetCursorPosY =
      _igSetCursorPosYPtr.asFunction<void Function(double)>();

  void igGetCursorStartPos(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetCursorStartPos(
      pOut,
    );
  }

  late final _igGetCursorStartPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetCursorStartPos');
  late final _igGetCursorStartPos =
      _igGetCursorStartPosPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igSeparator() {
    return _igSeparator();
  }

  late final _igSeparatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igSeparator');
  late final _igSeparator = _igSeparatorPtr.asFunction<void Function()>();

  void igSameLine(
    double offset_from_start_x,
    double spacing,
  ) {
    return _igSameLine(
      offset_from_start_x,
      spacing,
    );
  }

  late final _igSameLinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'igSameLine');
  late final _igSameLine =
      _igSameLinePtr.asFunction<void Function(double, double)>();

  void igNewLine() {
    return _igNewLine();
  }

  late final _igNewLinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igNewLine');
  late final _igNewLine = _igNewLinePtr.asFunction<void Function()>();

  void igSpacing() {
    return _igSpacing();
  }

  late final _igSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igSpacing');
  late final _igSpacing = _igSpacingPtr.asFunction<void Function()>();

  void igDummy(
    ImVec2 size,
  ) {
    return _igDummy(
      size,
    );
  }

  late final _igDummyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2)>>('igDummy');
  late final _igDummy = _igDummyPtr.asFunction<void Function(ImVec2)>();

  void igIndent(
    double indent_w,
  ) {
    return _igIndent(
      indent_w,
    );
  }

  late final _igIndentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>('igIndent');
  late final _igIndent = _igIndentPtr.asFunction<void Function(double)>();

  void igUnindent(
    double indent_w,
  ) {
    return _igUnindent(
      indent_w,
    );
  }

  late final _igUnindentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>('igUnindent');
  late final _igUnindent = _igUnindentPtr.asFunction<void Function(double)>();

  void igBeginGroup() {
    return _igBeginGroup();
  }

  late final _igBeginGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igBeginGroup');
  late final _igBeginGroup = _igBeginGroupPtr.asFunction<void Function()>();

  void igEndGroup() {
    return _igEndGroup();
  }

  late final _igEndGroupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndGroup');
  late final _igEndGroup = _igEndGroupPtr.asFunction<void Function()>();

  void igAlignTextToFramePadding() {
    return _igAlignTextToFramePadding();
  }

  late final _igAlignTextToFramePaddingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igAlignTextToFramePadding');
  late final _igAlignTextToFramePadding =
      _igAlignTextToFramePaddingPtr.asFunction<void Function()>();

  double igGetTextLineHeight() {
    return _igGetTextLineHeight();
  }

  late final _igGetTextLineHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetTextLineHeight');
  late final _igGetTextLineHeight =
      _igGetTextLineHeightPtr.asFunction<double Function()>();

  double igGetTextLineHeightWithSpacing() {
    return _igGetTextLineHeightWithSpacing();
  }

  late final _igGetTextLineHeightWithSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'igGetTextLineHeightWithSpacing');
  late final _igGetTextLineHeightWithSpacing =
      _igGetTextLineHeightWithSpacingPtr.asFunction<double Function()>();

  double igGetFrameHeight() {
    return _igGetFrameHeight();
  }

  late final _igGetFrameHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGetFrameHeight');
  late final _igGetFrameHeight =
      _igGetFrameHeightPtr.asFunction<double Function()>();

  double igGetFrameHeightWithSpacing() {
    return _igGetFrameHeightWithSpacing();
  }

  late final _igGetFrameHeightWithSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'igGetFrameHeightWithSpacing');
  late final _igGetFrameHeightWithSpacing =
      _igGetFrameHeightWithSpacingPtr.asFunction<double Function()>();

  void igPushID_Str(
    ffi.Pointer<ffi.Char> str_id,
  ) {
    return _igPushID_Str(
      str_id,
    );
  }

  late final _igPushID_StrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igPushID_Str');
  late final _igPushID_Str =
      _igPushID_StrPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igPushID_StrStr(
    ffi.Pointer<ffi.Char> str_id_begin,
    ffi.Pointer<ffi.Char> str_id_end,
  ) {
    return _igPushID_StrStr(
      str_id_begin,
      str_id_end,
    );
  }

  late final _igPushID_StrStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igPushID_StrStr');
  late final _igPushID_StrStr = _igPushID_StrStrPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igPushID_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
  ) {
    return _igPushID_Ptr(
      ptr_id,
    );
  }

  late final _igPushID_PtrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'igPushID_Ptr');
  late final _igPushID_Ptr =
      _igPushID_PtrPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void igPushID_Int(
    int int_id,
  ) {
    return _igPushID_Int(
      int_id,
    );
  }

  late final _igPushID_IntPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('igPushID_Int');
  late final _igPushID_Int = _igPushID_IntPtr.asFunction<void Function(int)>();

  void igPopID() {
    return _igPopID();
  }

  late final _igPopIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopID');
  late final _igPopID = _igPopIDPtr.asFunction<void Function()>();

  int igGetID_Str(
    ffi.Pointer<ffi.Char> str_id,
  ) {
    return _igGetID_Str(
      str_id,
    );
  }

  late final _igGetID_StrPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.Pointer<ffi.Char>)>>(
          'igGetID_Str');
  late final _igGetID_Str =
      _igGetID_StrPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int igGetID_StrStr(
    ffi.Pointer<ffi.Char> str_id_begin,
    ffi.Pointer<ffi.Char> str_id_end,
  ) {
    return _igGetID_StrStr(
      str_id_begin,
      str_id_end,
    );
  }

  late final _igGetID_StrStrPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('igGetID_StrStr');
  late final _igGetID_StrStr = _igGetID_StrStrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int igGetID_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
  ) {
    return _igGetID_Ptr(
      ptr_id,
    );
  }

  late final _igGetID_PtrPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.Pointer<ffi.Void>)>>(
          'igGetID_Ptr');
  late final _igGetID_Ptr =
      _igGetID_PtrPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int igGetID_Int(
    int int_id,
  ) {
    return _igGetID_Int(
      int_id,
    );
  }

  late final _igGetID_IntPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.Int)>>('igGetID_Int');
  late final _igGetID_Int = _igGetID_IntPtr.asFunction<int Function(int)>();

  void igTextUnformatted(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _igTextUnformatted(
      text,
      text_end,
    );
  }

  late final _igTextUnformattedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igTextUnformatted');
  late final _igTextUnformatted = _igTextUnformattedPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igText(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igText(
      fmt,
    );
  }

  late final _igTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igText');
  late final _igText =
      _igTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igTextV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTextV(
      fmt,
      args,
    );
  }

  late final _igTextVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('igTextV');
  late final _igTextV = _igTextVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void igTextColored(
    ImVec4 col,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTextColored(
      col,
      fmt,
    );
  }

  late final _igTextColoredPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ImVec4, ffi.Pointer<ffi.Char>)>>(
      'igTextColored');
  late final _igTextColored = _igTextColoredPtr
      .asFunction<void Function(ImVec4, ffi.Pointer<ffi.Char>)>();

  void igTextColoredV(
    ImVec4 col,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTextColoredV(
      col,
      fmt,
      args,
    );
  }

  late final _igTextColoredVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImVec4, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTextColoredV');
  late final _igTextColoredV = _igTextColoredVPtr.asFunction<
      void Function(
          ImVec4, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void igTextDisabled(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTextDisabled(
      fmt,
    );
  }

  late final _igTextDisabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igTextDisabled');
  late final _igTextDisabled =
      _igTextDisabledPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igTextDisabledV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTextDisabledV(
      fmt,
      args,
    );
  }

  late final _igTextDisabledVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTextDisabledV');
  late final _igTextDisabledV = _igTextDisabledVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void igTextWrapped(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTextWrapped(
      fmt,
    );
  }

  late final _igTextWrappedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igTextWrapped');
  late final _igTextWrapped =
      _igTextWrappedPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igTextWrappedV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTextWrappedV(
      fmt,
      args,
    );
  }

  late final _igTextWrappedVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTextWrappedV');
  late final _igTextWrappedV = _igTextWrappedVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void igLabelText(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igLabelText(
      label,
      fmt,
    );
  }

  late final _igLabelTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('igLabelText');
  late final _igLabelText = _igLabelTextPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igLabelTextV(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igLabelTextV(
      label,
      fmt,
      args,
    );
  }

  late final _igLabelTextVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igLabelTextV');
  late final _igLabelTextV = _igLabelTextVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void igBulletText(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igBulletText(
      fmt,
    );
  }

  late final _igBulletTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igBulletText');
  late final _igBulletText =
      _igBulletTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igBulletTextV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igBulletTextV(
      fmt,
      args,
    );
  }

  late final _igBulletTextVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igBulletTextV');
  late final _igBulletTextV = _igBulletTextVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void igSeparatorText(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igSeparatorText(
      label,
    );
  }

  late final _igSeparatorTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSeparatorText');
  late final _igSeparatorText =
      _igSeparatorTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  bool igButton(
    ffi.Pointer<ffi.Char> label,
    ImVec2 size,
  ) {
    return _igButton(
      label,
      size,
    );
  }

  late final _igButtonPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ImVec2)>>(
      'igButton');
  late final _igButton =
      _igButtonPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, ImVec2)>();

  bool igSmallButton(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igSmallButton(
      label,
    );
  }

  late final _igSmallButtonPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'igSmallButton');
  late final _igSmallButton =
      _igSmallButtonPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool igInvisibleButton(
    ffi.Pointer<ffi.Char> str_id,
    ImVec2 size,
    int flags,
  ) {
    return _igInvisibleButton(
      str_id,
      size,
      flags,
    );
  }

  late final _igInvisibleButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImVec2,
              ImGuiButtonFlags)>>('igInvisibleButton');
  late final _igInvisibleButton = _igInvisibleButtonPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, ImVec2, int)>();

  bool igArrowButton(
    ffi.Pointer<ffi.Char> str_id,
    ImGuiDir dir,
  ) {
    return _igArrowButton(
      str_id,
      dir.value,
    );
  }

  late final _igArrowButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('igArrowButton');
  late final _igArrowButton =
      _igArrowButtonPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igCheckbox(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Bool> v,
  ) {
    return _igCheckbox(
      label,
      v,
    );
  }

  late final _igCheckboxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>>('igCheckbox');
  late final _igCheckbox = _igCheckboxPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>)>();

  bool igCheckboxFlags_IntPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> flags,
    int flags_value,
  ) {
    return _igCheckboxFlags_IntPtr(
      label,
      flags,
      flags_value,
    );
  }

  late final _igCheckboxFlags_IntPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('igCheckboxFlags_IntPtr');
  late final _igCheckboxFlags_IntPtr = _igCheckboxFlags_IntPtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  bool igCheckboxFlags_UintPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.UnsignedInt> flags,
    int flags_value,
  ) {
    return _igCheckboxFlags_UintPtr(
      label,
      flags,
      flags_value,
    );
  }

  late final _igCheckboxFlags_UintPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('igCheckboxFlags_UintPtr');
  late final _igCheckboxFlags_UintPtr = _igCheckboxFlags_UintPtrPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  bool igRadioButton_Bool(
    ffi.Pointer<ffi.Char> label,
    bool active,
  ) {
    return _igRadioButton_Bool(
      label,
      active,
    );
  }

  late final _igRadioButton_BoolPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Bool)>>(
      'igRadioButton_Bool');
  late final _igRadioButton_Bool = _igRadioButton_BoolPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, bool)>();

  bool igRadioButton_IntPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int v_button,
  ) {
    return _igRadioButton_IntPtr(
      label,
      v,
      v_button,
    );
  }

  late final _igRadioButton_IntPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('igRadioButton_IntPtr');
  late final _igRadioButton_IntPtr = _igRadioButton_IntPtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  void igProgressBar(
    double fraction,
    ImVec2 size_arg,
    ffi.Pointer<ffi.Char> overlay,
  ) {
    return _igProgressBar(
      fraction,
      size_arg,
      overlay,
    );
  }

  late final _igProgressBarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ImVec2, ffi.Pointer<ffi.Char>)>>('igProgressBar');
  late final _igProgressBar = _igProgressBarPtr
      .asFunction<void Function(double, ImVec2, ffi.Pointer<ffi.Char>)>();

  void igBullet() {
    return _igBullet();
  }

  late final _igBulletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igBullet');
  late final _igBullet = _igBulletPtr.asFunction<void Function()>();

  bool igTextLink(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igTextLink(
      label,
    );
  }

  late final _igTextLinkPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'igTextLink');
  late final _igTextLink =
      _igTextLinkPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  void igTextLinkOpenURL(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> url,
  ) {
    return _igTextLinkOpenURL(
      label,
      url,
    );
  }

  late final _igTextLinkOpenURLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igTextLinkOpenURL');
  late final _igTextLinkOpenURL = _igTextLinkOpenURLPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igImage(
    int user_texture_id,
    ImVec2 image_size,
    ImVec2 uv0,
    ImVec2 uv1,
    ImVec4 tint_col,
    ImVec4 border_col,
  ) {
    return _igImage(
      user_texture_id,
      image_size,
      uv0,
      uv1,
      tint_col,
      border_col,
    );
  }

  late final _igImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImTextureID, ImVec2, ImVec2, ImVec2, ImVec4, ImVec4)>>('igImage');
  late final _igImage = _igImagePtr
      .asFunction<void Function(int, ImVec2, ImVec2, ImVec2, ImVec4, ImVec4)>();

  bool igImageButton(
    ffi.Pointer<ffi.Char> str_id,
    int user_texture_id,
    ImVec2 image_size,
    ImVec2 uv0,
    ImVec2 uv1,
    ImVec4 bg_col,
    ImVec4 tint_col,
  ) {
    return _igImageButton(
      str_id,
      user_texture_id,
      image_size,
      uv0,
      uv1,
      bg_col,
      tint_col,
    );
  }

  late final _igImageButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImTextureID, ImVec2, ImVec2,
              ImVec2, ImVec4, ImVec4)>>('igImageButton');
  late final _igImageButton = _igImageButtonPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, ImVec2, ImVec2, ImVec2, ImVec4,
          ImVec4)>();

  bool igBeginCombo(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> preview_value,
    int flags,
  ) {
    return _igBeginCombo(
      label,
      preview_value,
      flags,
    );
  }

  late final _igBeginComboPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ImGuiComboFlags)>>('igBeginCombo');
  late final _igBeginCombo = _igBeginComboPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void igEndCombo() {
    return _igEndCombo();
  }

  late final _igEndComboPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndCombo');
  late final _igEndCombo = _igEndComboPtr.asFunction<void Function()>();

  bool igCombo_Str_arr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> current_item,
    ffi.Pointer<ffi.Pointer<ffi.Char>> items,
    int items_count,
    int popup_max_height_in_items,
  ) {
    return _igCombo_Str_arr(
      label,
      current_item,
      items,
      items_count,
      popup_max_height_in_items,
    );
  }

  late final _igCombo_Str_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Int)>>('igCombo_Str_arr');
  late final _igCombo_Str_arr = _igCombo_Str_arrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, int)>();

  bool igCombo_Str(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> current_item,
    ffi.Pointer<ffi.Char> items_separated_by_zeros,
    int popup_max_height_in_items,
  ) {
    return _igCombo_Str(
      label,
      current_item,
      items_separated_by_zeros,
      popup_max_height_in_items,
    );
  }

  late final _igCombo_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('igCombo_Str');
  late final _igCombo_Str = _igCombo_StrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>, int)>();

  bool igCombo_FnStrPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> current_item,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(
                    ffi.Pointer<ffi.Void> user_data, ffi.Int idx)>>
        getter,
    ffi.Pointer<ffi.Void> user_data,
    int items_count,
    int popup_max_height_in_items,
  ) {
    return _igCombo_FnStrPtr(
      label,
      current_item,
      getter,
      user_data,
      items_count,
      popup_max_height_in_items,
    );
  }

  late final _igCombo_FnStrPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void> user_data, ffi.Int idx)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('igCombo_FnStrPtr');
  late final _igCombo_FnStrPtr = _igCombo_FnStrPtrPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Char> Function(
                      ffi.Pointer<ffi.Void> user_data, ffi.Int idx)>>,
          ffi.Pointer<ffi.Void>,
          int,
          int)>();

  bool igDragFloat(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_speed,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragFloat(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragFloat');
  late final _igDragFloat = _igDragFloatPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, double, ffi.Pointer<ffi.Char>, int)>();

  bool igDragFloat2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_speed,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragFloat2(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragFloat2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragFloat2');
  late final _igDragFloat2 = _igDragFloat2Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, double, ffi.Pointer<ffi.Char>, int)>();

  bool igDragFloat3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_speed,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragFloat3(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragFloat3');
  late final _igDragFloat3 = _igDragFloat3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, double, ffi.Pointer<ffi.Char>, int)>();

  bool igDragFloat4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_speed,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragFloat4(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragFloat4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragFloat4');
  late final _igDragFloat4 = _igDragFloat4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, double, ffi.Pointer<ffi.Char>, int)>();

  bool igDragFloatRange2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v_current_min,
    ffi.Pointer<ffi.Float> v_current_max,
    double v_speed,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<ffi.Char> format_max,
    int flags,
  ) {
    return _igDragFloatRange2(
      label,
      v_current_min,
      v_current_max,
      v_speed,
      v_min,
      v_max,
      format,
      format_max,
      flags,
    );
  }

  late final _igDragFloatRange2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragFloatRange2');
  late final _igDragFloatRange2 = _igDragFloatRange2Ptr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          double,
          double,
          double,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igDragInt(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    double v_speed,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragInt(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragInt');
  late final _igDragInt = _igDragIntPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, double, int,
          int, ffi.Pointer<ffi.Char>, int)>();

  bool igDragInt2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    double v_speed,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragInt2(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragInt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragInt2');
  late final _igDragInt2 = _igDragInt2Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, double, int,
          int, ffi.Pointer<ffi.Char>, int)>();

  bool igDragInt3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    double v_speed,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragInt3(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragInt3');
  late final _igDragInt3 = _igDragInt3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, double, int,
          int, ffi.Pointer<ffi.Char>, int)>();

  bool igDragInt4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    double v_speed,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragInt4(
      label,
      v,
      v_speed,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igDragInt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragInt4');
  late final _igDragInt4 = _igDragInt4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, double, int,
          int, ffi.Pointer<ffi.Char>, int)>();

  bool igDragIntRange2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v_current_min,
    ffi.Pointer<ffi.Int> v_current_max,
    double v_speed,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<ffi.Char> format_max,
    int flags,
  ) {
    return _igDragIntRange2(
      label,
      v_current_min,
      v_current_max,
      v_speed,
      v_min,
      v_max,
      format,
      format_max,
      flags,
    );
  }

  late final _igDragIntRange2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Float,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragIntRange2');
  late final _igDragIntRange2 = _igDragIntRange2Ptr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          double,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igDragScalar(
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    double v_speed,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragScalar(
      label,
      data_type,
      p_data,
      v_speed,
      p_min,
      p_max,
      format,
      flags,
    );
  }

  late final _igDragScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragScalar');
  late final _igDragScalar = _igDragScalarPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          double,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igDragScalarN(
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    int components,
    double v_speed,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragScalarN(
      label,
      data_type,
      p_data,
      components,
      v_speed,
      p_min,
      p_max,
      format,
      flags,
    );
  }

  late final _igDragScalarNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragScalarN');
  late final _igDragScalarN = _igDragScalarNPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          double,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igSliderFloat(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderFloat(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderFloat');
  late final _igSliderFloat = _igSliderFloatPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igSliderFloat2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderFloat2(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderFloat2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderFloat2');
  late final _igSliderFloat2 = _igSliderFloat2Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igSliderFloat3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderFloat3(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderFloat3');
  late final _igSliderFloat3 = _igSliderFloat3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igSliderFloat4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderFloat4(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderFloat4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderFloat4');
  late final _igSliderFloat4 = _igSliderFloat4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igSliderAngle(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v_rad,
    double v_degrees_min,
    double v_degrees_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderAngle(
      label,
      v_rad,
      v_degrees_min,
      v_degrees_max,
      format,
      flags,
    );
  }

  late final _igSliderAnglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderAngle');
  late final _igSliderAngle = _igSliderAnglePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igSliderInt(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderInt(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderInt');
  late final _igSliderInt = _igSliderIntPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  bool igSliderInt2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderInt2(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderInt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderInt2');
  late final _igSliderInt2 = _igSliderInt2Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  bool igSliderInt3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderInt3(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderInt3');
  late final _igSliderInt3 = _igSliderInt3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  bool igSliderInt4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderInt4(
      label,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igSliderInt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderInt4');
  late final _igSliderInt4 = _igSliderInt4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int, int,
          ffi.Pointer<ffi.Char>, int)>();

  bool igSliderScalar(
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderScalar(
      label,
      data_type,
      p_data,
      p_min,
      p_max,
      format,
      flags,
    );
  }

  late final _igSliderScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderScalar');
  late final _igSliderScalar = _igSliderScalarPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igSliderScalarN(
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    int components,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igSliderScalarN(
      label,
      data_type,
      p_data,
      components,
      p_min,
      p_max,
      format,
      flags,
    );
  }

  late final _igSliderScalarNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igSliderScalarN');
  late final _igSliderScalarN = _igSliderScalarNPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igVSliderFloat(
    ffi.Pointer<ffi.Char> label,
    ImVec2 size,
    ffi.Pointer<ffi.Float> v,
    double v_min,
    double v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igVSliderFloat(
      label,
      size,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igVSliderFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImVec2,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igVSliderFloat');
  late final _igVSliderFloat = _igVSliderFloatPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ImVec2, ffi.Pointer<ffi.Float>,
          double, double, ffi.Pointer<ffi.Char>, int)>();

  bool igVSliderInt(
    ffi.Pointer<ffi.Char> label,
    ImVec2 size,
    ffi.Pointer<ffi.Int> v,
    int v_min,
    int v_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igVSliderInt(
      label,
      size,
      v,
      v_min,
      v_max,
      format,
      flags,
    );
  }

  late final _igVSliderIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImVec2,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igVSliderInt');
  late final _igVSliderInt = _igVSliderIntPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ImVec2, ffi.Pointer<ffi.Int>, int,
          int, ffi.Pointer<ffi.Char>, int)>();

  bool igVSliderScalar(
    ffi.Pointer<ffi.Char> label,
    ImVec2 size,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igVSliderScalar(
      label,
      size,
      data_type,
      p_data,
      p_min,
      p_max,
      format,
      flags,
    );
  }

  late final _igVSliderScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImVec2,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igVSliderScalar');
  late final _igVSliderScalar = _igVSliderScalarPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ImVec2,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igInputText(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    int flags,
    ImGuiInputTextCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _igInputText(
      label,
      buf,
      buf_size,
      flags,
      callback,
      user_data,
    );
  }

  late final _igInputTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ImGuiInputTextFlags,
              ImGuiInputTextCallback,
              ffi.Pointer<ffi.Void>)>>('igInputText');
  late final _igInputText = _igInputTextPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int,
          ImGuiInputTextCallback, ffi.Pointer<ffi.Void>)>();

  bool igInputTextMultiline(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ImVec2 size,
    int flags,
    ImGuiInputTextCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _igInputTextMultiline(
      label,
      buf,
      buf_size,
      size,
      flags,
      callback,
      user_data,
    );
  }

  late final _igInputTextMultilinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ImVec2,
              ImGuiInputTextFlags,
              ImGuiInputTextCallback,
              ffi.Pointer<ffi.Void>)>>('igInputTextMultiline');
  late final _igInputTextMultiline = _igInputTextMultilinePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, ImVec2,
          int, ImGuiInputTextCallback, ffi.Pointer<ffi.Void>)>();

  bool igInputTextWithHint(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> hint,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    int flags,
    ImGuiInputTextCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _igInputTextWithHint(
      label,
      hint,
      buf,
      buf_size,
      flags,
      callback,
      user_data,
    );
  }

  late final _igInputTextWithHintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ImGuiInputTextFlags,
              ImGuiInputTextCallback,
              ffi.Pointer<ffi.Void>)>>('igInputTextWithHint');
  late final _igInputTextWithHint = _igInputTextWithHintPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ImGuiInputTextCallback,
          ffi.Pointer<ffi.Void>)>();

  bool igInputFloat(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    double step,
    double step_fast,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputFloat(
      label,
      v,
      step,
      step_fast,
      format,
      flags,
    );
  }

  late final _igInputFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ImGuiInputTextFlags)>>('igInputFloat');
  late final _igInputFloat = _igInputFloatPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igInputFloat2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputFloat2(
      label,
      v,
      format,
      flags,
    );
  }

  late final _igInputFloat2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Char>, ImGuiInputTextFlags)>>('igInputFloat2');
  late final _igInputFloat2 = _igInputFloat2Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Char>, int)>();

  bool igInputFloat3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputFloat3(
      label,
      v,
      format,
      flags,
    );
  }

  late final _igInputFloat3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Char>, ImGuiInputTextFlags)>>('igInputFloat3');
  late final _igInputFloat3 = _igInputFloat3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Char>, int)>();

  bool igInputFloat4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> v,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputFloat4(
      label,
      v,
      format,
      flags,
    );
  }

  late final _igInputFloat4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Char>, ImGuiInputTextFlags)>>('igInputFloat4');
  late final _igInputFloat4 = _igInputFloat4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Char>, int)>();

  bool igInputInt(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int step,
    int step_fast,
    int flags,
  ) {
    return _igInputInt(
      label,
      v,
      step,
      step_fast,
      flags,
    );
  }

  late final _igInputIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ffi.Int, ffi.Int, ImGuiInputTextFlags)>>('igInputInt');
  late final _igInputInt = _igInputIntPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int, int, int)>();

  bool igInputInt2(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int flags,
  ) {
    return _igInputInt2(
      label,
      v,
      flags,
    );
  }

  late final _igInputInt2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ImGuiInputTextFlags)>>('igInputInt2');
  late final _igInputInt2 = _igInputInt2Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  bool igInputInt3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int flags,
  ) {
    return _igInputInt3(
      label,
      v,
      flags,
    );
  }

  late final _igInputInt3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ImGuiInputTextFlags)>>('igInputInt3');
  late final _igInputInt3 = _igInputInt3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  bool igInputInt4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> v,
    int flags,
  ) {
    return _igInputInt4(
      label,
      v,
      flags,
    );
  }

  late final _igInputInt4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
              ImGuiInputTextFlags)>>('igInputInt4');
  late final _igInputInt4 = _igInputInt4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>, int)>();

  bool igInputDouble(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Double> v,
    double step,
    double step_fast,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputDouble(
      label,
      v,
      step,
      step_fast,
      format,
      flags,
    );
  }

  late final _igInputDoublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Double>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Char>,
              ImGuiInputTextFlags)>>('igInputDouble');
  late final _igInputDouble = _igInputDoublePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Double>, double,
          double, ffi.Pointer<ffi.Char>, int)>();

  bool igInputScalar(
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Void> p_step,
    ffi.Pointer<ffi.Void> p_step_fast,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputScalar(
      label,
      data_type,
      p_data,
      p_step,
      p_step_fast,
      format,
      flags,
    );
  }

  late final _igInputScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiInputTextFlags)>>('igInputScalar');
  late final _igInputScalar = _igInputScalarPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igInputScalarN(
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    int components,
    ffi.Pointer<ffi.Void> p_step,
    ffi.Pointer<ffi.Void> p_step_fast,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igInputScalarN(
      label,
      data_type,
      p_data,
      components,
      p_step,
      p_step_fast,
      format,
      flags,
    );
  }

  late final _igInputScalarNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiInputTextFlags)>>('igInputScalarN');
  late final _igInputScalarN = _igInputScalarNPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igColorEdit3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> col,
    int flags,
  ) {
    return _igColorEdit3(
      label,
      col,
      flags,
    );
  }

  late final _igColorEdit3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags)>>('igColorEdit3');
  late final _igColorEdit3 = _igColorEdit3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int)>();

  bool igColorEdit4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> col,
    int flags,
  ) {
    return _igColorEdit4(
      label,
      col,
      flags,
    );
  }

  late final _igColorEdit4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags)>>('igColorEdit4');
  late final _igColorEdit4 = _igColorEdit4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int)>();

  bool igColorPicker3(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> col,
    int flags,
  ) {
    return _igColorPicker3(
      label,
      col,
      flags,
    );
  }

  late final _igColorPicker3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags)>>('igColorPicker3');
  late final _igColorPicker3 = _igColorPicker3Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int)>();

  bool igColorPicker4(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> col,
    int flags,
    ffi.Pointer<ffi.Float> ref_col,
  ) {
    return _igColorPicker4(
      label,
      col,
      flags,
      ref_col,
    );
  }

  late final _igColorPicker4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags, ffi.Pointer<ffi.Float>)>>('igColorPicker4');
  late final _igColorPicker4 = _igColorPicker4Ptr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int,
          ffi.Pointer<ffi.Float>)>();

  bool igColorButton(
    ffi.Pointer<ffi.Char> desc_id,
    ImVec4 col,
    int flags,
    ImVec2 size,
  ) {
    return _igColorButton(
      desc_id,
      col,
      flags,
      size,
    );
  }

  late final _igColorButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImVec4, ImGuiColorEditFlags,
              ImVec2)>>('igColorButton');
  late final _igColorButton = _igColorButtonPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, ImVec4, int, ImVec2)>();

  void igSetColorEditOptions(
    int flags,
  ) {
    return _igSetColorEditOptions(
      flags,
    );
  }

  late final _igSetColorEditOptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiColorEditFlags)>>(
          'igSetColorEditOptions');
  late final _igSetColorEditOptions =
      _igSetColorEditOptionsPtr.asFunction<void Function(int)>();

  bool igTreeNode_Str(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igTreeNode_Str(
      label,
    );
  }

  late final _igTreeNode_StrPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'igTreeNode_Str');
  late final _igTreeNode_Str =
      _igTreeNode_StrPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool igTreeNode_StrStr(
    ffi.Pointer<ffi.Char> str_id,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTreeNode_StrStr(
      str_id,
      fmt,
    );
  }

  late final _igTreeNode_StrStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igTreeNode_StrStr');
  late final _igTreeNode_StrStr = _igTreeNode_StrStrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool igTreeNode_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTreeNode_Ptr(
      ptr_id,
      fmt,
    );
  }

  late final _igTreeNode_PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('igTreeNode_Ptr');
  late final _igTreeNode_Ptr = _igTreeNode_PtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  bool igTreeNodeV_Str(
    ffi.Pointer<ffi.Char> str_id,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTreeNodeV_Str(
      str_id,
      fmt,
      args,
    );
  }

  late final _igTreeNodeV_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTreeNodeV_Str');
  late final _igTreeNodeV_Str = _igTreeNodeV_StrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  bool igTreeNodeV_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTreeNodeV_Ptr(
      ptr_id,
      fmt,
      args,
    );
  }

  late final _igTreeNodeV_PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTreeNodeV_Ptr');
  late final _igTreeNodeV_Ptr = _igTreeNodeV_PtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  bool igTreeNodeEx_Str(
    ffi.Pointer<ffi.Char> label,
    int flags,
  ) {
    return _igTreeNodeEx_Str(
      label,
      flags,
    );
  }

  late final _igTreeNodeEx_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ImGuiTreeNodeFlags)>>('igTreeNodeEx_Str');
  late final _igTreeNodeEx_Str = _igTreeNodeEx_StrPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igTreeNodeEx_StrStr(
    ffi.Pointer<ffi.Char> str_id,
    int flags,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTreeNodeEx_StrStr(
      str_id,
      flags,
      fmt,
    );
  }

  late final _igTreeNodeEx_StrStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImGuiTreeNodeFlags,
              ffi.Pointer<ffi.Char>)>>('igTreeNodeEx_StrStr');
  late final _igTreeNodeEx_StrStr = _igTreeNodeEx_StrStrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  bool igTreeNodeEx_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
    int flags,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igTreeNodeEx_Ptr(
      ptr_id,
      flags,
      fmt,
    );
  }

  late final _igTreeNodeEx_PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ImGuiTreeNodeFlags,
              ffi.Pointer<ffi.Char>)>>('igTreeNodeEx_Ptr');
  late final _igTreeNodeEx_Ptr = _igTreeNodeEx_PtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  bool igTreeNodeExV_Str(
    ffi.Pointer<ffi.Char> str_id,
    int flags,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTreeNodeExV_Str(
      str_id,
      flags,
      fmt,
      args,
    );
  }

  late final _igTreeNodeExV_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiTreeNodeFlags,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTreeNodeExV_Str');
  late final _igTreeNodeExV_Str = _igTreeNodeExV_StrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  bool igTreeNodeExV_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
    int flags,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igTreeNodeExV_Ptr(
      ptr_id,
      flags,
      fmt,
      args,
    );
  }

  late final _igTreeNodeExV_PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Void>,
              ImGuiTreeNodeFlags,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igTreeNodeExV_Ptr');
  late final _igTreeNodeExV_Ptr = _igTreeNodeExV_PtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void igTreePush_Str(
    ffi.Pointer<ffi.Char> str_id,
  ) {
    return _igTreePush_Str(
      str_id,
    );
  }

  late final _igTreePush_StrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igTreePush_Str');
  late final _igTreePush_Str =
      _igTreePush_StrPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igTreePush_Ptr(
    ffi.Pointer<ffi.Void> ptr_id,
  ) {
    return _igTreePush_Ptr(
      ptr_id,
    );
  }

  late final _igTreePush_PtrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'igTreePush_Ptr');
  late final _igTreePush_Ptr =
      _igTreePush_PtrPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void igTreePop() {
    return _igTreePop();
  }

  late final _igTreePopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igTreePop');
  late final _igTreePop = _igTreePopPtr.asFunction<void Function()>();

  double igGetTreeNodeToLabelSpacing() {
    return _igGetTreeNodeToLabelSpacing();
  }

  late final _igGetTreeNodeToLabelSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'igGetTreeNodeToLabelSpacing');
  late final _igGetTreeNodeToLabelSpacing =
      _igGetTreeNodeToLabelSpacingPtr.asFunction<double Function()>();

  bool igCollapsingHeader_TreeNodeFlags(
    ffi.Pointer<ffi.Char> label,
    int flags,
  ) {
    return _igCollapsingHeader_TreeNodeFlags(
      label,
      flags,
    );
  }

  late final _igCollapsingHeader_TreeNodeFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ImGuiTreeNodeFlags)>>('igCollapsingHeader_TreeNodeFlags');
  late final _igCollapsingHeader_TreeNodeFlags =
      _igCollapsingHeader_TreeNodeFlagsPtr
          .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igCollapsingHeader_BoolPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Bool> p_visible,
    int flags,
  ) {
    return _igCollapsingHeader_BoolPtr(
      label,
      p_visible,
      flags,
    );
  }

  late final _igCollapsingHeader_BoolPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>,
              ImGuiTreeNodeFlags)>>('igCollapsingHeader_BoolPtr');
  late final _igCollapsingHeader_BoolPtr =
      _igCollapsingHeader_BoolPtrPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>, int)>();

  void igSetNextItemOpen(
    bool is_open,
    int cond,
  ) {
    return _igSetNextItemOpen(
      is_open,
      cond,
    );
  }

  late final _igSetNextItemOpenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool, ImGuiCond)>>(
          'igSetNextItemOpen');
  late final _igSetNextItemOpen =
      _igSetNextItemOpenPtr.asFunction<void Function(bool, int)>();

  void igSetNextItemStorageID(
    int storage_id,
  ) {
    return _igSetNextItemStorageID(
      storage_id,
    );
  }

  late final _igSetNextItemStorageIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igSetNextItemStorageID');
  late final _igSetNextItemStorageID =
      _igSetNextItemStorageIDPtr.asFunction<void Function(int)>();

  bool igSelectable_Bool(
    ffi.Pointer<ffi.Char> label,
    bool selected,
    int flags,
    ImVec2 size,
  ) {
    return _igSelectable_Bool(
      label,
      selected,
      flags,
      size,
    );
  }

  late final _igSelectable_BoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Bool,
              ImGuiSelectableFlags, ImVec2)>>('igSelectable_Bool');
  late final _igSelectable_Bool = _igSelectable_BoolPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, bool, int, ImVec2)>();

  bool igSelectable_BoolPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Bool> p_selected,
    int flags,
    ImVec2 size,
  ) {
    return _igSelectable_BoolPtr1(
      label,
      p_selected,
      flags,
      size,
    );
  }

  late final _igSelectable_BoolPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>,
              ImGuiSelectableFlags, ImVec2)>>('igSelectable_BoolPtr');
  late final _igSelectable_BoolPtr1 = _igSelectable_BoolPtrPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>, int, ImVec2)>();

  ffi.Pointer<ImGuiMultiSelectIO> igBeginMultiSelect(
    int flags,
    int selection_size,
    int items_count,
  ) {
    return _igBeginMultiSelect(
      flags,
      selection_size,
      items_count,
    );
  }

  late final _igBeginMultiSelectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiMultiSelectIO> Function(
              ImGuiMultiSelectFlags, ffi.Int, ffi.Int)>>('igBeginMultiSelect');
  late final _igBeginMultiSelect = _igBeginMultiSelectPtr
      .asFunction<ffi.Pointer<ImGuiMultiSelectIO> Function(int, int, int)>();

  ffi.Pointer<ImGuiMultiSelectIO> igEndMultiSelect() {
    return _igEndMultiSelect();
  }

  late final _igEndMultiSelectPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiMultiSelectIO> Function()>>(
          'igEndMultiSelect');
  late final _igEndMultiSelect = _igEndMultiSelectPtr
      .asFunction<ffi.Pointer<ImGuiMultiSelectIO> Function()>();

  void igSetNextItemSelectionUserData(
    int selection_user_data,
  ) {
    return _igSetNextItemSelectionUserData(
      selection_user_data,
    );
  }

  late final _igSetNextItemSelectionUserDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiSelectionUserData)>>(
          'igSetNextItemSelectionUserData');
  late final _igSetNextItemSelectionUserData =
      _igSetNextItemSelectionUserDataPtr.asFunction<void Function(int)>();

  bool igIsItemToggledSelection() {
    return _igIsItemToggledSelection();
  }

  late final _igIsItemToggledSelectionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'igIsItemToggledSelection');
  late final _igIsItemToggledSelection =
      _igIsItemToggledSelectionPtr.asFunction<bool Function()>();

  bool igBeginListBox(
    ffi.Pointer<ffi.Char> label,
    ImVec2 size,
  ) {
    return _igBeginListBox(
      label,
      size,
    );
  }

  late final _igBeginListBoxPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ImVec2)>>(
      'igBeginListBox');
  late final _igBeginListBox = _igBeginListBoxPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, ImVec2)>();

  void igEndListBox() {
    return _igEndListBox();
  }

  late final _igEndListBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndListBox');
  late final _igEndListBox = _igEndListBoxPtr.asFunction<void Function()>();

  bool igListBox_Str_arr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> current_item,
    ffi.Pointer<ffi.Pointer<ffi.Char>> items,
    int items_count,
    int height_in_items,
  ) {
    return _igListBox_Str_arr(
      label,
      current_item,
      items,
      items_count,
      height_in_items,
    );
  }

  late final _igListBox_Str_arrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Int)>>('igListBox_Str_arr');
  late final _igListBox_Str_arr = _igListBox_Str_arrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, int)>();

  bool igListBox_FnStrPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Int> current_item,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(
                    ffi.Pointer<ffi.Void> user_data, ffi.Int idx)>>
        getter,
    ffi.Pointer<ffi.Void> user_data,
    int items_count,
    int height_in_items,
  ) {
    return _igListBox_FnStrPtr(
      label,
      current_item,
      getter,
      user_data,
      items_count,
      height_in_items,
    );
  }

  late final _igListBox_FnStrPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void> user_data, ffi.Int idx)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('igListBox_FnStrPtr');
  late final _igListBox_FnStrPtr = _igListBox_FnStrPtrPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Char> Function(
                      ffi.Pointer<ffi.Void> user_data, ffi.Int idx)>>,
          ffi.Pointer<ffi.Void>,
          int,
          int)>();

  void igPlotLines_FloatPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> values,
    int values_count,
    int values_offset,
    ffi.Pointer<ffi.Char> overlay_text,
    double scale_min,
    double scale_max,
    ImVec2 graph_size,
    int stride,
  ) {
    return _igPlotLines_FloatPtr(
      label,
      values,
      values_count,
      values_offset,
      overlay_text,
      scale_min,
      scale_max,
      graph_size,
      stride,
    );
  }

  late final _igPlotLines_FloatPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Float,
              ImVec2,
              ffi.Int)>>('igPlotLines_FloatPtr');
  late final _igPlotLines_FloatPtr = _igPlotLines_FloatPtrPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int, int,
          ffi.Pointer<ffi.Char>, double, double, ImVec2, int)>();

  void igPlotLines_FnFloatPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Float Function(ffi.Pointer<ffi.Void> data, ffi.Int idx)>>
        values_getter,
    ffi.Pointer<ffi.Void> data,
    int values_count,
    int values_offset,
    ffi.Pointer<ffi.Char> overlay_text,
    double scale_min,
    double scale_max,
    ImVec2 graph_size,
  ) {
    return _igPlotLines_FnFloatPtr(
      label,
      values_getter,
      data,
      values_count,
      values_offset,
      overlay_text,
      scale_min,
      scale_max,
      graph_size,
    );
  }

  late final _igPlotLines_FnFloatPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Float Function(
                          ffi.Pointer<ffi.Void> data, ffi.Int idx)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Float,
              ImVec2)>>('igPlotLines_FnFloatPtr');
  late final _igPlotLines_FnFloatPtr = _igPlotLines_FnFloatPtrPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Float Function(ffi.Pointer<ffi.Void> data, ffi.Int idx)>>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          ImVec2)>();

  void igPlotHistogram_FloatPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Float> values,
    int values_count,
    int values_offset,
    ffi.Pointer<ffi.Char> overlay_text,
    double scale_min,
    double scale_max,
    ImVec2 graph_size,
    int stride,
  ) {
    return _igPlotHistogram_FloatPtr(
      label,
      values,
      values_count,
      values_offset,
      overlay_text,
      scale_min,
      scale_max,
      graph_size,
      stride,
    );
  }

  late final _igPlotHistogram_FloatPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Float,
              ImVec2,
              ffi.Int)>>('igPlotHistogram_FloatPtr');
  late final _igPlotHistogram_FloatPtr =
      _igPlotHistogram_FloatPtrPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int, int,
              ffi.Pointer<ffi.Char>, double, double, ImVec2, int)>();

  void igPlotHistogram_FnFloatPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Float Function(ffi.Pointer<ffi.Void> data, ffi.Int idx)>>
        values_getter,
    ffi.Pointer<ffi.Void> data,
    int values_count,
    int values_offset,
    ffi.Pointer<ffi.Char> overlay_text,
    double scale_min,
    double scale_max,
    ImVec2 graph_size,
  ) {
    return _igPlotHistogram_FnFloatPtr(
      label,
      values_getter,
      data,
      values_count,
      values_offset,
      overlay_text,
      scale_min,
      scale_max,
      graph_size,
    );
  }

  late final _igPlotHistogram_FnFloatPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Float Function(
                          ffi.Pointer<ffi.Void> data, ffi.Int idx)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Float,
              ImVec2)>>('igPlotHistogram_FnFloatPtr');
  late final _igPlotHistogram_FnFloatPtr =
      _igPlotHistogram_FnFloatPtrPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Float Function(
                          ffi.Pointer<ffi.Void> data, ffi.Int idx)>>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              double,
              double,
              ImVec2)>();

  void igValue_Bool(
    ffi.Pointer<ffi.Char> prefix,
    bool b,
  ) {
    return _igValue_Bool(
      prefix,
      b,
    );
  }

  late final _igValue_BoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Bool)>>('igValue_Bool');
  late final _igValue_Bool =
      _igValue_BoolPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, bool)>();

  void igValue_Int(
    ffi.Pointer<ffi.Char> prefix,
    int v,
  ) {
    return _igValue_Int(
      prefix,
      v,
    );
  }

  late final _igValue_IntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int)>>('igValue_Int');
  late final _igValue_Int =
      _igValue_IntPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void igValue_Uint(
    ffi.Pointer<ffi.Char> prefix,
    int v,
  ) {
    return _igValue_Uint(
      prefix,
      v,
    );
  }

  late final _igValue_UintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('igValue_Uint');
  late final _igValue_Uint =
      _igValue_UintPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void igValue_Float(
    ffi.Pointer<ffi.Char> prefix,
    double v,
    ffi.Pointer<ffi.Char> float_format,
  ) {
    return _igValue_Float(
      prefix,
      v,
      float_format,
    );
  }

  late final _igValue_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Float,
              ffi.Pointer<ffi.Char>)>>('igValue_Float');
  late final _igValue_Float = _igValue_FloatPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, double, ffi.Pointer<ffi.Char>)>();

  bool igBeginMenuBar() {
    return _igBeginMenuBar();
  }

  late final _igBeginMenuBarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginMenuBar');
  late final _igBeginMenuBar = _igBeginMenuBarPtr.asFunction<bool Function()>();

  void igEndMenuBar() {
    return _igEndMenuBar();
  }

  late final _igEndMenuBarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndMenuBar');
  late final _igEndMenuBar = _igEndMenuBarPtr.asFunction<void Function()>();

  bool igBeginMainMenuBar() {
    return _igBeginMainMenuBar();
  }

  late final _igBeginMainMenuBarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginMainMenuBar');
  late final _igBeginMainMenuBar =
      _igBeginMainMenuBarPtr.asFunction<bool Function()>();

  void igEndMainMenuBar() {
    return _igEndMainMenuBar();
  }

  late final _igEndMainMenuBarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndMainMenuBar');
  late final _igEndMainMenuBar =
      _igEndMainMenuBarPtr.asFunction<void Function()>();

  bool igBeginMenu(
    ffi.Pointer<ffi.Char> label,
    bool enabled,
  ) {
    return _igBeginMenu(
      label,
      enabled,
    );
  }

  late final _igBeginMenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Bool)>>('igBeginMenu');
  late final _igBeginMenu =
      _igBeginMenuPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, bool)>();

  void igEndMenu() {
    return _igEndMenu();
  }

  late final _igEndMenuPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndMenu');
  late final _igEndMenu = _igEndMenuPtr.asFunction<void Function()>();

  bool igMenuItem_Bool(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> shortcut,
    bool selected,
    bool enabled,
  ) {
    return _igMenuItem_Bool(
      label,
      shortcut,
      selected,
      enabled,
    );
  }

  late final _igMenuItem_BoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool, ffi.Bool)>>('igMenuItem_Bool');
  late final _igMenuItem_Bool = _igMenuItem_BoolPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool, bool)>();

  bool igMenuItem_BoolPtr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> shortcut,
    ffi.Pointer<ffi.Bool> p_selected,
    bool enabled,
  ) {
    return _igMenuItem_BoolPtr1(
      label,
      shortcut,
      p_selected,
      enabled,
    );
  }

  late final _igMenuItem_BoolPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>, ffi.Bool)>>('igMenuItem_BoolPtr');
  late final _igMenuItem_BoolPtr1 = _igMenuItem_BoolPtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Bool>, bool)>();

  bool igBeginTooltip() {
    return _igBeginTooltip();
  }

  late final _igBeginTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginTooltip');
  late final _igBeginTooltip = _igBeginTooltipPtr.asFunction<bool Function()>();

  void igEndTooltip() {
    return _igEndTooltip();
  }

  late final _igEndTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndTooltip');
  late final _igEndTooltip = _igEndTooltipPtr.asFunction<void Function()>();

  void igSetTooltip(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igSetTooltip(
      fmt,
    );
  }

  late final _igSetTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSetTooltip');
  late final _igSetTooltip =
      _igSetTooltipPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igSetTooltipV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igSetTooltipV(
      fmt,
      args,
    );
  }

  late final _igSetTooltipVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igSetTooltipV');
  late final _igSetTooltipV = _igSetTooltipVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  bool igBeginItemTooltip() {
    return _igBeginItemTooltip();
  }

  late final _igBeginItemTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginItemTooltip');
  late final _igBeginItemTooltip =
      _igBeginItemTooltipPtr.asFunction<bool Function()>();

  void igSetItemTooltip(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igSetItemTooltip(
      fmt,
    );
  }

  late final _igSetItemTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSetItemTooltip');
  late final _igSetItemTooltip =
      _igSetItemTooltipPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igSetItemTooltipV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igSetItemTooltipV(
      fmt,
      args,
    );
  }

  late final _igSetItemTooltipVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igSetItemTooltipV');
  late final _igSetItemTooltipV = _igSetItemTooltipVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  bool igBeginPopup(
    ffi.Pointer<ffi.Char> str_id,
    int flags,
  ) {
    return _igBeginPopup(
      str_id,
      flags,
    );
  }

  late final _igBeginPopupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ImGuiWindowFlags)>>('igBeginPopup');
  late final _igBeginPopup =
      _igBeginPopupPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igBeginPopupModal(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Bool> p_open,
    int flags,
  ) {
    return _igBeginPopupModal(
      name,
      p_open,
      flags,
    );
  }

  late final _igBeginPopupModalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>,
              ImGuiWindowFlags)>>('igBeginPopupModal');
  late final _igBeginPopupModal = _igBeginPopupModalPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>, int)>();

  void igEndPopup() {
    return _igEndPopup();
  }

  late final _igEndPopupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndPopup');
  late final _igEndPopup = _igEndPopupPtr.asFunction<void Function()>();

  void igOpenPopup_Str(
    ffi.Pointer<ffi.Char> str_id,
    int popup_flags,
  ) {
    return _igOpenPopup_Str(
      str_id,
      popup_flags,
    );
  }

  late final _igOpenPopup_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ImGuiPopupFlags)>>('igOpenPopup_Str');
  late final _igOpenPopup_Str = _igOpenPopup_StrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void igOpenPopup_ID(
    int id,
    int popup_flags,
  ) {
    return _igOpenPopup_ID(
      id,
      popup_flags,
    );
  }

  late final _igOpenPopup_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ImGuiPopupFlags)>>(
          'igOpenPopup_ID');
  late final _igOpenPopup_ID =
      _igOpenPopup_IDPtr.asFunction<void Function(int, int)>();

  void igOpenPopupOnItemClick(
    ffi.Pointer<ffi.Char> str_id,
    int popup_flags,
  ) {
    return _igOpenPopupOnItemClick(
      str_id,
      popup_flags,
    );
  }

  late final _igOpenPopupOnItemClickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ImGuiPopupFlags)>>('igOpenPopupOnItemClick');
  late final _igOpenPopupOnItemClick = _igOpenPopupOnItemClickPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void igCloseCurrentPopup() {
    return _igCloseCurrentPopup();
  }

  late final _igCloseCurrentPopupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igCloseCurrentPopup');
  late final _igCloseCurrentPopup =
      _igCloseCurrentPopupPtr.asFunction<void Function()>();

  bool igBeginPopupContextItem(
    ffi.Pointer<ffi.Char> str_id,
    int popup_flags,
  ) {
    return _igBeginPopupContextItem(
      str_id,
      popup_flags,
    );
  }

  late final _igBeginPopupContextItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ImGuiPopupFlags)>>('igBeginPopupContextItem');
  late final _igBeginPopupContextItem = _igBeginPopupContextItemPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igBeginPopupContextWindow(
    ffi.Pointer<ffi.Char> str_id,
    int popup_flags,
  ) {
    return _igBeginPopupContextWindow(
      str_id,
      popup_flags,
    );
  }

  late final _igBeginPopupContextWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ImGuiPopupFlags)>>('igBeginPopupContextWindow');
  late final _igBeginPopupContextWindow = _igBeginPopupContextWindowPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igBeginPopupContextVoid(
    ffi.Pointer<ffi.Char> str_id,
    int popup_flags,
  ) {
    return _igBeginPopupContextVoid(
      str_id,
      popup_flags,
    );
  }

  late final _igBeginPopupContextVoidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ImGuiPopupFlags)>>('igBeginPopupContextVoid');
  late final _igBeginPopupContextVoid = _igBeginPopupContextVoidPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igIsPopupOpen_Str(
    ffi.Pointer<ffi.Char> str_id,
    int flags,
  ) {
    return _igIsPopupOpen_Str(
      str_id,
      flags,
    );
  }

  late final _igIsPopupOpen_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ImGuiPopupFlags)>>('igIsPopupOpen_Str');
  late final _igIsPopupOpen_Str = _igIsPopupOpen_StrPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool igBeginTable(
    ffi.Pointer<ffi.Char> str_id,
    int columns,
    int flags,
    ImVec2 outer_size,
    double inner_width,
  ) {
    return _igBeginTable(
      str_id,
      columns,
      flags,
      outer_size,
      inner_width,
    );
  }

  late final _igBeginTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Int, ImGuiTableFlags,
              ImVec2, ffi.Float)>>('igBeginTable');
  late final _igBeginTable = _igBeginTablePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, int, ImVec2, double)>();

  void igEndTable() {
    return _igEndTable();
  }

  late final _igEndTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndTable');
  late final _igEndTable = _igEndTablePtr.asFunction<void Function()>();

  void igTableNextRow(
    int row_flags,
    double min_row_height,
  ) {
    return _igTableNextRow(
      row_flags,
      min_row_height,
    );
  }

  late final _igTableNextRowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ImGuiTableRowFlags, ffi.Float)>>(
      'igTableNextRow');
  late final _igTableNextRow =
      _igTableNextRowPtr.asFunction<void Function(int, double)>();

  bool igTableNextColumn() {
    return _igTableNextColumn();
  }

  late final _igTableNextColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igTableNextColumn');
  late final _igTableNextColumn =
      _igTableNextColumnPtr.asFunction<bool Function()>();

  bool igTableSetColumnIndex(
    int column_n,
  ) {
    return _igTableSetColumnIndex(
      column_n,
    );
  }

  late final _igTableSetColumnIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'igTableSetColumnIndex');
  late final _igTableSetColumnIndex =
      _igTableSetColumnIndexPtr.asFunction<bool Function(int)>();

  void igTableSetupColumn(
    ffi.Pointer<ffi.Char> label,
    int flags,
    double init_width_or_weight,
    int user_id,
  ) {
    return _igTableSetupColumn(
      label,
      flags,
      init_width_or_weight,
      user_id,
    );
  }

  late final _igTableSetupColumnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ImGuiTableColumnFlags,
              ffi.Float, ImGuiID)>>('igTableSetupColumn');
  late final _igTableSetupColumn = _igTableSetupColumnPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, double, int)>();

  void igTableSetupScrollFreeze(
    int cols,
    int rows,
  ) {
    return _igTableSetupScrollFreeze(
      cols,
      rows,
    );
  }

  late final _igTableSetupScrollFreezePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'igTableSetupScrollFreeze');
  late final _igTableSetupScrollFreeze =
      _igTableSetupScrollFreezePtr.asFunction<void Function(int, int)>();

  void igTableHeader(
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igTableHeader(
      label,
    );
  }

  late final _igTableHeaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igTableHeader');
  late final _igTableHeader =
      _igTableHeaderPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igTableHeadersRow() {
    return _igTableHeadersRow();
  }

  late final _igTableHeadersRowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igTableHeadersRow');
  late final _igTableHeadersRow =
      _igTableHeadersRowPtr.asFunction<void Function()>();

  void igTableAngledHeadersRow() {
    return _igTableAngledHeadersRow();
  }

  late final _igTableAngledHeadersRowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igTableAngledHeadersRow');
  late final _igTableAngledHeadersRow =
      _igTableAngledHeadersRowPtr.asFunction<void Function()>();

  ffi.Pointer<ImGuiTableSortSpecs> igTableGetSortSpecs() {
    return _igTableGetSortSpecs();
  }

  late final _igTableGetSortSpecsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTableSortSpecs> Function()>>(
          'igTableGetSortSpecs');
  late final _igTableGetSortSpecs = _igTableGetSortSpecsPtr
      .asFunction<ffi.Pointer<ImGuiTableSortSpecs> Function()>();

  int igTableGetColumnCount() {
    return _igTableGetColumnCount();
  }

  late final _igTableGetColumnCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igTableGetColumnCount');
  late final _igTableGetColumnCount =
      _igTableGetColumnCountPtr.asFunction<int Function()>();

  int igTableGetColumnIndex() {
    return _igTableGetColumnIndex();
  }

  late final _igTableGetColumnIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igTableGetColumnIndex');
  late final _igTableGetColumnIndex =
      _igTableGetColumnIndexPtr.asFunction<int Function()>();

  int igTableGetRowIndex() {
    return _igTableGetRowIndex();
  }

  late final _igTableGetRowIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igTableGetRowIndex');
  late final _igTableGetRowIndex =
      _igTableGetRowIndexPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> igTableGetColumnName_Int(
    int column_n,
  ) {
    return _igTableGetColumnName_Int(
      column_n,
    );
  }

  late final _igTableGetColumnName_IntPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'igTableGetColumnName_Int');
  late final _igTableGetColumnName_Int = _igTableGetColumnName_IntPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int igTableGetColumnFlags(
    int column_n,
  ) {
    return _igTableGetColumnFlags(
      column_n,
    );
  }

  late final _igTableGetColumnFlagsPtr =
      _lookup<ffi.NativeFunction<ImGuiTableColumnFlags Function(ffi.Int)>>(
          'igTableGetColumnFlags');
  late final _igTableGetColumnFlags =
      _igTableGetColumnFlagsPtr.asFunction<int Function(int)>();

  void igTableSetColumnEnabled(
    int column_n,
    bool v,
  ) {
    return _igTableSetColumnEnabled(
      column_n,
      v,
    );
  }

  late final _igTableSetColumnEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Bool)>>(
          'igTableSetColumnEnabled');
  late final _igTableSetColumnEnabled =
      _igTableSetColumnEnabledPtr.asFunction<void Function(int, bool)>();

  int igTableGetHoveredColumn() {
    return _igTableGetHoveredColumn();
  }

  late final _igTableGetHoveredColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'igTableGetHoveredColumn');
  late final _igTableGetHoveredColumn =
      _igTableGetHoveredColumnPtr.asFunction<int Function()>();

  void igTableSetBgColor(
    int target,
    int color,
    int column_n,
  ) {
    return _igTableSetBgColor(
      target,
      color,
      column_n,
    );
  }

  late final _igTableSetBgColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiTableBgTarget, ImU32, ffi.Int)>>('igTableSetBgColor');
  late final _igTableSetBgColor =
      _igTableSetBgColorPtr.asFunction<void Function(int, int, int)>();

  void igColumns(
    int count,
    ffi.Pointer<ffi.Char> id,
    bool borders,
  ) {
    return _igColumns(
      count,
      id,
      borders,
    );
  }

  late final _igColumnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Bool)>>('igColumns');
  late final _igColumns = _igColumnsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Char>, bool)>();

  void igNextColumn() {
    return _igNextColumn();
  }

  late final _igNextColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igNextColumn');
  late final _igNextColumn = _igNextColumnPtr.asFunction<void Function()>();

  int igGetColumnIndex() {
    return _igGetColumnIndex();
  }

  late final _igGetColumnIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igGetColumnIndex');
  late final _igGetColumnIndex =
      _igGetColumnIndexPtr.asFunction<int Function()>();

  double igGetColumnWidth(
    int column_index,
  ) {
    return _igGetColumnWidth(
      column_index,
    );
  }

  late final _igGetColumnWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>(
          'igGetColumnWidth');
  late final _igGetColumnWidth =
      _igGetColumnWidthPtr.asFunction<double Function(int)>();

  void igSetColumnWidth(
    int column_index,
    double width,
  ) {
    return _igSetColumnWidth(
      column_index,
      width,
    );
  }

  late final _igSetColumnWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'igSetColumnWidth');
  late final _igSetColumnWidth =
      _igSetColumnWidthPtr.asFunction<void Function(int, double)>();

  double igGetColumnOffset(
    int column_index,
  ) {
    return _igGetColumnOffset(
      column_index,
    );
  }

  late final _igGetColumnOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>(
          'igGetColumnOffset');
  late final _igGetColumnOffset =
      _igGetColumnOffsetPtr.asFunction<double Function(int)>();

  void igSetColumnOffset(
    int column_index,
    double offset_x,
  ) {
    return _igSetColumnOffset(
      column_index,
      offset_x,
    );
  }

  late final _igSetColumnOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'igSetColumnOffset');
  late final _igSetColumnOffset =
      _igSetColumnOffsetPtr.asFunction<void Function(int, double)>();

  int igGetColumnsCount() {
    return _igGetColumnsCount();
  }

  late final _igGetColumnsCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igGetColumnsCount');
  late final _igGetColumnsCount =
      _igGetColumnsCountPtr.asFunction<int Function()>();

  bool igBeginTabBar(
    ffi.Pointer<ffi.Char> str_id,
    int flags,
  ) {
    return _igBeginTabBar(
      str_id,
      flags,
    );
  }

  late final _igBeginTabBarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ImGuiTabBarFlags)>>('igBeginTabBar');
  late final _igBeginTabBar =
      _igBeginTabBarPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  void igEndTabBar() {
    return _igEndTabBar();
  }

  late final _igEndTabBarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndTabBar');
  late final _igEndTabBar = _igEndTabBarPtr.asFunction<void Function()>();

  bool igBeginTabItem(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Bool> p_open,
    int flags,
  ) {
    return _igBeginTabItem(
      label,
      p_open,
      flags,
    );
  }

  late final _igBeginTabItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>,
              ImGuiTabItemFlags)>>('igBeginTabItem');
  late final _igBeginTabItem = _igBeginTabItemPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Bool>, int)>();

  void igEndTabItem() {
    return _igEndTabItem();
  }

  late final _igEndTabItemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndTabItem');
  late final _igEndTabItem = _igEndTabItemPtr.asFunction<void Function()>();

  bool igTabItemButton(
    ffi.Pointer<ffi.Char> label,
    int flags,
  ) {
    return _igTabItemButton(
      label,
      flags,
    );
  }

  late final _igTabItemButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ImGuiTabItemFlags)>>('igTabItemButton');
  late final _igTabItemButton = _igTabItemButtonPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  void igSetTabItemClosed(
    ffi.Pointer<ffi.Char> tab_or_docked_window_label,
  ) {
    return _igSetTabItemClosed(
      tab_or_docked_window_label,
    );
  }

  late final _igSetTabItemClosedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSetTabItemClosed');
  late final _igSetTabItemClosed =
      _igSetTabItemClosedPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int igDockSpace(
    int dockspace_id,
    ImVec2 size,
    int flags,
    ffi.Pointer<ImGuiWindowClass> window_class,
  ) {
    return _igDockSpace(
      dockspace_id,
      size,
      flags,
      window_class,
    );
  }

  late final _igDockSpacePtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ImGuiID, ImVec2, ImGuiDockNodeFlags,
              ffi.Pointer<ImGuiWindowClass>)>>('igDockSpace');
  late final _igDockSpace = _igDockSpacePtr.asFunction<
      int Function(int, ImVec2, int, ffi.Pointer<ImGuiWindowClass>)>();

  int igDockSpaceOverViewport(
    int dockspace_id,
    ffi.Pointer<ImGuiViewport> viewport,
    int flags,
    ffi.Pointer<ImGuiWindowClass> window_class,
  ) {
    return _igDockSpaceOverViewport(
      dockspace_id,
      viewport,
      flags,
      window_class,
    );
  }

  late final _igDockSpaceOverViewportPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(
              ImGuiID,
              ffi.Pointer<ImGuiViewport>,
              ImGuiDockNodeFlags,
              ffi.Pointer<ImGuiWindowClass>)>>('igDockSpaceOverViewport');
  late final _igDockSpaceOverViewport = _igDockSpaceOverViewportPtr.asFunction<
      int Function(int, ffi.Pointer<ImGuiViewport>, int,
          ffi.Pointer<ImGuiWindowClass>)>();

  void igSetNextWindowDockID(
    int dock_id,
    int cond,
  ) {
    return _igSetNextWindowDockID(
      dock_id,
      cond,
    );
  }

  late final _igSetNextWindowDockIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ImGuiCond)>>(
          'igSetNextWindowDockID');
  late final _igSetNextWindowDockID =
      _igSetNextWindowDockIDPtr.asFunction<void Function(int, int)>();

  void igSetNextWindowClass(
    ffi.Pointer<ImGuiWindowClass> window_class,
  ) {
    return _igSetNextWindowClass(
      window_class,
    );
  }

  late final _igSetNextWindowClassPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindowClass>)>>(
      'igSetNextWindowClass');
  late final _igSetNextWindowClass = _igSetNextWindowClassPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindowClass>)>();

  int igGetWindowDockID() {
    return _igGetWindowDockID();
  }

  late final _igGetWindowDockIDPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function()>>('igGetWindowDockID');
  late final _igGetWindowDockID =
      _igGetWindowDockIDPtr.asFunction<int Function()>();

  bool igIsWindowDocked() {
    return _igIsWindowDocked();
  }

  late final _igIsWindowDockedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsWindowDocked');
  late final _igIsWindowDocked =
      _igIsWindowDockedPtr.asFunction<bool Function()>();

  void igLogToTTY(
    int auto_open_depth,
  ) {
    return _igLogToTTY(
      auto_open_depth,
    );
  }

  late final _igLogToTTYPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('igLogToTTY');
  late final _igLogToTTY = _igLogToTTYPtr.asFunction<void Function(int)>();

  void igLogToFile(
    int auto_open_depth,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _igLogToFile(
      auto_open_depth,
      filename,
    );
  }

  late final _igLogToFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('igLogToFile');
  late final _igLogToFile =
      _igLogToFilePtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void igLogToClipboard(
    int auto_open_depth,
  ) {
    return _igLogToClipboard(
      auto_open_depth,
    );
  }

  late final _igLogToClipboardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'igLogToClipboard');
  late final _igLogToClipboard =
      _igLogToClipboardPtr.asFunction<void Function(int)>();

  void igLogFinish() {
    return _igLogFinish();
  }

  late final _igLogFinishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igLogFinish');
  late final _igLogFinish = _igLogFinishPtr.asFunction<void Function()>();

  void igLogButtons() {
    return _igLogButtons();
  }

  late final _igLogButtonsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igLogButtons');
  late final _igLogButtons = _igLogButtonsPtr.asFunction<void Function()>();

  void igLogTextV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igLogTextV(
      fmt,
      args,
    );
  }

  late final _igLogTextVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igLogTextV');
  late final _igLogTextV = _igLogTextVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  bool igBeginDragDropSource(
    int flags,
  ) {
    return _igBeginDragDropSource(
      flags,
    );
  }

  late final _igBeginDragDropSourcePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiDragDropFlags)>>(
          'igBeginDragDropSource');
  late final _igBeginDragDropSource =
      _igBeginDragDropSourcePtr.asFunction<bool Function(int)>();

  bool igSetDragDropPayload(
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int sz,
    int cond,
  ) {
    return _igSetDragDropPayload(
      type,
      data,
      sz,
      cond,
    );
  }

  late final _igSetDragDropPayloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Size, ImGuiCond)>>('igSetDragDropPayload');
  late final _igSetDragDropPayload = _igSetDragDropPayloadPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int, int)>();

  void igEndDragDropSource() {
    return _igEndDragDropSource();
  }

  late final _igEndDragDropSourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndDragDropSource');
  late final _igEndDragDropSource =
      _igEndDragDropSourcePtr.asFunction<void Function()>();

  bool igBeginDragDropTarget() {
    return _igBeginDragDropTarget();
  }

  late final _igBeginDragDropTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginDragDropTarget');
  late final _igBeginDragDropTarget =
      _igBeginDragDropTargetPtr.asFunction<bool Function()>();

  ffi.Pointer<ImGuiPayload> igAcceptDragDropPayload(
    ffi.Pointer<ffi.Char> type,
    int flags,
  ) {
    return _igAcceptDragDropPayload(
      type,
      flags,
    );
  }

  late final _igAcceptDragDropPayloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiPayload> Function(ffi.Pointer<ffi.Char>,
              ImGuiDragDropFlags)>>('igAcceptDragDropPayload');
  late final _igAcceptDragDropPayload = _igAcceptDragDropPayloadPtr.asFunction<
      ffi.Pointer<ImGuiPayload> Function(ffi.Pointer<ffi.Char>, int)>();

  void igEndDragDropTarget() {
    return _igEndDragDropTarget();
  }

  late final _igEndDragDropTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndDragDropTarget');
  late final _igEndDragDropTarget =
      _igEndDragDropTargetPtr.asFunction<void Function()>();

  ffi.Pointer<ImGuiPayload> igGetDragDropPayload() {
    return _igGetDragDropPayload();
  }

  late final _igGetDragDropPayloadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPayload> Function()>>(
          'igGetDragDropPayload');
  late final _igGetDragDropPayload = _igGetDragDropPayloadPtr
      .asFunction<ffi.Pointer<ImGuiPayload> Function()>();

  void igBeginDisabled(
    bool disabled,
  ) {
    return _igBeginDisabled(
      disabled,
    );
  }

  late final _igBeginDisabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'igBeginDisabled');
  late final _igBeginDisabled =
      _igBeginDisabledPtr.asFunction<void Function(bool)>();

  void igEndDisabled() {
    return _igEndDisabled();
  }

  late final _igEndDisabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndDisabled');
  late final _igEndDisabled = _igEndDisabledPtr.asFunction<void Function()>();

  void igPushClipRect(
    ImVec2 clip_rect_min,
    ImVec2 clip_rect_max,
    bool intersect_with_current_clip_rect,
  ) {
    return _igPushClipRect(
      clip_rect_min,
      clip_rect_max,
      intersect_with_current_clip_rect,
    );
  }

  late final _igPushClipRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ImVec2, ffi.Bool)>>(
          'igPushClipRect');
  late final _igPushClipRect =
      _igPushClipRectPtr.asFunction<void Function(ImVec2, ImVec2, bool)>();

  void igPopClipRect() {
    return _igPopClipRect();
  }

  late final _igPopClipRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopClipRect');
  late final _igPopClipRect = _igPopClipRectPtr.asFunction<void Function()>();

  void igSetItemDefaultFocus() {
    return _igSetItemDefaultFocus();
  }

  late final _igSetItemDefaultFocusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igSetItemDefaultFocus');
  late final _igSetItemDefaultFocus =
      _igSetItemDefaultFocusPtr.asFunction<void Function()>();

  void igSetKeyboardFocusHere(
    int offset,
  ) {
    return _igSetKeyboardFocusHere(
      offset,
    );
  }

  late final _igSetKeyboardFocusHerePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'igSetKeyboardFocusHere');
  late final _igSetKeyboardFocusHere =
      _igSetKeyboardFocusHerePtr.asFunction<void Function(int)>();

  void igSetNavCursorVisible(
    bool visible,
  ) {
    return _igSetNavCursorVisible(
      visible,
    );
  }

  late final _igSetNavCursorVisiblePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'igSetNavCursorVisible');
  late final _igSetNavCursorVisible =
      _igSetNavCursorVisiblePtr.asFunction<void Function(bool)>();

  void igSetNextItemAllowOverlap() {
    return _igSetNextItemAllowOverlap();
  }

  late final _igSetNextItemAllowOverlapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igSetNextItemAllowOverlap');
  late final _igSetNextItemAllowOverlap =
      _igSetNextItemAllowOverlapPtr.asFunction<void Function()>();

  bool igIsItemHovered(
    int flags,
  ) {
    return _igIsItemHovered(
      flags,
    );
  }

  late final _igIsItemHoveredPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiHoveredFlags)>>(
          'igIsItemHovered');
  late final _igIsItemHovered =
      _igIsItemHoveredPtr.asFunction<bool Function(int)>();

  bool igIsItemActive() {
    return _igIsItemActive();
  }

  late final _igIsItemActivePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemActive');
  late final _igIsItemActive = _igIsItemActivePtr.asFunction<bool Function()>();

  bool igIsItemFocused() {
    return _igIsItemFocused();
  }

  late final _igIsItemFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemFocused');
  late final _igIsItemFocused =
      _igIsItemFocusedPtr.asFunction<bool Function()>();

  bool igIsItemClicked(
    int mouse_button,
  ) {
    return _igIsItemClicked(
      mouse_button,
    );
  }

  late final _igIsItemClickedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton)>>(
          'igIsItemClicked');
  late final _igIsItemClicked =
      _igIsItemClickedPtr.asFunction<bool Function(int)>();

  bool igIsItemVisible() {
    return _igIsItemVisible();
  }

  late final _igIsItemVisiblePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemVisible');
  late final _igIsItemVisible =
      _igIsItemVisiblePtr.asFunction<bool Function()>();

  bool igIsItemEdited() {
    return _igIsItemEdited();
  }

  late final _igIsItemEditedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemEdited');
  late final _igIsItemEdited = _igIsItemEditedPtr.asFunction<bool Function()>();

  bool igIsItemActivated() {
    return _igIsItemActivated();
  }

  late final _igIsItemActivatedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemActivated');
  late final _igIsItemActivated =
      _igIsItemActivatedPtr.asFunction<bool Function()>();

  bool igIsItemDeactivated() {
    return _igIsItemDeactivated();
  }

  late final _igIsItemDeactivatedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemDeactivated');
  late final _igIsItemDeactivated =
      _igIsItemDeactivatedPtr.asFunction<bool Function()>();

  bool igIsItemDeactivatedAfterEdit() {
    return _igIsItemDeactivatedAfterEdit();
  }

  late final _igIsItemDeactivatedAfterEditPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'igIsItemDeactivatedAfterEdit');
  late final _igIsItemDeactivatedAfterEdit =
      _igIsItemDeactivatedAfterEditPtr.asFunction<bool Function()>();

  bool igIsItemToggledOpen() {
    return _igIsItemToggledOpen();
  }

  late final _igIsItemToggledOpenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsItemToggledOpen');
  late final _igIsItemToggledOpen =
      _igIsItemToggledOpenPtr.asFunction<bool Function()>();

  bool igIsAnyItemHovered() {
    return _igIsAnyItemHovered();
  }

  late final _igIsAnyItemHoveredPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsAnyItemHovered');
  late final _igIsAnyItemHovered =
      _igIsAnyItemHoveredPtr.asFunction<bool Function()>();

  bool igIsAnyItemActive() {
    return _igIsAnyItemActive();
  }

  late final _igIsAnyItemActivePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsAnyItemActive');
  late final _igIsAnyItemActive =
      _igIsAnyItemActivePtr.asFunction<bool Function()>();

  bool igIsAnyItemFocused() {
    return _igIsAnyItemFocused();
  }

  late final _igIsAnyItemFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsAnyItemFocused');
  late final _igIsAnyItemFocused =
      _igIsAnyItemFocusedPtr.asFunction<bool Function()>();

  int igGetItemID() {
    return _igGetItemID();
  }

  late final _igGetItemIDPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function()>>('igGetItemID');
  late final _igGetItemID = _igGetItemIDPtr.asFunction<int Function()>();

  void igGetItemRectMin(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetItemRectMin(
      pOut,
    );
  }

  late final _igGetItemRectMinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetItemRectMin');
  late final _igGetItemRectMin =
      _igGetItemRectMinPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igGetItemRectMax(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetItemRectMax(
      pOut,
    );
  }

  late final _igGetItemRectMaxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetItemRectMax');
  late final _igGetItemRectMax =
      _igGetItemRectMaxPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igGetItemRectSize(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetItemRectSize(
      pOut,
    );
  }

  late final _igGetItemRectSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetItemRectSize');
  late final _igGetItemRectSize =
      _igGetItemRectSizePtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  ffi.Pointer<ImGuiViewport> igGetMainViewport() {
    return _igGetMainViewport();
  }

  late final _igGetMainViewportPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiViewport> Function()>>(
          'igGetMainViewport');
  late final _igGetMainViewport =
      _igGetMainViewportPtr.asFunction<ffi.Pointer<ImGuiViewport> Function()>();

  ffi.Pointer<ImDrawList> igGetBackgroundDrawList(
    ffi.Pointer<ImGuiViewport> viewport,
  ) {
    return _igGetBackgroundDrawList(
      viewport,
    );
  }

  late final _igGetBackgroundDrawListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImDrawList> Function(
              ffi.Pointer<ImGuiViewport>)>>('igGetBackgroundDrawList');
  late final _igGetBackgroundDrawList = _igGetBackgroundDrawListPtr.asFunction<
      ffi.Pointer<ImDrawList> Function(ffi.Pointer<ImGuiViewport>)>();

  ffi.Pointer<ImDrawList> igGetForegroundDrawList_ViewportPtr(
    ffi.Pointer<ImGuiViewport> viewport,
  ) {
    return _igGetForegroundDrawList_ViewportPtr(
      viewport,
    );
  }

  late final _igGetForegroundDrawList_ViewportPtrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImDrawList> Function(ffi.Pointer<ImGuiViewport>)>>(
      'igGetForegroundDrawList_ViewportPtr');
  late final _igGetForegroundDrawList_ViewportPtr =
      _igGetForegroundDrawList_ViewportPtrPtr.asFunction<
          ffi.Pointer<ImDrawList> Function(ffi.Pointer<ImGuiViewport>)>();

  bool igIsRectVisible_Nil(
    ImVec2 size,
  ) {
    return _igIsRectVisible_Nil(
      size,
    );
  }

  late final _igIsRectVisible_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImVec2)>>(
          'igIsRectVisible_Nil');
  late final _igIsRectVisible_Nil =
      _igIsRectVisible_NilPtr.asFunction<bool Function(ImVec2)>();

  bool igIsRectVisible_Vec2(
    ImVec2 rect_min,
    ImVec2 rect_max,
  ) {
    return _igIsRectVisible_Vec2(
      rect_min,
      rect_max,
    );
  }

  late final _igIsRectVisible_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImVec2, ImVec2)>>(
          'igIsRectVisible_Vec2');
  late final _igIsRectVisible_Vec2 =
      _igIsRectVisible_Vec2Ptr.asFunction<bool Function(ImVec2, ImVec2)>();

  double igGetTime() {
    return _igGetTime();
  }

  late final _igGetTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('igGetTime');
  late final _igGetTime = _igGetTimePtr.asFunction<double Function()>();

  int igGetFrameCount() {
    return _igGetFrameCount();
  }

  late final _igGetFrameCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igGetFrameCount');
  late final _igGetFrameCount =
      _igGetFrameCountPtr.asFunction<int Function()>();

  ffi.Pointer<ImDrawListSharedData> igGetDrawListSharedData() {
    return _igGetDrawListSharedData();
  }

  late final _igGetDrawListSharedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawListSharedData> Function()>>(
          'igGetDrawListSharedData');
  late final _igGetDrawListSharedData = _igGetDrawListSharedDataPtr
      .asFunction<ffi.Pointer<ImDrawListSharedData> Function()>();

  ffi.Pointer<ffi.Char> igGetStyleColorName(
    int idx,
  ) {
    return _igGetStyleColorName(
      idx,
    );
  }

  late final _igGetStyleColorNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ImGuiCol)>>(
          'igGetStyleColorName');
  late final _igGetStyleColorName =
      _igGetStyleColorNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void igSetStateStorage(
    ffi.Pointer<ImGuiStorage> storage,
  ) {
    return _igSetStateStorage(
      storage,
    );
  }

  late final _igSetStateStoragePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStorage>)>>(
          'igSetStateStorage');
  late final _igSetStateStorage = _igSetStateStoragePtr
      .asFunction<void Function(ffi.Pointer<ImGuiStorage>)>();

  ffi.Pointer<ImGuiStorage> igGetStateStorage() {
    return _igGetStateStorage();
  }

  late final _igGetStateStoragePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiStorage> Function()>>(
          'igGetStateStorage');
  late final _igGetStateStorage =
      _igGetStateStoragePtr.asFunction<ffi.Pointer<ImGuiStorage> Function()>();

  void igCalcTextSize(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    bool hide_text_after_double_hash,
    double wrap_width,
  ) {
    return _igCalcTextSize(
      pOut,
      text,
      text_end,
      hide_text_after_double_hash,
      wrap_width,
    );
  }

  late final _igCalcTextSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Float)>>('igCalcTextSize');
  late final _igCalcTextSize = _igCalcTextSizePtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, bool, double)>();

  void igColorConvertU32ToFloat4(
    ffi.Pointer<ImVec4> pOut,
    int in1,
  ) {
    return _igColorConvertU32ToFloat4(
      pOut,
      in1,
    );
  }

  late final _igColorConvertU32ToFloat4Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec4>, ImU32)>>(
      'igColorConvertU32ToFloat4');
  late final _igColorConvertU32ToFloat4 = _igColorConvertU32ToFloat4Ptr
      .asFunction<void Function(ffi.Pointer<ImVec4>, int)>();

  int igColorConvertFloat4ToU32(
    ImVec4 in1,
  ) {
    return _igColorConvertFloat4ToU32(
      in1,
    );
  }

  late final _igColorConvertFloat4ToU32Ptr =
      _lookup<ffi.NativeFunction<ImU32 Function(ImVec4)>>(
          'igColorConvertFloat4ToU32');
  late final _igColorConvertFloat4ToU32 =
      _igColorConvertFloat4ToU32Ptr.asFunction<int Function(ImVec4)>();

  void igColorConvertRGBtoHSV(
    double r,
    double g,
    double b,
    ffi.Pointer<ffi.Float> out_h,
    ffi.Pointer<ffi.Float> out_s,
    ffi.Pointer<ffi.Float> out_v,
  ) {
    return _igColorConvertRGBtoHSV(
      r,
      g,
      b,
      out_h,
      out_s,
      out_v,
    );
  }

  late final _igColorConvertRGBtoHSVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('igColorConvertRGBtoHSV');
  late final _igColorConvertRGBtoHSV = _igColorConvertRGBtoHSVPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void igColorConvertHSVtoRGB(
    double h,
    double s,
    double v,
    ffi.Pointer<ffi.Float> out_r,
    ffi.Pointer<ffi.Float> out_g,
    ffi.Pointer<ffi.Float> out_b,
  ) {
    return _igColorConvertHSVtoRGB(
      h,
      s,
      v,
      out_r,
      out_g,
      out_b,
    );
  }

  late final _igColorConvertHSVtoRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('igColorConvertHSVtoRGB');
  late final _igColorConvertHSVtoRGB = _igColorConvertHSVtoRGBPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  bool igIsKeyDown_Nil(
    ImGuiKey key,
  ) {
    return _igIsKeyDown_Nil(
      key.value,
    );
  }

  late final _igIsKeyDown_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsKeyDown_Nil');
  late final _igIsKeyDown_Nil =
      _igIsKeyDown_NilPtr.asFunction<bool Function(int)>();

  bool igIsKeyPressed_Bool(
    ImGuiKey key,
    bool repeat,
  ) {
    return _igIsKeyPressed_Bool(
      key.value,
      repeat,
    );
  }

  late final _igIsKeyPressed_BoolPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt, ffi.Bool)>>(
          'igIsKeyPressed_Bool');
  late final _igIsKeyPressed_Bool =
      _igIsKeyPressed_BoolPtr.asFunction<bool Function(int, bool)>();

  bool igIsKeyReleased_Nil(
    ImGuiKey key,
  ) {
    return _igIsKeyReleased_Nil(
      key.value,
    );
  }

  late final _igIsKeyReleased_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsKeyReleased_Nil');
  late final _igIsKeyReleased_Nil =
      _igIsKeyReleased_NilPtr.asFunction<bool Function(int)>();

  bool igIsKeyChordPressed_Nil(
    int key_chord,
  ) {
    return _igIsKeyChordPressed_Nil(
      key_chord,
    );
  }

  late final _igIsKeyChordPressed_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiKeyChord)>>(
          'igIsKeyChordPressed_Nil');
  late final _igIsKeyChordPressed_Nil =
      _igIsKeyChordPressed_NilPtr.asFunction<bool Function(int)>();

  int igGetKeyPressedAmount(
    ImGuiKey key,
    double repeat_delay,
    double rate,
  ) {
    return _igGetKeyPressedAmount(
      key.value,
      repeat_delay,
      rate,
    );
  }

  late final _igGetKeyPressedAmountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Float, ffi.Float)>>('igGetKeyPressedAmount');
  late final _igGetKeyPressedAmount =
      _igGetKeyPressedAmountPtr.asFunction<int Function(int, double, double)>();

  ffi.Pointer<ffi.Char> igGetKeyName(
    ImGuiKey key,
  ) {
    return _igGetKeyName(
      key.value,
    );
  }

  late final _igGetKeyNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'igGetKeyName');
  late final _igGetKeyName =
      _igGetKeyNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void igSetNextFrameWantCaptureKeyboard(
    bool want_capture_keyboard,
  ) {
    return _igSetNextFrameWantCaptureKeyboard(
      want_capture_keyboard,
    );
  }

  late final _igSetNextFrameWantCaptureKeyboardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'igSetNextFrameWantCaptureKeyboard');
  late final _igSetNextFrameWantCaptureKeyboard =
      _igSetNextFrameWantCaptureKeyboardPtr.asFunction<void Function(bool)>();

  bool igShortcut_Nil(
    int key_chord,
    int flags,
  ) {
    return _igShortcut_Nil(
      key_chord,
      flags,
    );
  }

  late final _igShortcut_NilPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiKeyChord, ImGuiInputFlags)>>('igShortcut_Nil');
  late final _igShortcut_Nil =
      _igShortcut_NilPtr.asFunction<bool Function(int, int)>();

  void igSetNextItemShortcut(
    int key_chord,
    int flags,
  ) {
    return _igSetNextItemShortcut(
      key_chord,
      flags,
    );
  }

  late final _igSetNextItemShortcutPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ImGuiKeyChord, ImGuiInputFlags)>>(
      'igSetNextItemShortcut');
  late final _igSetNextItemShortcut =
      _igSetNextItemShortcutPtr.asFunction<void Function(int, int)>();

  void igSetItemKeyOwner_Nil(
    ImGuiKey key,
  ) {
    return _igSetItemKeyOwner_Nil(
      key.value,
    );
  }

  late final _igSetItemKeyOwner_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'igSetItemKeyOwner_Nil');
  late final _igSetItemKeyOwner_Nil =
      _igSetItemKeyOwner_NilPtr.asFunction<void Function(int)>();

  bool igIsMouseDown_Nil(
    int button,
  ) {
    return _igIsMouseDown_Nil(
      button,
    );
  }

  late final _igIsMouseDown_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton)>>(
          'igIsMouseDown_Nil');
  late final _igIsMouseDown_Nil =
      _igIsMouseDown_NilPtr.asFunction<bool Function(int)>();

  bool igIsMouseClicked_Bool(
    int button,
    bool repeat,
  ) {
    return _igIsMouseClicked_Bool(
      button,
      repeat,
    );
  }

  late final _igIsMouseClicked_BoolPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton, ffi.Bool)>>(
      'igIsMouseClicked_Bool');
  late final _igIsMouseClicked_Bool =
      _igIsMouseClicked_BoolPtr.asFunction<bool Function(int, bool)>();

  bool igIsMouseReleased_Nil(
    int button,
  ) {
    return _igIsMouseReleased_Nil(
      button,
    );
  }

  late final _igIsMouseReleased_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton)>>(
          'igIsMouseReleased_Nil');
  late final _igIsMouseReleased_Nil =
      _igIsMouseReleased_NilPtr.asFunction<bool Function(int)>();

  bool igIsMouseDoubleClicked_Nil(
    int button,
  ) {
    return _igIsMouseDoubleClicked_Nil(
      button,
    );
  }

  late final _igIsMouseDoubleClicked_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton)>>(
          'igIsMouseDoubleClicked_Nil');
  late final _igIsMouseDoubleClicked_Nil =
      _igIsMouseDoubleClicked_NilPtr.asFunction<bool Function(int)>();

  int igGetMouseClickedCount(
    int button,
  ) {
    return _igGetMouseClickedCount(
      button,
    );
  }

  late final _igGetMouseClickedCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ImGuiMouseButton)>>(
          'igGetMouseClickedCount');
  late final _igGetMouseClickedCount =
      _igGetMouseClickedCountPtr.asFunction<int Function(int)>();

  bool igIsMouseHoveringRect(
    ImVec2 r_min,
    ImVec2 r_max,
    bool clip,
  ) {
    return _igIsMouseHoveringRect(
      r_min,
      r_max,
      clip,
    );
  }

  late final _igIsMouseHoveringRectPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImVec2, ImVec2, ffi.Bool)>>(
          'igIsMouseHoveringRect');
  late final _igIsMouseHoveringRect = _igIsMouseHoveringRectPtr
      .asFunction<bool Function(ImVec2, ImVec2, bool)>();

  bool igIsMousePosValid(
    ffi.Pointer<ImVec2> mouse_pos,
  ) {
    return _igIsMousePosValid(
      mouse_pos,
    );
  }

  late final _igIsMousePosValidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImVec2>)>>(
          'igIsMousePosValid');
  late final _igIsMousePosValid =
      _igIsMousePosValidPtr.asFunction<bool Function(ffi.Pointer<ImVec2>)>();

  bool igIsAnyMouseDown() {
    return _igIsAnyMouseDown();
  }

  late final _igIsAnyMouseDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsAnyMouseDown');
  late final _igIsAnyMouseDown =
      _igIsAnyMouseDownPtr.asFunction<bool Function()>();

  void igGetMousePos(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetMousePos(
      pOut,
    );
  }

  late final _igGetMousePosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetMousePos');
  late final _igGetMousePos =
      _igGetMousePosPtr.asFunction<void Function(ffi.Pointer<ImVec2>)>();

  void igGetMousePosOnOpeningCurrentPopup(
    ffi.Pointer<ImVec2> pOut,
  ) {
    return _igGetMousePosOnOpeningCurrentPopup(
      pOut,
    );
  }

  late final _igGetMousePosOnOpeningCurrentPopupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>)>>(
          'igGetMousePosOnOpeningCurrentPopup');
  late final _igGetMousePosOnOpeningCurrentPopup =
      _igGetMousePosOnOpeningCurrentPopupPtr
          .asFunction<void Function(ffi.Pointer<ImVec2>)>();

  bool igIsMouseDragging(
    int button,
    double lock_threshold,
  ) {
    return _igIsMouseDragging(
      button,
      lock_threshold,
    );
  }

  late final _igIsMouseDraggingPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton, ffi.Float)>>(
      'igIsMouseDragging');
  late final _igIsMouseDragging =
      _igIsMouseDraggingPtr.asFunction<bool Function(int, double)>();

  void igGetMouseDragDelta(
    ffi.Pointer<ImVec2> pOut,
    int button,
    double lock_threshold,
  ) {
    return _igGetMouseDragDelta(
      pOut,
      button,
      lock_threshold,
    );
  }

  late final _igGetMouseDragDeltaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImGuiMouseButton,
              ffi.Float)>>('igGetMouseDragDelta');
  late final _igGetMouseDragDelta = _igGetMouseDragDeltaPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, int, double)>();

  void igResetMouseDragDelta(
    int button,
  ) {
    return _igResetMouseDragDelta(
      button,
    );
  }

  late final _igResetMouseDragDeltaPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiMouseButton)>>(
          'igResetMouseDragDelta');
  late final _igResetMouseDragDelta =
      _igResetMouseDragDeltaPtr.asFunction<void Function(int)>();

  int igGetMouseCursor() {
    return _igGetMouseCursor();
  }

  late final _igGetMouseCursorPtr =
      _lookup<ffi.NativeFunction<ImGuiMouseCursor Function()>>(
          'igGetMouseCursor');
  late final _igGetMouseCursor =
      _igGetMouseCursorPtr.asFunction<int Function()>();

  void igSetMouseCursor(
    int cursor_type,
  ) {
    return _igSetMouseCursor(
      cursor_type,
    );
  }

  late final _igSetMouseCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiMouseCursor)>>(
          'igSetMouseCursor');
  late final _igSetMouseCursor =
      _igSetMouseCursorPtr.asFunction<void Function(int)>();

  void igSetNextFrameWantCaptureMouse(
    bool want_capture_mouse,
  ) {
    return _igSetNextFrameWantCaptureMouse(
      want_capture_mouse,
    );
  }

  late final _igSetNextFrameWantCaptureMousePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'igSetNextFrameWantCaptureMouse');
  late final _igSetNextFrameWantCaptureMouse =
      _igSetNextFrameWantCaptureMousePtr.asFunction<void Function(bool)>();

  ffi.Pointer<ffi.Char> igGetClipboardText() {
    return _igGetClipboardText();
  }

  late final _igGetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'igGetClipboardText');
  late final _igGetClipboardText =
      _igGetClipboardTextPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void igSetClipboardText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _igSetClipboardText(
      text,
    );
  }

  late final _igSetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSetClipboardText');
  late final _igSetClipboardText =
      _igSetClipboardTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igLoadIniSettingsFromDisk(
    ffi.Pointer<ffi.Char> ini_filename,
  ) {
    return _igLoadIniSettingsFromDisk(
      ini_filename,
    );
  }

  late final _igLoadIniSettingsFromDiskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igLoadIniSettingsFromDisk');
  late final _igLoadIniSettingsFromDisk = _igLoadIniSettingsFromDiskPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igLoadIniSettingsFromMemory(
    ffi.Pointer<ffi.Char> ini_data,
    int ini_size,
  ) {
    return _igLoadIniSettingsFromMemory(
      ini_data,
      ini_size,
    );
  }

  late final _igLoadIniSettingsFromMemoryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'igLoadIniSettingsFromMemory');
  late final _igLoadIniSettingsFromMemory = _igLoadIniSettingsFromMemoryPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  void igSaveIniSettingsToDisk(
    ffi.Pointer<ffi.Char> ini_filename,
  ) {
    return _igSaveIniSettingsToDisk(
      ini_filename,
    );
  }

  late final _igSaveIniSettingsToDiskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igSaveIniSettingsToDisk');
  late final _igSaveIniSettingsToDisk = _igSaveIniSettingsToDiskPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igSaveIniSettingsToMemory(
    ffi.Pointer<ffi.Size> out_ini_size,
  ) {
    return _igSaveIniSettingsToMemory(
      out_ini_size,
    );
  }

  late final _igSaveIniSettingsToMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('igSaveIniSettingsToMemory');
  late final _igSaveIniSettingsToMemory = _igSaveIniSettingsToMemoryPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  void igDebugTextEncoding(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _igDebugTextEncoding(
      text,
    );
  }

  late final _igDebugTextEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igDebugTextEncoding');
  late final _igDebugTextEncoding = _igDebugTextEncodingPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igDebugFlashStyleColor(
    int idx,
  ) {
    return _igDebugFlashStyleColor(
      idx,
    );
  }

  late final _igDebugFlashStyleColorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiCol)>>(
          'igDebugFlashStyleColor');
  late final _igDebugFlashStyleColor =
      _igDebugFlashStyleColorPtr.asFunction<void Function(int)>();

  void igDebugStartItemPicker() {
    return _igDebugStartItemPicker();
  }

  late final _igDebugStartItemPickerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igDebugStartItemPicker');
  late final _igDebugStartItemPicker =
      _igDebugStartItemPickerPtr.asFunction<void Function()>();

  bool igDebugCheckVersionAndDataLayout(
    ffi.Pointer<ffi.Char> version_str,
    int sz_io,
    int sz_style,
    int sz_vec2,
    int sz_vec4,
    int sz_drawvert,
    int sz_drawidx,
  ) {
    return _igDebugCheckVersionAndDataLayout(
      version_str,
      sz_io,
      sz_style,
      sz_vec2,
      sz_vec4,
      sz_drawvert,
      sz_drawidx,
    );
  }

  late final _igDebugCheckVersionAndDataLayoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size,
              ffi.Size)>>('igDebugCheckVersionAndDataLayout');
  late final _igDebugCheckVersionAndDataLayout =
      _igDebugCheckVersionAndDataLayoutPtr.asFunction<
          bool Function(ffi.Pointer<ffi.Char>, int, int, int, int, int, int)>();

  void igDebugLog(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igDebugLog(
      fmt,
    );
  }

  late final _igDebugLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igDebugLog');
  late final _igDebugLog =
      _igDebugLogPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igDebugLogV(
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igDebugLogV(
      fmt,
      args,
    );
  }

  late final _igDebugLogVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igDebugLogV');
  late final _igDebugLogV = _igDebugLogVPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  void igSetAllocatorFunctions(
    ImGuiMemAllocFunc alloc_func,
    ImGuiMemFreeFunc free_func,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _igSetAllocatorFunctions(
      alloc_func,
      free_func,
      user_data,
    );
  }

  late final _igSetAllocatorFunctionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiMemAllocFunc, ImGuiMemFreeFunc,
              ffi.Pointer<ffi.Void>)>>('igSetAllocatorFunctions');
  late final _igSetAllocatorFunctions = _igSetAllocatorFunctionsPtr.asFunction<
      void Function(
          ImGuiMemAllocFunc, ImGuiMemFreeFunc, ffi.Pointer<ffi.Void>)>();

  void igGetAllocatorFunctions(
    ffi.Pointer<ImGuiMemAllocFunc> p_alloc_func,
    ffi.Pointer<ImGuiMemFreeFunc> p_free_func,
    ffi.Pointer<ffi.Pointer<ffi.Void>> p_user_data,
  ) {
    return _igGetAllocatorFunctions(
      p_alloc_func,
      p_free_func,
      p_user_data,
    );
  }

  late final _igGetAllocatorFunctionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiMemAllocFunc>,
              ffi.Pointer<ImGuiMemFreeFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('igGetAllocatorFunctions');
  late final _igGetAllocatorFunctions = _igGetAllocatorFunctionsPtr.asFunction<
      void Function(ffi.Pointer<ImGuiMemAllocFunc>,
          ffi.Pointer<ImGuiMemFreeFunc>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> igMemAlloc(
    int size,
  ) {
    return _igMemAlloc(
      size,
    );
  }

  late final _igMemAllocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'igMemAlloc');
  late final _igMemAlloc =
      _igMemAllocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void igMemFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _igMemFree(
      ptr,
    );
  }

  late final _igMemFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'igMemFree');
  late final _igMemFree =
      _igMemFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void igUpdatePlatformWindows() {
    return _igUpdatePlatformWindows();
  }

  late final _igUpdatePlatformWindowsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igUpdatePlatformWindows');
  late final _igUpdatePlatformWindows =
      _igUpdatePlatformWindowsPtr.asFunction<void Function()>();

  void igRenderPlatformWindowsDefault(
    ffi.Pointer<ffi.Void> platform_render_arg,
    ffi.Pointer<ffi.Void> renderer_render_arg,
  ) {
    return _igRenderPlatformWindowsDefault(
      platform_render_arg,
      renderer_render_arg,
    );
  }

  late final _igRenderPlatformWindowsDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('igRenderPlatformWindowsDefault');
  late final _igRenderPlatformWindowsDefault =
      _igRenderPlatformWindowsDefaultPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void igDestroyPlatformWindows() {
    return _igDestroyPlatformWindows();
  }

  late final _igDestroyPlatformWindowsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igDestroyPlatformWindows');
  late final _igDestroyPlatformWindows =
      _igDestroyPlatformWindowsPtr.asFunction<void Function()>();

  ffi.Pointer<ImGuiViewport> igFindViewportByID(
    int id,
  ) {
    return _igFindViewportByID(
      id,
    );
  }

  late final _igFindViewportByIDPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiViewport> Function(ImGuiID)>>(
          'igFindViewportByID');
  late final _igFindViewportByID = _igFindViewportByIDPtr
      .asFunction<ffi.Pointer<ImGuiViewport> Function(int)>();

  ffi.Pointer<ImGuiViewport> igFindViewportByPlatformHandle(
    ffi.Pointer<ffi.Void> platform_handle,
  ) {
    return _igFindViewportByPlatformHandle(
      platform_handle,
    );
  }

  late final _igFindViewportByPlatformHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiViewport> Function(
              ffi.Pointer<ffi.Void>)>>('igFindViewportByPlatformHandle');
  late final _igFindViewportByPlatformHandle =
      _igFindViewportByPlatformHandlePtr.asFunction<
          ffi.Pointer<ImGuiViewport> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ImGuiTableSortSpecs> ImGuiTableSortSpecs_ImGuiTableSortSpecs() {
    return _ImGuiTableSortSpecs_ImGuiTableSortSpecs();
  }

  late final _ImGuiTableSortSpecs_ImGuiTableSortSpecsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTableSortSpecs> Function()>>(
          'ImGuiTableSortSpecs_ImGuiTableSortSpecs');
  late final _ImGuiTableSortSpecs_ImGuiTableSortSpecs =
      _ImGuiTableSortSpecs_ImGuiTableSortSpecsPtr.asFunction<
          ffi.Pointer<ImGuiTableSortSpecs> Function()>();

  void ImGuiTableSortSpecs_destroy(
    ffi.Pointer<ImGuiTableSortSpecs> self,
  ) {
    return _ImGuiTableSortSpecs_destroy(
      self,
    );
  }

  late final _ImGuiTableSortSpecs_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTableSortSpecs>)>>(
      'ImGuiTableSortSpecs_destroy');
  late final _ImGuiTableSortSpecs_destroy = _ImGuiTableSortSpecs_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTableSortSpecs>)>();

  ffi.Pointer<ImGuiTableColumnSortSpecs>
      ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() {
    return _ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs();
  }

  late final _ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImGuiTableColumnSortSpecs> Function()>>(
      'ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs');
  late final _ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs =
      _ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecsPtr.asFunction<
          ffi.Pointer<ImGuiTableColumnSortSpecs> Function()>();

  void ImGuiTableColumnSortSpecs_destroy(
    ffi.Pointer<ImGuiTableColumnSortSpecs> self,
  ) {
    return _ImGuiTableColumnSortSpecs_destroy(
      self,
    );
  }

  late final _ImGuiTableColumnSortSpecs_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiTableColumnSortSpecs>)>>(
      'ImGuiTableColumnSortSpecs_destroy');
  late final _ImGuiTableColumnSortSpecs_destroy =
      _ImGuiTableColumnSortSpecs_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiTableColumnSortSpecs>)>();

  ffi.Pointer<ImGuiStyle> ImGuiStyle_ImGuiStyle() {
    return _ImGuiStyle_ImGuiStyle();
  }

  late final _ImGuiStyle_ImGuiStylePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiStyle> Function()>>(
          'ImGuiStyle_ImGuiStyle');
  late final _ImGuiStyle_ImGuiStyle = _ImGuiStyle_ImGuiStylePtr.asFunction<
      ffi.Pointer<ImGuiStyle> Function()>();

  void ImGuiStyle_destroy(
    ffi.Pointer<ImGuiStyle> self,
  ) {
    return _ImGuiStyle_destroy(
      self,
    );
  }

  late final _ImGuiStyle_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStyle>)>>(
          'ImGuiStyle_destroy');
  late final _ImGuiStyle_destroy = _ImGuiStyle_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStyle>)>();

  void ImGuiStyle_ScaleAllSizes(
    ffi.Pointer<ImGuiStyle> self,
    double scale_factor,
  ) {
    return _ImGuiStyle_ScaleAllSizes(
      self,
      scale_factor,
    );
  }

  late final _ImGuiStyle_ScaleAllSizesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiStyle>, ffi.Float)>>('ImGuiStyle_ScaleAllSizes');
  late final _ImGuiStyle_ScaleAllSizes = _ImGuiStyle_ScaleAllSizesPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStyle>, double)>();

  void ImGuiIO_AddKeyEvent(
    ffi.Pointer<ImGuiIO> self,
    ImGuiKey key,
    bool down,
  ) {
    return _ImGuiIO_AddKeyEvent(
      self,
      key.value,
      down,
    );
  }

  late final _ImGuiIO_AddKeyEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.UnsignedInt,
              ffi.Bool)>>('ImGuiIO_AddKeyEvent');
  late final _ImGuiIO_AddKeyEvent = _ImGuiIO_AddKeyEventPtr.asFunction<
      void Function(ffi.Pointer<ImGuiIO>, int, bool)>();

  void ImGuiIO_AddKeyAnalogEvent(
    ffi.Pointer<ImGuiIO> self,
    ImGuiKey key,
    bool down,
    double v,
  ) {
    return _ImGuiIO_AddKeyAnalogEvent(
      self,
      key.value,
      down,
      v,
    );
  }

  late final _ImGuiIO_AddKeyAnalogEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.UnsignedInt, ffi.Bool,
              ffi.Float)>>('ImGuiIO_AddKeyAnalogEvent');
  late final _ImGuiIO_AddKeyAnalogEvent = _ImGuiIO_AddKeyAnalogEventPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, int, bool, double)>();

  void ImGuiIO_AddMousePosEvent(
    ffi.Pointer<ImGuiIO> self,
    double x,
    double y,
  ) {
    return _ImGuiIO_AddMousePosEvent(
      self,
      x,
      y,
    );
  }

  late final _ImGuiIO_AddMousePosEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.Float,
              ffi.Float)>>('ImGuiIO_AddMousePosEvent');
  late final _ImGuiIO_AddMousePosEvent = _ImGuiIO_AddMousePosEventPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, double, double)>();

  void ImGuiIO_AddMouseButtonEvent(
    ffi.Pointer<ImGuiIO> self,
    int button,
    bool down,
  ) {
    return _ImGuiIO_AddMouseButtonEvent(
      self,
      button,
      down,
    );
  }

  late final _ImGuiIO_AddMouseButtonEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.Int,
              ffi.Bool)>>('ImGuiIO_AddMouseButtonEvent');
  late final _ImGuiIO_AddMouseButtonEvent = _ImGuiIO_AddMouseButtonEventPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, int, bool)>();

  void ImGuiIO_AddMouseWheelEvent(
    ffi.Pointer<ImGuiIO> self,
    double wheel_x,
    double wheel_y,
  ) {
    return _ImGuiIO_AddMouseWheelEvent(
      self,
      wheel_x,
      wheel_y,
    );
  }

  late final _ImGuiIO_AddMouseWheelEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.Float,
              ffi.Float)>>('ImGuiIO_AddMouseWheelEvent');
  late final _ImGuiIO_AddMouseWheelEvent = _ImGuiIO_AddMouseWheelEventPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, double, double)>();

  void ImGuiIO_AddMouseSourceEvent(
    ffi.Pointer<ImGuiIO> self,
    ImGuiMouseSource source,
  ) {
    return _ImGuiIO_AddMouseSourceEvent(
      self,
      source.value,
    );
  }

  late final _ImGuiIO_AddMouseSourceEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>,
              ffi.UnsignedInt)>>('ImGuiIO_AddMouseSourceEvent');
  late final _ImGuiIO_AddMouseSourceEvent = _ImGuiIO_AddMouseSourceEventPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, int)>();

  void ImGuiIO_AddMouseViewportEvent(
    ffi.Pointer<ImGuiIO> self,
    int id,
  ) {
    return _ImGuiIO_AddMouseViewportEvent(
      self,
      id,
    );
  }

  late final _ImGuiIO_AddMouseViewportEventPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>, ImGuiID)>>(
      'ImGuiIO_AddMouseViewportEvent');
  late final _ImGuiIO_AddMouseViewportEvent = _ImGuiIO_AddMouseViewportEventPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, int)>();

  void ImGuiIO_AddFocusEvent(
    ffi.Pointer<ImGuiIO> self,
    bool focused,
  ) {
    return _ImGuiIO_AddFocusEvent(
      self,
      focused,
    );
  }

  late final _ImGuiIO_AddFocusEventPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.Bool)>>(
      'ImGuiIO_AddFocusEvent');
  late final _ImGuiIO_AddFocusEvent = _ImGuiIO_AddFocusEventPtr.asFunction<
      void Function(ffi.Pointer<ImGuiIO>, bool)>();

  void ImGuiIO_AddInputCharacter(
    ffi.Pointer<ImGuiIO> self,
    int c,
  ) {
    return _ImGuiIO_AddInputCharacter(
      self,
      c,
    );
  }

  late final _ImGuiIO_AddInputCharacterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>,
              ffi.UnsignedInt)>>('ImGuiIO_AddInputCharacter');
  late final _ImGuiIO_AddInputCharacter = _ImGuiIO_AddInputCharacterPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, int)>();

  void ImGuiIO_AddInputCharacterUTF16(
    ffi.Pointer<ImGuiIO> self,
    int c,
  ) {
    return _ImGuiIO_AddInputCharacterUTF16(
      self,
      c,
    );
  }

  late final _ImGuiIO_AddInputCharacterUTF16Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>, ImWchar16)>>(
      'ImGuiIO_AddInputCharacterUTF16');
  late final _ImGuiIO_AddInputCharacterUTF16 =
      _ImGuiIO_AddInputCharacterUTF16Ptr.asFunction<
          void Function(ffi.Pointer<ImGuiIO>, int)>();

  void ImGuiIO_AddInputCharactersUTF8(
    ffi.Pointer<ImGuiIO> self,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _ImGuiIO_AddInputCharactersUTF8(
      self,
      str,
    );
  }

  late final _ImGuiIO_AddInputCharactersUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>,
              ffi.Pointer<ffi.Char>)>>('ImGuiIO_AddInputCharactersUTF8');
  late final _ImGuiIO_AddInputCharactersUTF8 =
      _ImGuiIO_AddInputCharactersUTF8Ptr.asFunction<
          void Function(ffi.Pointer<ImGuiIO>, ffi.Pointer<ffi.Char>)>();

  void ImGuiIO_SetKeyEventNativeData(
    ffi.Pointer<ImGuiIO> self,
    ImGuiKey key,
    int native_keycode,
    int native_scancode,
    int native_legacy_index,
  ) {
    return _ImGuiIO_SetKeyEventNativeData(
      self,
      key.value,
      native_keycode,
      native_scancode,
      native_legacy_index,
    );
  }

  late final _ImGuiIO_SetKeyEventNativeDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.UnsignedInt, ffi.Int,
              ffi.Int, ffi.Int)>>('ImGuiIO_SetKeyEventNativeData');
  late final _ImGuiIO_SetKeyEventNativeData = _ImGuiIO_SetKeyEventNativeDataPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, int, int, int, int)>();

  void ImGuiIO_SetAppAcceptingEvents(
    ffi.Pointer<ImGuiIO> self,
    bool accepting_events,
  ) {
    return _ImGuiIO_SetAppAcceptingEvents(
      self,
      accepting_events,
    );
  }

  late final _ImGuiIO_SetAppAcceptingEventsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>, ffi.Bool)>>(
      'ImGuiIO_SetAppAcceptingEvents');
  late final _ImGuiIO_SetAppAcceptingEvents = _ImGuiIO_SetAppAcceptingEventsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>, bool)>();

  void ImGuiIO_ClearEventsQueue(
    ffi.Pointer<ImGuiIO> self,
  ) {
    return _ImGuiIO_ClearEventsQueue(
      self,
    );
  }

  late final _ImGuiIO_ClearEventsQueuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>)>>(
          'ImGuiIO_ClearEventsQueue');
  late final _ImGuiIO_ClearEventsQueue = _ImGuiIO_ClearEventsQueuePtr
      .asFunction<void Function(ffi.Pointer<ImGuiIO>)>();

  void ImGuiIO_ClearInputKeys(
    ffi.Pointer<ImGuiIO> self,
  ) {
    return _ImGuiIO_ClearInputKeys(
      self,
    );
  }

  late final _ImGuiIO_ClearInputKeysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>)>>(
          'ImGuiIO_ClearInputKeys');
  late final _ImGuiIO_ClearInputKeys = _ImGuiIO_ClearInputKeysPtr.asFunction<
      void Function(ffi.Pointer<ImGuiIO>)>();

  void ImGuiIO_ClearInputMouse(
    ffi.Pointer<ImGuiIO> self,
  ) {
    return _ImGuiIO_ClearInputMouse(
      self,
    );
  }

  late final _ImGuiIO_ClearInputMousePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>)>>(
          'ImGuiIO_ClearInputMouse');
  late final _ImGuiIO_ClearInputMouse = _ImGuiIO_ClearInputMousePtr.asFunction<
      void Function(ffi.Pointer<ImGuiIO>)>();

  ffi.Pointer<ImGuiIO> ImGuiIO_ImGuiIO() {
    return _ImGuiIO_ImGuiIO();
  }

  late final _ImGuiIO_ImGuiIOPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiIO> Function()>>(
          'ImGuiIO_ImGuiIO');
  late final _ImGuiIO_ImGuiIO =
      _ImGuiIO_ImGuiIOPtr.asFunction<ffi.Pointer<ImGuiIO> Function()>();

  void ImGuiIO_destroy(
    ffi.Pointer<ImGuiIO> self,
  ) {
    return _ImGuiIO_destroy(
      self,
    );
  }

  late final _ImGuiIO_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIO>)>>(
          'ImGuiIO_destroy');
  late final _ImGuiIO_destroy =
      _ImGuiIO_destroyPtr.asFunction<void Function(ffi.Pointer<ImGuiIO>)>();

  ffi.Pointer<ImGuiInputTextCallbackData>
      ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() {
    return _ImGuiInputTextCallbackData_ImGuiInputTextCallbackData();
  }

  late final _ImGuiInputTextCallbackData_ImGuiInputTextCallbackDataPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ImGuiInputTextCallbackData> Function()>>(
          'ImGuiInputTextCallbackData_ImGuiInputTextCallbackData');
  late final _ImGuiInputTextCallbackData_ImGuiInputTextCallbackData =
      _ImGuiInputTextCallbackData_ImGuiInputTextCallbackDataPtr.asFunction<
          ffi.Pointer<ImGuiInputTextCallbackData> Function()>();

  void ImGuiInputTextCallbackData_destroy(
    ffi.Pointer<ImGuiInputTextCallbackData> self,
  ) {
    return _ImGuiInputTextCallbackData_destroy(
      self,
    );
  }

  late final _ImGuiInputTextCallbackData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiInputTextCallbackData>)>>(
      'ImGuiInputTextCallbackData_destroy');
  late final _ImGuiInputTextCallbackData_destroy =
      _ImGuiInputTextCallbackData_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextCallbackData>)>();

  void ImGuiInputTextCallbackData_DeleteChars(
    ffi.Pointer<ImGuiInputTextCallbackData> self,
    int pos,
    int bytes_count,
  ) {
    return _ImGuiInputTextCallbackData_DeleteChars(
      self,
      pos,
      bytes_count,
    );
  }

  late final _ImGuiInputTextCallbackData_DeleteCharsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiInputTextCallbackData>, ffi.Int,
              ffi.Int)>>('ImGuiInputTextCallbackData_DeleteChars');
  late final _ImGuiInputTextCallbackData_DeleteChars =
      _ImGuiInputTextCallbackData_DeleteCharsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextCallbackData>, int, int)>();

  void ImGuiInputTextCallbackData_InsertChars(
    ffi.Pointer<ImGuiInputTextCallbackData> self,
    int pos,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _ImGuiInputTextCallbackData_InsertChars(
      self,
      pos,
      text,
      text_end,
    );
  }

  late final _ImGuiInputTextCallbackData_InsertCharsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiInputTextCallbackData>,
                  ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'ImGuiInputTextCallbackData_InsertChars');
  late final _ImGuiInputTextCallbackData_InsertChars =
      _ImGuiInputTextCallbackData_InsertCharsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextCallbackData>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void ImGuiInputTextCallbackData_SelectAll(
    ffi.Pointer<ImGuiInputTextCallbackData> self,
  ) {
    return _ImGuiInputTextCallbackData_SelectAll(
      self,
    );
  }

  late final _ImGuiInputTextCallbackData_SelectAllPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiInputTextCallbackData>)>>(
      'ImGuiInputTextCallbackData_SelectAll');
  late final _ImGuiInputTextCallbackData_SelectAll =
      _ImGuiInputTextCallbackData_SelectAllPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextCallbackData>)>();

  void ImGuiInputTextCallbackData_ClearSelection(
    ffi.Pointer<ImGuiInputTextCallbackData> self,
  ) {
    return _ImGuiInputTextCallbackData_ClearSelection(
      self,
    );
  }

  late final _ImGuiInputTextCallbackData_ClearSelectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiInputTextCallbackData>)>>(
      'ImGuiInputTextCallbackData_ClearSelection');
  late final _ImGuiInputTextCallbackData_ClearSelection =
      _ImGuiInputTextCallbackData_ClearSelectionPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextCallbackData>)>();

  bool ImGuiInputTextCallbackData_HasSelection(
    ffi.Pointer<ImGuiInputTextCallbackData> self,
  ) {
    return _ImGuiInputTextCallbackData_HasSelection(
      self,
    );
  }

  late final _ImGuiInputTextCallbackData_HasSelectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ImGuiInputTextCallbackData>)>>(
      'ImGuiInputTextCallbackData_HasSelection');
  late final _ImGuiInputTextCallbackData_HasSelection =
      _ImGuiInputTextCallbackData_HasSelectionPtr.asFunction<
          bool Function(ffi.Pointer<ImGuiInputTextCallbackData>)>();

  ffi.Pointer<ImGuiWindowClass> ImGuiWindowClass_ImGuiWindowClass() {
    return _ImGuiWindowClass_ImGuiWindowClass();
  }

  late final _ImGuiWindowClass_ImGuiWindowClassPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindowClass> Function()>>(
          'ImGuiWindowClass_ImGuiWindowClass');
  late final _ImGuiWindowClass_ImGuiWindowClass =
      _ImGuiWindowClass_ImGuiWindowClassPtr.asFunction<
          ffi.Pointer<ImGuiWindowClass> Function()>();

  void ImGuiWindowClass_destroy(
    ffi.Pointer<ImGuiWindowClass> self,
  ) {
    return _ImGuiWindowClass_destroy(
      self,
    );
  }

  late final _ImGuiWindowClass_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindowClass>)>>(
      'ImGuiWindowClass_destroy');
  late final _ImGuiWindowClass_destroy = _ImGuiWindowClass_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindowClass>)>();

  ffi.Pointer<ImGuiPayload> ImGuiPayload_ImGuiPayload() {
    return _ImGuiPayload_ImGuiPayload();
  }

  late final _ImGuiPayload_ImGuiPayloadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPayload> Function()>>(
          'ImGuiPayload_ImGuiPayload');
  late final _ImGuiPayload_ImGuiPayload = _ImGuiPayload_ImGuiPayloadPtr
      .asFunction<ffi.Pointer<ImGuiPayload> Function()>();

  void ImGuiPayload_destroy(
    ffi.Pointer<ImGuiPayload> self,
  ) {
    return _ImGuiPayload_destroy(
      self,
    );
  }

  late final _ImGuiPayload_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiPayload>)>>(
          'ImGuiPayload_destroy');
  late final _ImGuiPayload_destroy = _ImGuiPayload_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiPayload>)>();

  void ImGuiPayload_Clear(
    ffi.Pointer<ImGuiPayload> self,
  ) {
    return _ImGuiPayload_Clear(
      self,
    );
  }

  late final _ImGuiPayload_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiPayload>)>>(
          'ImGuiPayload_Clear');
  late final _ImGuiPayload_Clear = _ImGuiPayload_ClearPtr.asFunction<
      void Function(ffi.Pointer<ImGuiPayload>)>();

  bool ImGuiPayload_IsDataType(
    ffi.Pointer<ImGuiPayload> self,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _ImGuiPayload_IsDataType(
      self,
      type,
    );
  }

  late final _ImGuiPayload_IsDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiPayload>,
              ffi.Pointer<ffi.Char>)>>('ImGuiPayload_IsDataType');
  late final _ImGuiPayload_IsDataType = _ImGuiPayload_IsDataTypePtr.asFunction<
      bool Function(ffi.Pointer<ImGuiPayload>, ffi.Pointer<ffi.Char>)>();

  bool ImGuiPayload_IsPreview(
    ffi.Pointer<ImGuiPayload> self,
  ) {
    return _ImGuiPayload_IsPreview(
      self,
    );
  }

  late final _ImGuiPayload_IsPreviewPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiPayload>)>>(
          'ImGuiPayload_IsPreview');
  late final _ImGuiPayload_IsPreview = _ImGuiPayload_IsPreviewPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiPayload>)>();

  bool ImGuiPayload_IsDelivery(
    ffi.Pointer<ImGuiPayload> self,
  ) {
    return _ImGuiPayload_IsDelivery(
      self,
    );
  }

  late final _ImGuiPayload_IsDeliveryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiPayload>)>>(
          'ImGuiPayload_IsDelivery');
  late final _ImGuiPayload_IsDelivery = _ImGuiPayload_IsDeliveryPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiPayload>)>();

  ffi.Pointer<ImGuiOnceUponAFrame> ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() {
    return _ImGuiOnceUponAFrame_ImGuiOnceUponAFrame();
  }

  late final _ImGuiOnceUponAFrame_ImGuiOnceUponAFramePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiOnceUponAFrame> Function()>>(
          'ImGuiOnceUponAFrame_ImGuiOnceUponAFrame');
  late final _ImGuiOnceUponAFrame_ImGuiOnceUponAFrame =
      _ImGuiOnceUponAFrame_ImGuiOnceUponAFramePtr.asFunction<
          ffi.Pointer<ImGuiOnceUponAFrame> Function()>();

  void ImGuiOnceUponAFrame_destroy(
    ffi.Pointer<ImGuiOnceUponAFrame> self,
  ) {
    return _ImGuiOnceUponAFrame_destroy(
      self,
    );
  }

  late final _ImGuiOnceUponAFrame_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiOnceUponAFrame>)>>(
      'ImGuiOnceUponAFrame_destroy');
  late final _ImGuiOnceUponAFrame_destroy = _ImGuiOnceUponAFrame_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiOnceUponAFrame>)>();

  ffi.Pointer<ImGuiTextFilter> ImGuiTextFilter_ImGuiTextFilter(
    ffi.Pointer<ffi.Char> default_filter,
  ) {
    return _ImGuiTextFilter_ImGuiTextFilter(
      default_filter,
    );
  }

  late final _ImGuiTextFilter_ImGuiTextFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTextFilter> Function(
              ffi.Pointer<ffi.Char>)>>('ImGuiTextFilter_ImGuiTextFilter');
  late final _ImGuiTextFilter_ImGuiTextFilter =
      _ImGuiTextFilter_ImGuiTextFilterPtr.asFunction<
          ffi.Pointer<ImGuiTextFilter> Function(ffi.Pointer<ffi.Char>)>();

  void ImGuiTextFilter_destroy(
    ffi.Pointer<ImGuiTextFilter> self,
  ) {
    return _ImGuiTextFilter_destroy(
      self,
    );
  }

  late final _ImGuiTextFilter_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextFilter>)>>(
      'ImGuiTextFilter_destroy');
  late final _ImGuiTextFilter_destroy = _ImGuiTextFilter_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextFilter>)>();

  bool ImGuiTextFilter_Draw(
    ffi.Pointer<ImGuiTextFilter> self,
    ffi.Pointer<ffi.Char> label,
    double width,
  ) {
    return _ImGuiTextFilter_Draw(
      self,
      label,
      width,
    );
  }

  late final _ImGuiTextFilter_DrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiTextFilter>, ffi.Pointer<ffi.Char>,
              ffi.Float)>>('ImGuiTextFilter_Draw');
  late final _ImGuiTextFilter_Draw = _ImGuiTextFilter_DrawPtr.asFunction<
      bool Function(
          ffi.Pointer<ImGuiTextFilter>, ffi.Pointer<ffi.Char>, double)>();

  bool ImGuiTextFilter_PassFilter(
    ffi.Pointer<ImGuiTextFilter> self,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _ImGuiTextFilter_PassFilter(
      self,
      text,
      text_end,
    );
  }

  late final _ImGuiTextFilter_PassFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiTextFilter>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ImGuiTextFilter_PassFilter');
  late final _ImGuiTextFilter_PassFilter =
      _ImGuiTextFilter_PassFilterPtr.asFunction<
          bool Function(ffi.Pointer<ImGuiTextFilter>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void ImGuiTextFilter_Build(
    ffi.Pointer<ImGuiTextFilter> self,
  ) {
    return _ImGuiTextFilter_Build(
      self,
    );
  }

  late final _ImGuiTextFilter_BuildPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextFilter>)>>(
      'ImGuiTextFilter_Build');
  late final _ImGuiTextFilter_Build = _ImGuiTextFilter_BuildPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextFilter>)>();

  void ImGuiTextFilter_Clear(
    ffi.Pointer<ImGuiTextFilter> self,
  ) {
    return _ImGuiTextFilter_Clear(
      self,
    );
  }

  late final _ImGuiTextFilter_ClearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextFilter>)>>(
      'ImGuiTextFilter_Clear');
  late final _ImGuiTextFilter_Clear = _ImGuiTextFilter_ClearPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextFilter>)>();

  bool ImGuiTextFilter_IsActive(
    ffi.Pointer<ImGuiTextFilter> self,
  ) {
    return _ImGuiTextFilter_IsActive(
      self,
    );
  }

  late final _ImGuiTextFilter_IsActivePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiTextFilter>)>>(
      'ImGuiTextFilter_IsActive');
  late final _ImGuiTextFilter_IsActive = _ImGuiTextFilter_IsActivePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiTextFilter>)>();

  ffi.Pointer<ImGuiTextRange> ImGuiTextRange_ImGuiTextRange_Nil() {
    return _ImGuiTextRange_ImGuiTextRange_Nil();
  }

  late final _ImGuiTextRange_ImGuiTextRange_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTextRange> Function()>>(
          'ImGuiTextRange_ImGuiTextRange_Nil');
  late final _ImGuiTextRange_ImGuiTextRange_Nil =
      _ImGuiTextRange_ImGuiTextRange_NilPtr.asFunction<
          ffi.Pointer<ImGuiTextRange> Function()>();

  void ImGuiTextRange_destroy(
    ffi.Pointer<ImGuiTextRange> self,
  ) {
    return _ImGuiTextRange_destroy(
      self,
    );
  }

  late final _ImGuiTextRange_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextRange>)>>(
      'ImGuiTextRange_destroy');
  late final _ImGuiTextRange_destroy = _ImGuiTextRange_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextRange>)>();

  ffi.Pointer<ImGuiTextRange> ImGuiTextRange_ImGuiTextRange_Str(
    ffi.Pointer<ffi.Char> _b,
    ffi.Pointer<ffi.Char> _e,
  ) {
    return _ImGuiTextRange_ImGuiTextRange_Str(
      _b,
      _e,
    );
  }

  late final _ImGuiTextRange_ImGuiTextRange_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTextRange> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ImGuiTextRange_ImGuiTextRange_Str');
  late final _ImGuiTextRange_ImGuiTextRange_Str =
      _ImGuiTextRange_ImGuiTextRange_StrPtr.asFunction<
          ffi.Pointer<ImGuiTextRange> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool ImGuiTextRange_empty(
    ffi.Pointer<ImGuiTextRange> self,
  ) {
    return _ImGuiTextRange_empty(
      self,
    );
  }

  late final _ImGuiTextRange_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiTextRange>)>>(
      'ImGuiTextRange_empty');
  late final _ImGuiTextRange_empty = _ImGuiTextRange_emptyPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiTextRange>)>();

  void ImGuiTextRange_split(
    ffi.Pointer<ImGuiTextRange> self,
    int separator,
    ffi.Pointer<ImVector_ImGuiTextRange> out,
  ) {
    return _ImGuiTextRange_split(
      self,
      separator,
      out,
    );
  }

  late final _ImGuiTextRange_splitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTextRange>, ffi.Char,
              ffi.Pointer<ImVector_ImGuiTextRange>)>>('ImGuiTextRange_split');
  late final _ImGuiTextRange_split = _ImGuiTextRange_splitPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextRange>, int,
          ffi.Pointer<ImVector_ImGuiTextRange>)>();

  ffi.Pointer<ImGuiTextBuffer> ImGuiTextBuffer_ImGuiTextBuffer() {
    return _ImGuiTextBuffer_ImGuiTextBuffer();
  }

  late final _ImGuiTextBuffer_ImGuiTextBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTextBuffer> Function()>>(
          'ImGuiTextBuffer_ImGuiTextBuffer');
  late final _ImGuiTextBuffer_ImGuiTextBuffer =
      _ImGuiTextBuffer_ImGuiTextBufferPtr.asFunction<
          ffi.Pointer<ImGuiTextBuffer> Function()>();

  void ImGuiTextBuffer_destroy(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_destroy(
      self,
    );
  }

  late final _ImGuiTextBuffer_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextBuffer>)>>(
      'ImGuiTextBuffer_destroy');
  late final _ImGuiTextBuffer_destroy = _ImGuiTextBuffer_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextBuffer>)>();

  ffi.Pointer<ffi.Char> ImGuiTextBuffer_begin(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_begin(
      self,
    );
  }

  late final _ImGuiTextBuffer_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImGuiTextBuffer>)>>('ImGuiTextBuffer_begin');
  late final _ImGuiTextBuffer_begin = _ImGuiTextBuffer_beginPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTextBuffer>)>();

  ffi.Pointer<ffi.Char> ImGuiTextBuffer_end(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_end(
      self,
    );
  }

  late final _ImGuiTextBuffer_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImGuiTextBuffer>)>>('ImGuiTextBuffer_end');
  late final _ImGuiTextBuffer_end = _ImGuiTextBuffer_endPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTextBuffer>)>();

  int ImGuiTextBuffer_size(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_size(
      self,
    );
  }

  late final _ImGuiTextBuffer_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiTextBuffer>)>>(
      'ImGuiTextBuffer_size');
  late final _ImGuiTextBuffer_size = _ImGuiTextBuffer_sizePtr.asFunction<
      int Function(ffi.Pointer<ImGuiTextBuffer>)>();

  bool ImGuiTextBuffer_empty(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_empty(
      self,
    );
  }

  late final _ImGuiTextBuffer_emptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiTextBuffer>)>>(
      'ImGuiTextBuffer_empty');
  late final _ImGuiTextBuffer_empty = _ImGuiTextBuffer_emptyPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiTextBuffer>)>();

  void ImGuiTextBuffer_clear(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_clear(
      self,
    );
  }

  late final _ImGuiTextBuffer_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextBuffer>)>>(
      'ImGuiTextBuffer_clear');
  late final _ImGuiTextBuffer_clear = _ImGuiTextBuffer_clearPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextBuffer>)>();

  void ImGuiTextBuffer_reserve(
    ffi.Pointer<ImGuiTextBuffer> self,
    int capacity,
  ) {
    return _ImGuiTextBuffer_reserve(
      self,
      capacity,
    );
  }

  late final _ImGuiTextBuffer_reservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTextBuffer>,
              ffi.Int)>>('ImGuiTextBuffer_reserve');
  late final _ImGuiTextBuffer_reserve = _ImGuiTextBuffer_reservePtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextBuffer>, int)>();

  ffi.Pointer<ffi.Char> ImGuiTextBuffer_c_str(
    ffi.Pointer<ImGuiTextBuffer> self,
  ) {
    return _ImGuiTextBuffer_c_str(
      self,
    );
  }

  late final _ImGuiTextBuffer_c_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImGuiTextBuffer>)>>('ImGuiTextBuffer_c_str');
  late final _ImGuiTextBuffer_c_str = _ImGuiTextBuffer_c_strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTextBuffer>)>();

  void ImGuiTextBuffer_append(
    ffi.Pointer<ImGuiTextBuffer> self,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> str_end,
  ) {
    return _ImGuiTextBuffer_append(
      self,
      str,
      str_end,
    );
  }

  late final _ImGuiTextBuffer_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTextBuffer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ImGuiTextBuffer_append');
  late final _ImGuiTextBuffer_append = _ImGuiTextBuffer_appendPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextBuffer>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ImGuiTextBuffer_appendfv(
    ffi.Pointer<ImGuiTextBuffer> self,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _ImGuiTextBuffer_appendfv(
      self,
      fmt,
      args,
    );
  }

  late final _ImGuiTextBuffer_appendfvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTextBuffer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('ImGuiTextBuffer_appendfv');
  late final _ImGuiTextBuffer_appendfv =
      _ImGuiTextBuffer_appendfvPtr.asFunction<
          void Function(ffi.Pointer<ImGuiTextBuffer>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ImGuiStoragePair> ImGuiStoragePair_ImGuiStoragePair_Int(
    int _key,
    int _val,
  ) {
    return _ImGuiStoragePair_ImGuiStoragePair_Int(
      _key,
      _val,
    );
  }

  late final _ImGuiStoragePair_ImGuiStoragePair_IntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStoragePair> Function(
              ImGuiID, ffi.Int)>>('ImGuiStoragePair_ImGuiStoragePair_Int');
  late final _ImGuiStoragePair_ImGuiStoragePair_Int =
      _ImGuiStoragePair_ImGuiStoragePair_IntPtr.asFunction<
          ffi.Pointer<ImGuiStoragePair> Function(int, int)>();

  void ImGuiStoragePair_destroy(
    ffi.Pointer<ImGuiStoragePair> self,
  ) {
    return _ImGuiStoragePair_destroy(
      self,
    );
  }

  late final _ImGuiStoragePair_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStoragePair>)>>(
      'ImGuiStoragePair_destroy');
  late final _ImGuiStoragePair_destroy = _ImGuiStoragePair_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStoragePair>)>();

  ffi.Pointer<ImGuiStoragePair> ImGuiStoragePair_ImGuiStoragePair_Float(
    int _key,
    double _val,
  ) {
    return _ImGuiStoragePair_ImGuiStoragePair_Float(
      _key,
      _val,
    );
  }

  late final _ImGuiStoragePair_ImGuiStoragePair_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStoragePair> Function(
              ImGuiID, ffi.Float)>>('ImGuiStoragePair_ImGuiStoragePair_Float');
  late final _ImGuiStoragePair_ImGuiStoragePair_Float =
      _ImGuiStoragePair_ImGuiStoragePair_FloatPtr.asFunction<
          ffi.Pointer<ImGuiStoragePair> Function(int, double)>();

  ffi.Pointer<ImGuiStoragePair> ImGuiStoragePair_ImGuiStoragePair_Ptr(
    int _key,
    ffi.Pointer<ffi.Void> _val,
  ) {
    return _ImGuiStoragePair_ImGuiStoragePair_Ptr(
      _key,
      _val,
    );
  }

  late final _ImGuiStoragePair_ImGuiStoragePair_PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStoragePair> Function(ImGuiID,
              ffi.Pointer<ffi.Void>)>>('ImGuiStoragePair_ImGuiStoragePair_Ptr');
  late final _ImGuiStoragePair_ImGuiStoragePair_Ptr =
      _ImGuiStoragePair_ImGuiStoragePair_PtrPtr.asFunction<
          ffi.Pointer<ImGuiStoragePair> Function(int, ffi.Pointer<ffi.Void>)>();

  void ImGuiStorage_Clear(
    ffi.Pointer<ImGuiStorage> self,
  ) {
    return _ImGuiStorage_Clear(
      self,
    );
  }

  late final _ImGuiStorage_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStorage>)>>(
          'ImGuiStorage_Clear');
  late final _ImGuiStorage_Clear = _ImGuiStorage_ClearPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>)>();

  int ImGuiStorage_GetInt(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    int default_val,
  ) {
    return _ImGuiStorage_GetInt(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Int)>>('ImGuiStorage_GetInt');
  late final _ImGuiStorage_GetInt = _ImGuiStorage_GetIntPtr.asFunction<
      int Function(ffi.Pointer<ImGuiStorage>, int, int)>();

  void ImGuiStorage_SetInt(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    int val,
  ) {
    return _ImGuiStorage_SetInt(
      self,
      key,
      val,
    );
  }

  late final _ImGuiStorage_SetIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Int)>>('ImGuiStorage_SetInt');
  late final _ImGuiStorage_SetInt = _ImGuiStorage_SetIntPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>, int, int)>();

  bool ImGuiStorage_GetBool(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    bool default_val,
  ) {
    return _ImGuiStorage_GetBool(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetBoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Bool)>>('ImGuiStorage_GetBool');
  late final _ImGuiStorage_GetBool = _ImGuiStorage_GetBoolPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiStorage>, int, bool)>();

  void ImGuiStorage_SetBool(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    bool val,
  ) {
    return _ImGuiStorage_SetBool(
      self,
      key,
      val,
    );
  }

  late final _ImGuiStorage_SetBoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Bool)>>('ImGuiStorage_SetBool');
  late final _ImGuiStorage_SetBool = _ImGuiStorage_SetBoolPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>, int, bool)>();

  double ImGuiStorage_GetFloat(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    double default_val,
  ) {
    return _ImGuiStorage_GetFloat(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Float)>>('ImGuiStorage_GetFloat');
  late final _ImGuiStorage_GetFloat = _ImGuiStorage_GetFloatPtr.asFunction<
      double Function(ffi.Pointer<ImGuiStorage>, int, double)>();

  void ImGuiStorage_SetFloat(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    double val,
  ) {
    return _ImGuiStorage_SetFloat(
      self,
      key,
      val,
    );
  }

  late final _ImGuiStorage_SetFloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Float)>>('ImGuiStorage_SetFloat');
  late final _ImGuiStorage_SetFloat = _ImGuiStorage_SetFloatPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>, int, double)>();

  ffi.Pointer<ffi.Void> ImGuiStorage_GetVoidPtr(
    ffi.Pointer<ImGuiStorage> self,
    int key,
  ) {
    return _ImGuiStorage_GetVoidPtr(
      self,
      key,
    );
  }

  late final _ImGuiStorage_GetVoidPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImGuiStorage>, ImGuiID)>>('ImGuiStorage_GetVoidPtr');
  late final _ImGuiStorage_GetVoidPtr = _ImGuiStorage_GetVoidPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ImGuiStorage>, int)>();

  void ImGuiStorage_SetVoidPtr(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    ffi.Pointer<ffi.Void> val,
  ) {
    return _ImGuiStorage_SetVoidPtr(
      self,
      key,
      val,
    );
  }

  late final _ImGuiStorage_SetVoidPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Pointer<ffi.Void>)>>('ImGuiStorage_SetVoidPtr');
  late final _ImGuiStorage_SetVoidPtr = _ImGuiStorage_SetVoidPtrPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Int> ImGuiStorage_GetIntRef(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    int default_val,
  ) {
    return _ImGuiStorage_GetIntRef(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetIntRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Int)>>('ImGuiStorage_GetIntRef');
  late final _ImGuiStorage_GetIntRef = _ImGuiStorage_GetIntRefPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(ffi.Pointer<ImGuiStorage>, int, int)>();

  ffi.Pointer<ffi.Bool> ImGuiStorage_GetBoolRef(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    bool default_val,
  ) {
    return _ImGuiStorage_GetBoolRef(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetBoolRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Bool> Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Bool)>>('ImGuiStorage_GetBoolRef');
  late final _ImGuiStorage_GetBoolRef = _ImGuiStorage_GetBoolRefPtr.asFunction<
      ffi.Pointer<ffi.Bool> Function(ffi.Pointer<ImGuiStorage>, int, bool)>();

  ffi.Pointer<ffi.Float> ImGuiStorage_GetFloatRef(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    double default_val,
  ) {
    return _ImGuiStorage_GetFloatRef(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetFloatRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<ImGuiStorage>, ImGuiID,
              ffi.Float)>>('ImGuiStorage_GetFloatRef');
  late final _ImGuiStorage_GetFloatRef =
      _ImGuiStorage_GetFloatRefPtr.asFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<ImGuiStorage>, int, double)>();

  ffi.Pointer<ffi.Pointer<ffi.Void>> ImGuiStorage_GetVoidPtrRef(
    ffi.Pointer<ImGuiStorage> self,
    int key,
    ffi.Pointer<ffi.Void> default_val,
  ) {
    return _ImGuiStorage_GetVoidPtrRef(
      self,
      key,
      default_val,
    );
  }

  late final _ImGuiStorage_GetVoidPtrRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Void>> Function(ffi.Pointer<ImGuiStorage>,
              ImGuiID, ffi.Pointer<ffi.Void>)>>('ImGuiStorage_GetVoidPtrRef');
  late final _ImGuiStorage_GetVoidPtrRef =
      _ImGuiStorage_GetVoidPtrRefPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
              ffi.Pointer<ImGuiStorage>, int, ffi.Pointer<ffi.Void>)>();

  void ImGuiStorage_BuildSortByKey(
    ffi.Pointer<ImGuiStorage> self,
  ) {
    return _ImGuiStorage_BuildSortByKey(
      self,
    );
  }

  late final _ImGuiStorage_BuildSortByKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStorage>)>>(
          'ImGuiStorage_BuildSortByKey');
  late final _ImGuiStorage_BuildSortByKey = _ImGuiStorage_BuildSortByKeyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStorage>)>();

  void ImGuiStorage_SetAllInt(
    ffi.Pointer<ImGuiStorage> self,
    int val,
  ) {
    return _ImGuiStorage_SetAllInt(
      self,
      val,
    );
  }

  late final _ImGuiStorage_SetAllIntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiStorage>, ffi.Int)>>('ImGuiStorage_SetAllInt');
  late final _ImGuiStorage_SetAllInt = _ImGuiStorage_SetAllIntPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>, int)>();

  ffi.Pointer<ImGuiListClipper> ImGuiListClipper_ImGuiListClipper() {
    return _ImGuiListClipper_ImGuiListClipper();
  }

  late final _ImGuiListClipper_ImGuiListClipperPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiListClipper> Function()>>(
          'ImGuiListClipper_ImGuiListClipper');
  late final _ImGuiListClipper_ImGuiListClipper =
      _ImGuiListClipper_ImGuiListClipperPtr.asFunction<
          ffi.Pointer<ImGuiListClipper> Function()>();

  void ImGuiListClipper_destroy(
    ffi.Pointer<ImGuiListClipper> self,
  ) {
    return _ImGuiListClipper_destroy(
      self,
    );
  }

  late final _ImGuiListClipper_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiListClipper>)>>(
      'ImGuiListClipper_destroy');
  late final _ImGuiListClipper_destroy = _ImGuiListClipper_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiListClipper>)>();

  void ImGuiListClipper_Begin(
    ffi.Pointer<ImGuiListClipper> self,
    int items_count,
    double items_height,
  ) {
    return _ImGuiListClipper_Begin(
      self,
      items_count,
      items_height,
    );
  }

  late final _ImGuiListClipper_BeginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiListClipper>, ffi.Int,
              ffi.Float)>>('ImGuiListClipper_Begin');
  late final _ImGuiListClipper_Begin = _ImGuiListClipper_BeginPtr.asFunction<
      void Function(ffi.Pointer<ImGuiListClipper>, int, double)>();

  void ImGuiListClipper_End(
    ffi.Pointer<ImGuiListClipper> self,
  ) {
    return _ImGuiListClipper_End(
      self,
    );
  }

  late final _ImGuiListClipper_EndPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiListClipper>)>>(
      'ImGuiListClipper_End');
  late final _ImGuiListClipper_End = _ImGuiListClipper_EndPtr.asFunction<
      void Function(ffi.Pointer<ImGuiListClipper>)>();

  bool ImGuiListClipper_Step(
    ffi.Pointer<ImGuiListClipper> self,
  ) {
    return _ImGuiListClipper_Step(
      self,
    );
  }

  late final _ImGuiListClipper_StepPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiListClipper>)>>(
      'ImGuiListClipper_Step');
  late final _ImGuiListClipper_Step = _ImGuiListClipper_StepPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiListClipper>)>();

  void ImGuiListClipper_IncludeItemByIndex(
    ffi.Pointer<ImGuiListClipper> self,
    int item_index,
  ) {
    return _ImGuiListClipper_IncludeItemByIndex(
      self,
      item_index,
    );
  }

  late final _ImGuiListClipper_IncludeItemByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiListClipper>,
              ffi.Int)>>('ImGuiListClipper_IncludeItemByIndex');
  late final _ImGuiListClipper_IncludeItemByIndex =
      _ImGuiListClipper_IncludeItemByIndexPtr.asFunction<
          void Function(ffi.Pointer<ImGuiListClipper>, int)>();

  void ImGuiListClipper_IncludeItemsByIndex(
    ffi.Pointer<ImGuiListClipper> self,
    int item_begin,
    int item_end,
  ) {
    return _ImGuiListClipper_IncludeItemsByIndex(
      self,
      item_begin,
      item_end,
    );
  }

  late final _ImGuiListClipper_IncludeItemsByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiListClipper>, ffi.Int,
              ffi.Int)>>('ImGuiListClipper_IncludeItemsByIndex');
  late final _ImGuiListClipper_IncludeItemsByIndex =
      _ImGuiListClipper_IncludeItemsByIndexPtr.asFunction<
          void Function(ffi.Pointer<ImGuiListClipper>, int, int)>();

  void ImGuiListClipper_SeekCursorForItem(
    ffi.Pointer<ImGuiListClipper> self,
    int item_index,
  ) {
    return _ImGuiListClipper_SeekCursorForItem(
      self,
      item_index,
    );
  }

  late final _ImGuiListClipper_SeekCursorForItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiListClipper>,
              ffi.Int)>>('ImGuiListClipper_SeekCursorForItem');
  late final _ImGuiListClipper_SeekCursorForItem =
      _ImGuiListClipper_SeekCursorForItemPtr.asFunction<
          void Function(ffi.Pointer<ImGuiListClipper>, int)>();

  ffi.Pointer<ImColor> ImColor_ImColor_Nil() {
    return _ImColor_ImColor_Nil();
  }

  late final _ImColor_ImColor_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImColor> Function()>>(
          'ImColor_ImColor_Nil');
  late final _ImColor_ImColor_Nil =
      _ImColor_ImColor_NilPtr.asFunction<ffi.Pointer<ImColor> Function()>();

  void ImColor_destroy(
    ffi.Pointer<ImColor> self,
  ) {
    return _ImColor_destroy(
      self,
    );
  }

  late final _ImColor_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImColor>)>>(
          'ImColor_destroy');
  late final _ImColor_destroy =
      _ImColor_destroyPtr.asFunction<void Function(ffi.Pointer<ImColor>)>();

  ffi.Pointer<ImColor> ImColor_ImColor_Float(
    double r,
    double g,
    double b,
    double a,
  ) {
    return _ImColor_ImColor_Float(
      r,
      g,
      b,
      a,
    );
  }

  late final _ImColor_ImColor_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImColor> Function(ffi.Float, ffi.Float, ffi.Float,
              ffi.Float)>>('ImColor_ImColor_Float');
  late final _ImColor_ImColor_Float = _ImColor_ImColor_FloatPtr.asFunction<
      ffi.Pointer<ImColor> Function(double, double, double, double)>();

  ffi.Pointer<ImColor> ImColor_ImColor_Vec4(
    ImVec4 col,
  ) {
    return _ImColor_ImColor_Vec4(
      col,
    );
  }

  late final _ImColor_ImColor_Vec4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImColor> Function(ImVec4)>>(
          'ImColor_ImColor_Vec4');
  late final _ImColor_ImColor_Vec4 = _ImColor_ImColor_Vec4Ptr.asFunction<
      ffi.Pointer<ImColor> Function(ImVec4)>();

  ffi.Pointer<ImColor> ImColor_ImColor_Int(
    int r,
    int g,
    int b,
    int a,
  ) {
    return _ImColor_ImColor_Int(
      r,
      g,
      b,
      a,
    );
  }

  late final _ImColor_ImColor_IntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImColor> Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('ImColor_ImColor_Int');
  late final _ImColor_ImColor_Int = _ImColor_ImColor_IntPtr.asFunction<
      ffi.Pointer<ImColor> Function(int, int, int, int)>();

  ffi.Pointer<ImColor> ImColor_ImColor_U32(
    int rgba,
  ) {
    return _ImColor_ImColor_U32(
      rgba,
    );
  }

  late final _ImColor_ImColor_U32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImColor> Function(ImU32)>>(
          'ImColor_ImColor_U32');
  late final _ImColor_ImColor_U32 =
      _ImColor_ImColor_U32Ptr.asFunction<ffi.Pointer<ImColor> Function(int)>();

  void ImColor_SetHSV(
    ffi.Pointer<ImColor> self,
    double h,
    double s,
    double v,
    double a,
  ) {
    return _ImColor_SetHSV(
      self,
      h,
      s,
      v,
      a,
    );
  }

  late final _ImColor_SetHSVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImColor>, ffi.Float, ffi.Float,
              ffi.Float, ffi.Float)>>('ImColor_SetHSV');
  late final _ImColor_SetHSV = _ImColor_SetHSVPtr.asFunction<
      void Function(ffi.Pointer<ImColor>, double, double, double, double)>();

  void ImColor_HSV(
    ffi.Pointer<ImColor> pOut,
    double h,
    double s,
    double v,
    double a,
  ) {
    return _ImColor_HSV(
      pOut,
      h,
      s,
      v,
      a,
    );
  }

  late final _ImColor_HSVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImColor>, ffi.Float, ffi.Float,
              ffi.Float, ffi.Float)>>('ImColor_HSV');
  late final _ImColor_HSV = _ImColor_HSVPtr.asFunction<
      void Function(ffi.Pointer<ImColor>, double, double, double, double)>();

  ffi.Pointer<ImGuiSelectionBasicStorage>
      ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage() {
    return _ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage();
  }

  late final _ImGuiSelectionBasicStorage_ImGuiSelectionBasicStoragePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ImGuiSelectionBasicStorage> Function()>>(
          'ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage');
  late final _ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage =
      _ImGuiSelectionBasicStorage_ImGuiSelectionBasicStoragePtr.asFunction<
          ffi.Pointer<ImGuiSelectionBasicStorage> Function()>();

  void ImGuiSelectionBasicStorage_destroy(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
  ) {
    return _ImGuiSelectionBasicStorage_destroy(
      self,
    );
  }

  late final _ImGuiSelectionBasicStorage_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSelectionBasicStorage>)>>(
      'ImGuiSelectionBasicStorage_destroy');
  late final _ImGuiSelectionBasicStorage_destroy =
      _ImGuiSelectionBasicStorage_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionBasicStorage>)>();

  void ImGuiSelectionBasicStorage_ApplyRequests(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
    ffi.Pointer<ImGuiMultiSelectIO> ms_io,
  ) {
    return _ImGuiSelectionBasicStorage_ApplyRequests(
      self,
      ms_io,
    );
  }

  late final _ImGuiSelectionBasicStorage_ApplyRequestsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
                  ffi.Pointer<ImGuiMultiSelectIO>)>>(
      'ImGuiSelectionBasicStorage_ApplyRequests');
  late final _ImGuiSelectionBasicStorage_ApplyRequests =
      _ImGuiSelectionBasicStorage_ApplyRequestsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
              ffi.Pointer<ImGuiMultiSelectIO>)>();

  bool ImGuiSelectionBasicStorage_Contains(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
    int id,
  ) {
    return _ImGuiSelectionBasicStorage_Contains(
      self,
      id,
    );
  }

  late final _ImGuiSelectionBasicStorage_ContainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
              ImGuiID)>>('ImGuiSelectionBasicStorage_Contains');
  late final _ImGuiSelectionBasicStorage_Contains =
      _ImGuiSelectionBasicStorage_ContainsPtr.asFunction<
          bool Function(ffi.Pointer<ImGuiSelectionBasicStorage>, int)>();

  void ImGuiSelectionBasicStorage_Clear(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
  ) {
    return _ImGuiSelectionBasicStorage_Clear(
      self,
    );
  }

  late final _ImGuiSelectionBasicStorage_ClearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSelectionBasicStorage>)>>(
      'ImGuiSelectionBasicStorage_Clear');
  late final _ImGuiSelectionBasicStorage_Clear =
      _ImGuiSelectionBasicStorage_ClearPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionBasicStorage>)>();

  void ImGuiSelectionBasicStorage_Swap(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
    ffi.Pointer<ImGuiSelectionBasicStorage> r,
  ) {
    return _ImGuiSelectionBasicStorage_Swap(
      self,
      r,
    );
  }

  late final _ImGuiSelectionBasicStorage_SwapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
                  ffi.Pointer<ImGuiSelectionBasicStorage>)>>(
      'ImGuiSelectionBasicStorage_Swap');
  late final _ImGuiSelectionBasicStorage_Swap =
      _ImGuiSelectionBasicStorage_SwapPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
              ffi.Pointer<ImGuiSelectionBasicStorage>)>();

  void ImGuiSelectionBasicStorage_SetItemSelected(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
    int id,
    bool selected,
  ) {
    return _ImGuiSelectionBasicStorage_SetItemSelected(
      self,
      id,
      selected,
    );
  }

  late final _ImGuiSelectionBasicStorage_SetItemSelectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiSelectionBasicStorage>, ImGuiID,
              ffi.Bool)>>('ImGuiSelectionBasicStorage_SetItemSelected');
  late final _ImGuiSelectionBasicStorage_SetItemSelected =
      _ImGuiSelectionBasicStorage_SetItemSelectedPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionBasicStorage>, int, bool)>();

  bool ImGuiSelectionBasicStorage_GetNextSelectedItem(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
    ffi.Pointer<ffi.Pointer<ffi.Void>> opaque_it,
    ffi.Pointer<ImGuiID> out_id,
  ) {
    return _ImGuiSelectionBasicStorage_GetNextSelectedItem(
      self,
      opaque_it,
      out_id,
    );
  }

  late final _ImGuiSelectionBasicStorage_GetNextSelectedItemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ImGuiID>)>>(
      'ImGuiSelectionBasicStorage_GetNextSelectedItem');
  late final _ImGuiSelectionBasicStorage_GetNextSelectedItem =
      _ImGuiSelectionBasicStorage_GetNextSelectedItemPtr.asFunction<
          bool Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ImGuiID>)>();

  int ImGuiSelectionBasicStorage_GetStorageIdFromIndex(
    ffi.Pointer<ImGuiSelectionBasicStorage> self,
    int idx,
  ) {
    return _ImGuiSelectionBasicStorage_GetStorageIdFromIndex(
      self,
      idx,
    );
  }

  late final _ImGuiSelectionBasicStorage_GetStorageIdFromIndexPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ffi.Pointer<ImGuiSelectionBasicStorage>,
              ffi.Int)>>('ImGuiSelectionBasicStorage_GetStorageIdFromIndex');
  late final _ImGuiSelectionBasicStorage_GetStorageIdFromIndex =
      _ImGuiSelectionBasicStorage_GetStorageIdFromIndexPtr.asFunction<
          int Function(ffi.Pointer<ImGuiSelectionBasicStorage>, int)>();

  ffi.Pointer<ImGuiSelectionExternalStorage>
      ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage() {
    return _ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage();
  }

  late final _ImGuiSelectionExternalStorage_ImGuiSelectionExternalStoragePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ImGuiSelectionExternalStorage> Function()>>(
          'ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage');
  late final _ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage =
      _ImGuiSelectionExternalStorage_ImGuiSelectionExternalStoragePtr
          .asFunction<ffi.Pointer<ImGuiSelectionExternalStorage> Function()>();

  void ImGuiSelectionExternalStorage_destroy(
    ffi.Pointer<ImGuiSelectionExternalStorage> self,
  ) {
    return _ImGuiSelectionExternalStorage_destroy(
      self,
    );
  }

  late final _ImGuiSelectionExternalStorage_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSelectionExternalStorage>)>>(
      'ImGuiSelectionExternalStorage_destroy');
  late final _ImGuiSelectionExternalStorage_destroy =
      _ImGuiSelectionExternalStorage_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionExternalStorage>)>();

  void ImGuiSelectionExternalStorage_ApplyRequests(
    ffi.Pointer<ImGuiSelectionExternalStorage> self,
    ffi.Pointer<ImGuiMultiSelectIO> ms_io,
  ) {
    return _ImGuiSelectionExternalStorage_ApplyRequests(
      self,
      ms_io,
    );
  }

  late final _ImGuiSelectionExternalStorage_ApplyRequestsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSelectionExternalStorage>,
                  ffi.Pointer<ImGuiMultiSelectIO>)>>(
      'ImGuiSelectionExternalStorage_ApplyRequests');
  late final _ImGuiSelectionExternalStorage_ApplyRequests =
      _ImGuiSelectionExternalStorage_ApplyRequestsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiSelectionExternalStorage>,
              ffi.Pointer<ImGuiMultiSelectIO>)>();

  ffi.Pointer<ImDrawCmd> ImDrawCmd_ImDrawCmd() {
    return _ImDrawCmd_ImDrawCmd();
  }

  late final _ImDrawCmd_ImDrawCmdPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawCmd> Function()>>(
          'ImDrawCmd_ImDrawCmd');
  late final _ImDrawCmd_ImDrawCmd =
      _ImDrawCmd_ImDrawCmdPtr.asFunction<ffi.Pointer<ImDrawCmd> Function()>();

  void ImDrawCmd_destroy(
    ffi.Pointer<ImDrawCmd> self,
  ) {
    return _ImDrawCmd_destroy(
      self,
    );
  }

  late final _ImDrawCmd_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawCmd>)>>(
          'ImDrawCmd_destroy');
  late final _ImDrawCmd_destroy =
      _ImDrawCmd_destroyPtr.asFunction<void Function(ffi.Pointer<ImDrawCmd>)>();

  int ImDrawCmd_GetTexID(
    ffi.Pointer<ImDrawCmd> self,
  ) {
    return _ImDrawCmd_GetTexID(
      self,
    );
  }

  late final _ImDrawCmd_GetTexIDPtr =
      _lookup<ffi.NativeFunction<ImTextureID Function(ffi.Pointer<ImDrawCmd>)>>(
          'ImDrawCmd_GetTexID');
  late final _ImDrawCmd_GetTexID =
      _ImDrawCmd_GetTexIDPtr.asFunction<int Function(ffi.Pointer<ImDrawCmd>)>();

  ffi.Pointer<ImDrawListSplitter> ImDrawListSplitter_ImDrawListSplitter() {
    return _ImDrawListSplitter_ImDrawListSplitter();
  }

  late final _ImDrawListSplitter_ImDrawListSplitterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawListSplitter> Function()>>(
          'ImDrawListSplitter_ImDrawListSplitter');
  late final _ImDrawListSplitter_ImDrawListSplitter =
      _ImDrawListSplitter_ImDrawListSplitterPtr.asFunction<
          ffi.Pointer<ImDrawListSplitter> Function()>();

  void ImDrawListSplitter_destroy(
    ffi.Pointer<ImDrawListSplitter> self,
  ) {
    return _ImDrawListSplitter_destroy(
      self,
    );
  }

  late final _ImDrawListSplitter_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawListSplitter>)>>(
      'ImDrawListSplitter_destroy');
  late final _ImDrawListSplitter_destroy = _ImDrawListSplitter_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImDrawListSplitter>)>();

  void ImDrawListSplitter_Clear(
    ffi.Pointer<ImDrawListSplitter> self,
  ) {
    return _ImDrawListSplitter_Clear(
      self,
    );
  }

  late final _ImDrawListSplitter_ClearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawListSplitter>)>>(
      'ImDrawListSplitter_Clear');
  late final _ImDrawListSplitter_Clear = _ImDrawListSplitter_ClearPtr
      .asFunction<void Function(ffi.Pointer<ImDrawListSplitter>)>();

  void ImDrawListSplitter_ClearFreeMemory(
    ffi.Pointer<ImDrawListSplitter> self,
  ) {
    return _ImDrawListSplitter_ClearFreeMemory(
      self,
    );
  }

  late final _ImDrawListSplitter_ClearFreeMemoryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawListSplitter>)>>(
      'ImDrawListSplitter_ClearFreeMemory');
  late final _ImDrawListSplitter_ClearFreeMemory =
      _ImDrawListSplitter_ClearFreeMemoryPtr.asFunction<
          void Function(ffi.Pointer<ImDrawListSplitter>)>();

  void ImDrawListSplitter_Split(
    ffi.Pointer<ImDrawListSplitter> self,
    ffi.Pointer<ImDrawList> draw_list,
    int count,
  ) {
    return _ImDrawListSplitter_Split(
      self,
      draw_list,
      count,
    );
  }

  late final _ImDrawListSplitter_SplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawListSplitter>,
              ffi.Pointer<ImDrawList>, ffi.Int)>>('ImDrawListSplitter_Split');
  late final _ImDrawListSplitter_Split =
      _ImDrawListSplitter_SplitPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawListSplitter>, ffi.Pointer<ImDrawList>, int)>();

  void ImDrawListSplitter_Merge(
    ffi.Pointer<ImDrawListSplitter> self,
    ffi.Pointer<ImDrawList> draw_list,
  ) {
    return _ImDrawListSplitter_Merge(
      self,
      draw_list,
    );
  }

  late final _ImDrawListSplitter_MergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawListSplitter>,
              ffi.Pointer<ImDrawList>)>>('ImDrawListSplitter_Merge');
  late final _ImDrawListSplitter_Merge =
      _ImDrawListSplitter_MergePtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawListSplitter>, ffi.Pointer<ImDrawList>)>();

  void ImDrawListSplitter_SetCurrentChannel(
    ffi.Pointer<ImDrawListSplitter> self,
    ffi.Pointer<ImDrawList> draw_list,
    int channel_idx,
  ) {
    return _ImDrawListSplitter_SetCurrentChannel(
      self,
      draw_list,
      channel_idx,
    );
  }

  late final _ImDrawListSplitter_SetCurrentChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawListSplitter>,
              ffi.Pointer<ImDrawList>,
              ffi.Int)>>('ImDrawListSplitter_SetCurrentChannel');
  late final _ImDrawListSplitter_SetCurrentChannel =
      _ImDrawListSplitter_SetCurrentChannelPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawListSplitter>, ffi.Pointer<ImDrawList>, int)>();

  ffi.Pointer<ImDrawList> ImDrawList_ImDrawList(
    ffi.Pointer<ImDrawListSharedData> shared_data,
  ) {
    return _ImDrawList_ImDrawList(
      shared_data,
    );
  }

  late final _ImDrawList_ImDrawListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImDrawList> Function(
              ffi.Pointer<ImDrawListSharedData>)>>('ImDrawList_ImDrawList');
  late final _ImDrawList_ImDrawList = _ImDrawList_ImDrawListPtr.asFunction<
      ffi.Pointer<ImDrawList> Function(ffi.Pointer<ImDrawListSharedData>)>();

  void ImDrawList_destroy(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_destroy(
      self,
    );
  }

  late final _ImDrawList_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_destroy');
  late final _ImDrawList_destroy = _ImDrawList_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_PushClipRect(
    ffi.Pointer<ImDrawList> self,
    ImVec2 clip_rect_min,
    ImVec2 clip_rect_max,
    bool intersect_with_current_clip_rect,
  ) {
    return _ImDrawList_PushClipRect(
      self,
      clip_rect_min,
      clip_rect_max,
      intersect_with_current_clip_rect,
    );
  }

  late final _ImDrawList_PushClipRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2,
              ffi.Bool)>>('ImDrawList_PushClipRect');
  late final _ImDrawList_PushClipRect = _ImDrawList_PushClipRectPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, bool)>();

  void ImDrawList_PushClipRectFullScreen(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_PushClipRectFullScreen(
      self,
    );
  }

  late final _ImDrawList_PushClipRectFullScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_PushClipRectFullScreen');
  late final _ImDrawList_PushClipRectFullScreen =
      _ImDrawList_PushClipRectFullScreenPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_PopClipRect(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_PopClipRect(
      self,
    );
  }

  late final _ImDrawList_PopClipRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_PopClipRect');
  late final _ImDrawList_PopClipRect = _ImDrawList_PopClipRectPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_PushTextureID(
    ffi.Pointer<ImDrawList> self,
    int texture_id,
  ) {
    return _ImDrawList_PushTextureID(
      self,
      texture_id,
    );
  }

  late final _ImDrawList_PushTextureIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>,
              ImTextureID)>>('ImDrawList_PushTextureID');
  late final _ImDrawList_PushTextureID = _ImDrawList_PushTextureIDPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int)>();

  void ImDrawList_PopTextureID(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_PopTextureID(
      self,
    );
  }

  late final _ImDrawList_PopTextureIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_PopTextureID');
  late final _ImDrawList_PopTextureID = _ImDrawList_PopTextureIDPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_GetClipRectMin(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_GetClipRectMin(
      pOut,
      self,
    );
  }

  late final _ImDrawList_GetClipRectMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImDrawList>)>>('ImDrawList_GetClipRectMin');
  late final _ImDrawList_GetClipRectMin =
      _ImDrawList_GetClipRectMinPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImDrawList>)>();

  void ImDrawList_GetClipRectMax(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_GetClipRectMax(
      pOut,
      self,
    );
  }

  late final _ImDrawList_GetClipRectMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImDrawList>)>>('ImDrawList_GetClipRectMax');
  late final _ImDrawList_GetClipRectMax =
      _ImDrawList_GetClipRectMaxPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImDrawList>)>();

  void ImDrawList_AddLine(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    int col,
    double thickness,
  ) {
    return _ImDrawList_AddLine(
      self,
      p1,
      p2,
      col,
      thickness,
    );
  }

  late final _ImDrawList_AddLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImU32,
              ffi.Float)>>('ImDrawList_AddLine');
  late final _ImDrawList_AddLine = _ImDrawList_AddLinePtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, double)>();

  void ImDrawList_AddRect(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p_min,
    ImVec2 p_max,
    int col,
    double rounding,
    int flags,
    double thickness,
  ) {
    return _ImDrawList_AddRect(
      self,
      p_min,
      p_max,
      col,
      rounding,
      flags,
      thickness,
    );
  }

  late final _ImDrawList_AddRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImU32,
              ffi.Float, ImDrawFlags, ffi.Float)>>('ImDrawList_AddRect');
  late final _ImDrawList_AddRect = _ImDrawList_AddRectPtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, double, int, double)>();

  void ImDrawList_AddRectFilled(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p_min,
    ImVec2 p_max,
    int col,
    double rounding,
    int flags,
  ) {
    return _ImDrawList_AddRectFilled(
      self,
      p_min,
      p_max,
      col,
      rounding,
      flags,
    );
  }

  late final _ImDrawList_AddRectFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImU32,
              ffi.Float, ImDrawFlags)>>('ImDrawList_AddRectFilled');
  late final _ImDrawList_AddRectFilled =
      _ImDrawList_AddRectFilledPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, double, int)>();

  void ImDrawList_AddRectFilledMultiColor(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p_min,
    ImVec2 p_max,
    int col_upr_left,
    int col_upr_right,
    int col_bot_right,
    int col_bot_left,
  ) {
    return _ImDrawList_AddRectFilledMultiColor(
      self,
      p_min,
      p_max,
      col_upr_left,
      col_upr_right,
      col_bot_right,
      col_bot_left,
    );
  }

  late final _ImDrawList_AddRectFilledMultiColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImU32,
              ImU32, ImU32, ImU32)>>('ImDrawList_AddRectFilledMultiColor');
  late final _ImDrawList_AddRectFilledMultiColor =
      _ImDrawList_AddRectFilledMultiColorPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, int, int, int)>();

  void ImDrawList_AddQuad(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    int col,
    double thickness,
  ) {
    return _ImDrawList_AddQuad(
      self,
      p1,
      p2,
      p3,
      p4,
      col,
      thickness,
    );
  }

  late final _ImDrawList_AddQuadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImVec2, ImU32, ffi.Float)>>('ImDrawList_AddQuad');
  late final _ImDrawList_AddQuad = _ImDrawList_AddQuadPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, ImVec2,
          int, double)>();

  void ImDrawList_AddQuadFilled(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    int col,
  ) {
    return _ImDrawList_AddQuadFilled(
      self,
      p1,
      p2,
      p3,
      p4,
      col,
    );
  }

  late final _ImDrawList_AddQuadFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImVec2, ImU32)>>('ImDrawList_AddQuadFilled');
  late final _ImDrawList_AddQuadFilled =
      _ImDrawList_AddQuadFilledPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_AddTriangle(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    int col,
    double thickness,
  ) {
    return _ImDrawList_AddTriangle(
      self,
      p1,
      p2,
      p3,
      col,
      thickness,
    );
  }

  late final _ImDrawList_AddTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImU32, ffi.Float)>>('ImDrawList_AddTriangle');
  late final _ImDrawList_AddTriangle = _ImDrawList_AddTrianglePtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, int, double)>();

  void ImDrawList_AddTriangleFilled(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    int col,
  ) {
    return _ImDrawList_AddTriangleFilled(
      self,
      p1,
      p2,
      p3,
      col,
    );
  }

  late final _ImDrawList_AddTriangleFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImU32)>>('ImDrawList_AddTriangleFilled');
  late final _ImDrawList_AddTriangleFilled =
      _ImDrawList_AddTriangleFilledPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_AddCircle(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    int col,
    int num_segments,
    double thickness,
  ) {
    return _ImDrawList_AddCircle(
      self,
      center,
      radius,
      col,
      num_segments,
      thickness,
    );
  }

  late final _ImDrawList_AddCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float, ImU32,
              ffi.Int, ffi.Float)>>('ImDrawList_AddCircle');
  late final _ImDrawList_AddCircle = _ImDrawList_AddCirclePtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, double, int, int, double)>();

  void ImDrawList_AddCircleFilled(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    int col,
    int num_segments,
  ) {
    return _ImDrawList_AddCircleFilled(
      self,
      center,
      radius,
      col,
      num_segments,
    );
  }

  late final _ImDrawList_AddCircleFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float, ImU32,
              ffi.Int)>>('ImDrawList_AddCircleFilled');
  late final _ImDrawList_AddCircleFilled =
      _ImDrawList_AddCircleFilledPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, double, int, int)>();

  void ImDrawList_AddNgon(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    int col,
    int num_segments,
    double thickness,
  ) {
    return _ImDrawList_AddNgon(
      self,
      center,
      radius,
      col,
      num_segments,
      thickness,
    );
  }

  late final _ImDrawList_AddNgonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float, ImU32,
              ffi.Int, ffi.Float)>>('ImDrawList_AddNgon');
  late final _ImDrawList_AddNgon = _ImDrawList_AddNgonPtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, double, int, int, double)>();

  void ImDrawList_AddNgonFilled(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    int col,
    int num_segments,
  ) {
    return _ImDrawList_AddNgonFilled(
      self,
      center,
      radius,
      col,
      num_segments,
    );
  }

  late final _ImDrawList_AddNgonFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float, ImU32,
              ffi.Int)>>('ImDrawList_AddNgonFilled');
  late final _ImDrawList_AddNgonFilled =
      _ImDrawList_AddNgonFilledPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, double, int, int)>();

  void ImDrawList_AddEllipse(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    ImVec2 radius,
    int col,
    double rot,
    int num_segments,
    double thickness,
  ) {
    return _ImDrawList_AddEllipse(
      self,
      center,
      radius,
      col,
      rot,
      num_segments,
      thickness,
    );
  }

  late final _ImDrawList_AddEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImU32,
              ffi.Float, ffi.Int, ffi.Float)>>('ImDrawList_AddEllipse');
  late final _ImDrawList_AddEllipse = _ImDrawList_AddEllipsePtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, double, int, double)>();

  void ImDrawList_AddEllipseFilled(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    ImVec2 radius,
    int col,
    double rot,
    int num_segments,
  ) {
    return _ImDrawList_AddEllipseFilled(
      self,
      center,
      radius,
      col,
      rot,
      num_segments,
    );
  }

  late final _ImDrawList_AddEllipseFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImU32,
              ffi.Float, ffi.Int)>>('ImDrawList_AddEllipseFilled');
  late final _ImDrawList_AddEllipseFilled =
      _ImDrawList_AddEllipseFilledPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, double, int)>();

  void ImDrawList_AddText_Vec2(
    ffi.Pointer<ImDrawList> self,
    ImVec2 pos,
    int col,
    ffi.Pointer<ffi.Char> text_begin,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _ImDrawList_AddText_Vec2(
      self,
      pos,
      col,
      text_begin,
      text_end,
    );
  }

  late final _ImDrawList_AddText_Vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImVec2,
              ImU32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ImDrawList_AddText_Vec2');
  late final _ImDrawList_AddText_Vec2 = _ImDrawList_AddText_Vec2Ptr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void ImDrawList_AddText_FontPtr(
    ffi.Pointer<ImDrawList> self,
    ffi.Pointer<ImFont> font,
    double font_size,
    ImVec2 pos,
    int col,
    ffi.Pointer<ffi.Char> text_begin,
    ffi.Pointer<ffi.Char> text_end,
    double wrap_width,
    ffi.Pointer<ImVec4> cpu_fine_clip_rect,
  ) {
    return _ImDrawList_AddText_FontPtr(
      self,
      font,
      font_size,
      pos,
      col,
      text_begin,
      text_end,
      wrap_width,
      cpu_fine_clip_rect,
    );
  }

  late final _ImDrawList_AddText_FontPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImFont>,
              ffi.Float,
              ImVec2,
              ImU32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Pointer<ImVec4>)>>('ImDrawList_AddText_FontPtr');
  late final _ImDrawList_AddText_FontPtr =
      _ImDrawList_AddText_FontPtrPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImFont>,
              double,
              ImVec2,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              double,
              ffi.Pointer<ImVec4>)>();

  void ImDrawList_AddBezierCubic(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    int col,
    double thickness,
    int num_segments,
  ) {
    return _ImDrawList_AddBezierCubic(
      self,
      p1,
      p2,
      p3,
      p4,
      col,
      thickness,
      num_segments,
    );
  }

  late final _ImDrawList_AddBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImVec2, ImU32, ffi.Float, ffi.Int)>>('ImDrawList_AddBezierCubic');
  late final _ImDrawList_AddBezierCubic =
      _ImDrawList_AddBezierCubicPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, ImVec2,
              int, double, int)>();

  void ImDrawList_AddBezierQuadratic(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    int col,
    double thickness,
    int num_segments,
  ) {
    return _ImDrawList_AddBezierQuadratic(
      self,
      p1,
      p2,
      p3,
      col,
      thickness,
      num_segments,
    );
  }

  late final _ImDrawList_AddBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImU32, ffi.Float, ffi.Int)>>('ImDrawList_AddBezierQuadratic');
  late final _ImDrawList_AddBezierQuadratic =
      _ImDrawList_AddBezierQuadraticPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, int,
              double, int)>();

  void ImDrawList_AddPolyline(
    ffi.Pointer<ImDrawList> self,
    ffi.Pointer<ImVec2> points,
    int num_points,
    int col,
    int flags,
    double thickness,
  ) {
    return _ImDrawList_AddPolyline(
      self,
      points,
      num_points,
      col,
      flags,
      thickness,
    );
  }

  late final _ImDrawList_AddPolylinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImVec2>,
              ffi.Int,
              ImU32,
              ImDrawFlags,
              ffi.Float)>>('ImDrawList_AddPolyline');
  late final _ImDrawList_AddPolyline = _ImDrawList_AddPolylinePtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ffi.Pointer<ImVec2>, int, int, int,
          double)>();

  void ImDrawList_AddConvexPolyFilled(
    ffi.Pointer<ImDrawList> self,
    ffi.Pointer<ImVec2> points,
    int num_points,
    int col,
  ) {
    return _ImDrawList_AddConvexPolyFilled(
      self,
      points,
      num_points,
      col,
    );
  }

  late final _ImDrawList_AddConvexPolyFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Pointer<ImVec2>,
              ffi.Int, ImU32)>>('ImDrawList_AddConvexPolyFilled');
  late final _ImDrawList_AddConvexPolyFilled =
      _ImDrawList_AddConvexPolyFilledPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ffi.Pointer<ImVec2>, int, int)>();

  void ImDrawList_AddConcavePolyFilled(
    ffi.Pointer<ImDrawList> self,
    ffi.Pointer<ImVec2> points,
    int num_points,
    int col,
  ) {
    return _ImDrawList_AddConcavePolyFilled(
      self,
      points,
      num_points,
      col,
    );
  }

  late final _ImDrawList_AddConcavePolyFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Pointer<ImVec2>,
              ffi.Int, ImU32)>>('ImDrawList_AddConcavePolyFilled');
  late final _ImDrawList_AddConcavePolyFilled =
      _ImDrawList_AddConcavePolyFilledPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ffi.Pointer<ImVec2>, int, int)>();

  void ImDrawList_AddImage(
    ffi.Pointer<ImDrawList> self,
    int user_texture_id,
    ImVec2 p_min,
    ImVec2 p_max,
    ImVec2 uv_min,
    ImVec2 uv_max,
    int col,
  ) {
    return _ImDrawList_AddImage(
      self,
      user_texture_id,
      p_min,
      p_max,
      uv_min,
      uv_max,
      col,
    );
  }

  late final _ImDrawList_AddImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImTextureID, ImVec2,
              ImVec2, ImVec2, ImVec2, ImU32)>>('ImDrawList_AddImage');
  late final _ImDrawList_AddImage = _ImDrawList_AddImagePtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, int, ImVec2, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_AddImageQuad(
    ffi.Pointer<ImDrawList> self,
    int user_texture_id,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    ImVec2 uv1,
    ImVec2 uv2,
    ImVec2 uv3,
    ImVec2 uv4,
    int col,
  ) {
    return _ImDrawList_AddImageQuad(
      self,
      user_texture_id,
      p1,
      p2,
      p3,
      p4,
      uv1,
      uv2,
      uv3,
      uv4,
      col,
    );
  }

  late final _ImDrawList_AddImageQuadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImTextureID,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImU32)>>('ImDrawList_AddImageQuad');
  late final _ImDrawList_AddImageQuad = _ImDrawList_AddImageQuadPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, int, ImVec2, ImVec2, ImVec2,
          ImVec2, ImVec2, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_AddImageRounded(
    ffi.Pointer<ImDrawList> self,
    int user_texture_id,
    ImVec2 p_min,
    ImVec2 p_max,
    ImVec2 uv_min,
    ImVec2 uv_max,
    int col,
    double rounding,
    int flags,
  ) {
    return _ImDrawList_AddImageRounded(
      self,
      user_texture_id,
      p_min,
      p_max,
      uv_min,
      uv_max,
      col,
      rounding,
      flags,
    );
  }

  late final _ImDrawList_AddImageRoundedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImTextureID,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImU32,
              ffi.Float,
              ImDrawFlags)>>('ImDrawList_AddImageRounded');
  late final _ImDrawList_AddImageRounded =
      _ImDrawList_AddImageRoundedPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, int, ImVec2, ImVec2, ImVec2,
              ImVec2, int, double, int)>();

  void ImDrawList_PathClear(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_PathClear(
      self,
    );
  }

  late final _ImDrawList_PathClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_PathClear');
  late final _ImDrawList_PathClear = _ImDrawList_PathClearPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_PathLineTo(
    ffi.Pointer<ImDrawList> self,
    ImVec2 pos,
  ) {
    return _ImDrawList_PathLineTo(
      self,
      pos,
    );
  }

  late final _ImDrawList_PathLineToPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2)>>(
      'ImDrawList_PathLineTo');
  late final _ImDrawList_PathLineTo = _ImDrawList_PathLineToPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2)>();

  void ImDrawList_PathLineToMergeDuplicate(
    ffi.Pointer<ImDrawList> self,
    ImVec2 pos,
  ) {
    return _ImDrawList_PathLineToMergeDuplicate(
      self,
      pos,
    );
  }

  late final _ImDrawList_PathLineToMergeDuplicatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2)>>(
      'ImDrawList_PathLineToMergeDuplicate');
  late final _ImDrawList_PathLineToMergeDuplicate =
      _ImDrawList_PathLineToMergeDuplicatePtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2)>();

  void ImDrawList_PathFillConvex(
    ffi.Pointer<ImDrawList> self,
    int col,
  ) {
    return _ImDrawList_PathFillConvex(
      self,
      col,
    );
  }

  late final _ImDrawList_PathFillConvexPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>, ImU32)>>(
      'ImDrawList_PathFillConvex');
  late final _ImDrawList_PathFillConvex = _ImDrawList_PathFillConvexPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int)>();

  void ImDrawList_PathFillConcave(
    ffi.Pointer<ImDrawList> self,
    int col,
  ) {
    return _ImDrawList_PathFillConcave(
      self,
      col,
    );
  }

  late final _ImDrawList_PathFillConcavePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>, ImU32)>>(
      'ImDrawList_PathFillConcave');
  late final _ImDrawList_PathFillConcave = _ImDrawList_PathFillConcavePtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int)>();

  void ImDrawList_PathStroke(
    ffi.Pointer<ImDrawList> self,
    int col,
    int flags,
    double thickness,
  ) {
    return _ImDrawList_PathStroke(
      self,
      col,
      flags,
      thickness,
    );
  }

  late final _ImDrawList_PathStrokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImU32, ImDrawFlags,
              ffi.Float)>>('ImDrawList_PathStroke');
  late final _ImDrawList_PathStroke = _ImDrawList_PathStrokePtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, int, int, double)>();

  void ImDrawList_PathArcTo(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    double a_min,
    double a_max,
    int num_segments,
  ) {
    return _ImDrawList_PathArcTo(
      self,
      center,
      radius,
      a_min,
      a_max,
      num_segments,
    );
  }

  late final _ImDrawList_PathArcToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float,
              ffi.Float, ffi.Float, ffi.Int)>>('ImDrawList_PathArcTo');
  late final _ImDrawList_PathArcTo = _ImDrawList_PathArcToPtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, double, double, double, int)>();

  void ImDrawList_PathArcToFast(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    int a_min_of_12,
    int a_max_of_12,
  ) {
    return _ImDrawList_PathArcToFast(
      self,
      center,
      radius,
      a_min_of_12,
      a_max_of_12,
    );
  }

  late final _ImDrawList_PathArcToFastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float, ffi.Int,
              ffi.Int)>>('ImDrawList_PathArcToFast');
  late final _ImDrawList_PathArcToFast =
      _ImDrawList_PathArcToFastPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, double, int, int)>();

  void ImDrawList_PathEllipticalArcTo(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    ImVec2 radius,
    double rot,
    double a_min,
    double a_max,
    int num_segments,
  ) {
    return _ImDrawList_PathEllipticalArcTo(
      self,
      center,
      radius,
      rot,
      a_min,
      a_max,
      num_segments,
    );
  }

  late final _ImDrawList_PathEllipticalArcToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImVec2,
              ImVec2,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Int)>>('ImDrawList_PathEllipticalArcTo');
  late final _ImDrawList_PathEllipticalArcTo =
      _ImDrawList_PathEllipticalArcToPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, double, double,
              double, int)>();

  void ImDrawList_PathBezierCubicCurveTo(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    int num_segments,
  ) {
    return _ImDrawList_PathBezierCubicCurveTo(
      self,
      p2,
      p3,
      p4,
      num_segments,
    );
  }

  late final _ImDrawList_PathBezierCubicCurveToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ffi.Int)>>('ImDrawList_PathBezierCubicCurveTo');
  late final _ImDrawList_PathBezierCubicCurveTo =
      _ImDrawList_PathBezierCubicCurveToPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_PathBezierQuadraticCurveTo(
    ffi.Pointer<ImDrawList> self,
    ImVec2 p2,
    ImVec2 p3,
    int num_segments,
  ) {
    return _ImDrawList_PathBezierQuadraticCurveTo(
      self,
      p2,
      p3,
      num_segments,
    );
  }

  late final _ImDrawList_PathBezierQuadraticCurveToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2,
              ffi.Int)>>('ImDrawList_PathBezierQuadraticCurveTo');
  late final _ImDrawList_PathBezierQuadraticCurveTo =
      _ImDrawList_PathBezierQuadraticCurveToPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int)>();

  void ImDrawList_PathRect(
    ffi.Pointer<ImDrawList> self,
    ImVec2 rect_min,
    ImVec2 rect_max,
    double rounding,
    int flags,
  ) {
    return _ImDrawList_PathRect(
      self,
      rect_min,
      rect_max,
      rounding,
      flags,
    );
  }

  late final _ImDrawList_PathRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ffi.Float,
              ImDrawFlags)>>('ImDrawList_PathRect');
  late final _ImDrawList_PathRect = _ImDrawList_PathRectPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, double, int)>();

  void ImDrawList_AddCallback(
    ffi.Pointer<ImDrawList> self,
    ImDrawCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    int userdata_size,
  ) {
    return _ImDrawList_AddCallback(
      self,
      callback,
      userdata,
      userdata_size,
    );
  }

  late final _ImDrawList_AddCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImDrawCallback,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ImDrawList_AddCallback');
  late final _ImDrawList_AddCallback = _ImDrawList_AddCallbackPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImDrawCallback,
          ffi.Pointer<ffi.Void>, int)>();

  void ImDrawList_AddDrawCmd(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_AddDrawCmd(
      self,
    );
  }

  late final _ImDrawList_AddDrawCmdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_AddDrawCmd');
  late final _ImDrawList_AddDrawCmd = _ImDrawList_AddDrawCmdPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>)>();

  ffi.Pointer<ImDrawList> ImDrawList_CloneOutput(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_CloneOutput(
      self,
    );
  }

  late final _ImDrawList_CloneOutputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImDrawList> Function(
              ffi.Pointer<ImDrawList>)>>('ImDrawList_CloneOutput');
  late final _ImDrawList_CloneOutput = _ImDrawList_CloneOutputPtr.asFunction<
      ffi.Pointer<ImDrawList> Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_ChannelsSplit(
    ffi.Pointer<ImDrawList> self,
    int count,
  ) {
    return _ImDrawList_ChannelsSplit(
      self,
      count,
    );
  }

  late final _ImDrawList_ChannelsSplitPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Int)>>(
      'ImDrawList_ChannelsSplit');
  late final _ImDrawList_ChannelsSplit = _ImDrawList_ChannelsSplitPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int)>();

  void ImDrawList_ChannelsMerge(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList_ChannelsMerge(
      self,
    );
  }

  late final _ImDrawList_ChannelsMergePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList_ChannelsMerge');
  late final _ImDrawList_ChannelsMerge = _ImDrawList_ChannelsMergePtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList_ChannelsSetCurrent(
    ffi.Pointer<ImDrawList> self,
    int n,
  ) {
    return _ImDrawList_ChannelsSetCurrent(
      self,
      n,
    );
  }

  late final _ImDrawList_ChannelsSetCurrentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Int)>>(
      'ImDrawList_ChannelsSetCurrent');
  late final _ImDrawList_ChannelsSetCurrent = _ImDrawList_ChannelsSetCurrentPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int)>();

  void ImDrawList_PrimReserve(
    ffi.Pointer<ImDrawList> self,
    int idx_count,
    int vtx_count,
  ) {
    return _ImDrawList_PrimReserve(
      self,
      idx_count,
      vtx_count,
    );
  }

  late final _ImDrawList_PrimReservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Int,
              ffi.Int)>>('ImDrawList_PrimReserve');
  late final _ImDrawList_PrimReserve = _ImDrawList_PrimReservePtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, int, int)>();

  void ImDrawList_PrimUnreserve(
    ffi.Pointer<ImDrawList> self,
    int idx_count,
    int vtx_count,
  ) {
    return _ImDrawList_PrimUnreserve(
      self,
      idx_count,
      vtx_count,
    );
  }

  late final _ImDrawList_PrimUnreservePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Int,
              ffi.Int)>>('ImDrawList_PrimUnreserve');
  late final _ImDrawList_PrimUnreserve = _ImDrawList_PrimUnreservePtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int, int)>();

  void ImDrawList_PrimRect(
    ffi.Pointer<ImDrawList> self,
    ImVec2 a,
    ImVec2 b,
    int col,
  ) {
    return _ImDrawList_PrimRect(
      self,
      a,
      b,
      col,
    );
  }

  late final _ImDrawList_PrimRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2,
              ImU32)>>('ImDrawList_PrimRect');
  late final _ImDrawList_PrimRect = _ImDrawList_PrimRectPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int)>();

  void ImDrawList_PrimRectUV(
    ffi.Pointer<ImDrawList> self,
    ImVec2 a,
    ImVec2 b,
    ImVec2 uv_a,
    ImVec2 uv_b,
    int col,
  ) {
    return _ImDrawList_PrimRectUV(
      self,
      a,
      b,
      uv_a,
      uv_b,
      col,
    );
  }

  late final _ImDrawList_PrimRectUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2,
              ImVec2, ImU32)>>('ImDrawList_PrimRectUV');
  late final _ImDrawList_PrimRectUV = _ImDrawList_PrimRectUVPtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_PrimQuadUV(
    ffi.Pointer<ImDrawList> self,
    ImVec2 a,
    ImVec2 b,
    ImVec2 c,
    ImVec2 d,
    ImVec2 uv_a,
    ImVec2 uv_b,
    ImVec2 uv_c,
    ImVec2 uv_d,
    int col,
  ) {
    return _ImDrawList_PrimQuadUV(
      self,
      a,
      b,
      c,
      d,
      uv_a,
      uv_b,
      uv_c,
      uv_d,
      col,
    );
  }

  late final _ImDrawList_PrimQuadUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ImU32)>>('ImDrawList_PrimQuadUV');
  late final _ImDrawList_PrimQuadUV = _ImDrawList_PrimQuadUVPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ImVec2, ImVec2,
          ImVec2, ImVec2, ImVec2, ImVec2, int)>();

  void ImDrawList_PrimWriteVtx(
    ffi.Pointer<ImDrawList> self,
    ImVec2 pos,
    ImVec2 uv,
    int col,
  ) {
    return _ImDrawList_PrimWriteVtx(
      self,
      pos,
      uv,
      col,
    );
  }

  late final _ImDrawList_PrimWriteVtxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2,
              ImU32)>>('ImDrawList_PrimWriteVtx');
  late final _ImDrawList_PrimWriteVtx = _ImDrawList_PrimWriteVtxPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int)>();

  void ImDrawList_PrimWriteIdx(
    ffi.Pointer<ImDrawList> self,
    int idx,
  ) {
    return _ImDrawList_PrimWriteIdx(
      self,
      idx,
    );
  }

  late final _ImDrawList_PrimWriteIdxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>, ImDrawIdx)>>('ImDrawList_PrimWriteIdx');
  late final _ImDrawList_PrimWriteIdx = _ImDrawList_PrimWriteIdxPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, int)>();

  void ImDrawList_PrimVtx(
    ffi.Pointer<ImDrawList> self,
    ImVec2 pos,
    ImVec2 uv,
    int col,
  ) {
    return _ImDrawList_PrimVtx(
      self,
      pos,
      uv,
      col,
    );
  }

  late final _ImDrawList_PrimVtxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2,
              ImU32)>>('ImDrawList_PrimVtx');
  late final _ImDrawList_PrimVtx = _ImDrawList_PrimVtxPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int)>();

  void ImDrawList__ResetForNewFrame(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__ResetForNewFrame(
      self,
    );
  }

  late final _ImDrawList__ResetForNewFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__ResetForNewFrame');
  late final _ImDrawList__ResetForNewFrame = _ImDrawList__ResetForNewFramePtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__ClearFreeMemory(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__ClearFreeMemory(
      self,
    );
  }

  late final _ImDrawList__ClearFreeMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__ClearFreeMemory');
  late final _ImDrawList__ClearFreeMemory = _ImDrawList__ClearFreeMemoryPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__PopUnusedDrawCmd(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__PopUnusedDrawCmd(
      self,
    );
  }

  late final _ImDrawList__PopUnusedDrawCmdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__PopUnusedDrawCmd');
  late final _ImDrawList__PopUnusedDrawCmd = _ImDrawList__PopUnusedDrawCmdPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__TryMergeDrawCmds(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__TryMergeDrawCmds(
      self,
    );
  }

  late final _ImDrawList__TryMergeDrawCmdsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__TryMergeDrawCmds');
  late final _ImDrawList__TryMergeDrawCmds = _ImDrawList__TryMergeDrawCmdsPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__OnChangedClipRect(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__OnChangedClipRect(
      self,
    );
  }

  late final _ImDrawList__OnChangedClipRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__OnChangedClipRect');
  late final _ImDrawList__OnChangedClipRect = _ImDrawList__OnChangedClipRectPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__OnChangedTextureID(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__OnChangedTextureID(
      self,
    );
  }

  late final _ImDrawList__OnChangedTextureIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__OnChangedTextureID');
  late final _ImDrawList__OnChangedTextureID =
      _ImDrawList__OnChangedTextureIDPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__OnChangedVtxOffset(
    ffi.Pointer<ImDrawList> self,
  ) {
    return _ImDrawList__OnChangedVtxOffset(
      self,
    );
  }

  late final _ImDrawList__OnChangedVtxOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'ImDrawList__OnChangedVtxOffset');
  late final _ImDrawList__OnChangedVtxOffset =
      _ImDrawList__OnChangedVtxOffsetPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>)>();

  void ImDrawList__SetTextureID(
    ffi.Pointer<ImDrawList> self,
    int texture_id,
  ) {
    return _ImDrawList__SetTextureID(
      self,
      texture_id,
    );
  }

  late final _ImDrawList__SetTextureIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>,
              ImTextureID)>>('ImDrawList__SetTextureID');
  late final _ImDrawList__SetTextureID = _ImDrawList__SetTextureIDPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, int)>();

  int ImDrawList__CalcCircleAutoSegmentCount(
    ffi.Pointer<ImDrawList> self,
    double radius,
  ) {
    return _ImDrawList__CalcCircleAutoSegmentCount(
      self,
      radius,
    );
  }

  late final _ImDrawList__CalcCircleAutoSegmentCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ImDrawList>,
              ffi.Float)>>('ImDrawList__CalcCircleAutoSegmentCount');
  late final _ImDrawList__CalcCircleAutoSegmentCount =
      _ImDrawList__CalcCircleAutoSegmentCountPtr.asFunction<
          int Function(ffi.Pointer<ImDrawList>, double)>();

  void ImDrawList__PathArcToFastEx(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    int a_min_sample,
    int a_max_sample,
    int a_step,
  ) {
    return _ImDrawList__PathArcToFastEx(
      self,
      center,
      radius,
      a_min_sample,
      a_max_sample,
      a_step,
    );
  }

  late final _ImDrawList__PathArcToFastExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float, ffi.Int,
              ffi.Int, ffi.Int)>>('ImDrawList__PathArcToFastEx');
  late final _ImDrawList__PathArcToFastEx =
      _ImDrawList__PathArcToFastExPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImVec2, double, int, int, int)>();

  void ImDrawList__PathArcToN(
    ffi.Pointer<ImDrawList> self,
    ImVec2 center,
    double radius,
    double a_min,
    double a_max,
    int num_segments,
  ) {
    return _ImDrawList__PathArcToN(
      self,
      center,
      radius,
      a_min,
      a_max,
      num_segments,
    );
  }

  late final _ImDrawList__PathArcToNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float,
              ffi.Float, ffi.Float, ffi.Int)>>('ImDrawList__PathArcToN');
  late final _ImDrawList__PathArcToN = _ImDrawList__PathArcToNPtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>, ImVec2, double, double, double, int)>();

  ffi.Pointer<ImDrawData> ImDrawData_ImDrawData() {
    return _ImDrawData_ImDrawData();
  }

  late final _ImDrawData_ImDrawDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawData> Function()>>(
          'ImDrawData_ImDrawData');
  late final _ImDrawData_ImDrawData = _ImDrawData_ImDrawDataPtr.asFunction<
      ffi.Pointer<ImDrawData> Function()>();

  void ImDrawData_destroy(
    ffi.Pointer<ImDrawData> self,
  ) {
    return _ImDrawData_destroy(
      self,
    );
  }

  late final _ImDrawData_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawData>)>>(
          'ImDrawData_destroy');
  late final _ImDrawData_destroy = _ImDrawData_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImDrawData>)>();

  void ImDrawData_Clear(
    ffi.Pointer<ImDrawData> self,
  ) {
    return _ImDrawData_Clear(
      self,
    );
  }

  late final _ImDrawData_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawData>)>>(
          'ImDrawData_Clear');
  late final _ImDrawData_Clear =
      _ImDrawData_ClearPtr.asFunction<void Function(ffi.Pointer<ImDrawData>)>();

  void ImDrawData_AddDrawList(
    ffi.Pointer<ImDrawData> self,
    ffi.Pointer<ImDrawList> draw_list,
  ) {
    return _ImDrawData_AddDrawList(
      self,
      draw_list,
    );
  }

  late final _ImDrawData_AddDrawListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawData>,
              ffi.Pointer<ImDrawList>)>>('ImDrawData_AddDrawList');
  late final _ImDrawData_AddDrawList = _ImDrawData_AddDrawListPtr.asFunction<
      void Function(ffi.Pointer<ImDrawData>, ffi.Pointer<ImDrawList>)>();

  void ImDrawData_DeIndexAllBuffers(
    ffi.Pointer<ImDrawData> self,
  ) {
    return _ImDrawData_DeIndexAllBuffers(
      self,
    );
  }

  late final _ImDrawData_DeIndexAllBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawData>)>>(
          'ImDrawData_DeIndexAllBuffers');
  late final _ImDrawData_DeIndexAllBuffers = _ImDrawData_DeIndexAllBuffersPtr
      .asFunction<void Function(ffi.Pointer<ImDrawData>)>();

  void ImDrawData_ScaleClipRects(
    ffi.Pointer<ImDrawData> self,
    ImVec2 fb_scale,
  ) {
    return _ImDrawData_ScaleClipRects(
      self,
      fb_scale,
    );
  }

  late final _ImDrawData_ScaleClipRectsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawData>, ImVec2)>>(
      'ImDrawData_ScaleClipRects');
  late final _ImDrawData_ScaleClipRects = _ImDrawData_ScaleClipRectsPtr
      .asFunction<void Function(ffi.Pointer<ImDrawData>, ImVec2)>();

  ffi.Pointer<ImFontConfig> ImFontConfig_ImFontConfig() {
    return _ImFontConfig_ImFontConfig();
  }

  late final _ImFontConfig_ImFontConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImFontConfig> Function()>>(
          'ImFontConfig_ImFontConfig');
  late final _ImFontConfig_ImFontConfig = _ImFontConfig_ImFontConfigPtr
      .asFunction<ffi.Pointer<ImFontConfig> Function()>();

  void ImFontConfig_destroy(
    ffi.Pointer<ImFontConfig> self,
  ) {
    return _ImFontConfig_destroy(
      self,
    );
  }

  late final _ImFontConfig_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontConfig>)>>(
          'ImFontConfig_destroy');
  late final _ImFontConfig_destroy = _ImFontConfig_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImFontConfig>)>();

  ffi.Pointer<ImFontGlyphRangesBuilder>
      ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() {
    return _ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder();
  }

  late final _ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilderPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImFontGlyphRangesBuilder> Function()>>(
      'ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder');
  late final _ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder =
      _ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilderPtr.asFunction<
          ffi.Pointer<ImFontGlyphRangesBuilder> Function()>();

  void ImFontGlyphRangesBuilder_destroy(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
  ) {
    return _ImFontGlyphRangesBuilder_destroy(
      self,
    );
  }

  late final _ImFontGlyphRangesBuilder_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImFontGlyphRangesBuilder>)>>(
      'ImFontGlyphRangesBuilder_destroy');
  late final _ImFontGlyphRangesBuilder_destroy =
      _ImFontGlyphRangesBuilder_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImFontGlyphRangesBuilder>)>();

  void ImFontGlyphRangesBuilder_Clear(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
  ) {
    return _ImFontGlyphRangesBuilder_Clear(
      self,
    );
  }

  late final _ImFontGlyphRangesBuilder_ClearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImFontGlyphRangesBuilder>)>>(
      'ImFontGlyphRangesBuilder_Clear');
  late final _ImFontGlyphRangesBuilder_Clear =
      _ImFontGlyphRangesBuilder_ClearPtr.asFunction<
          void Function(ffi.Pointer<ImFontGlyphRangesBuilder>)>();

  bool ImFontGlyphRangesBuilder_GetBit(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
    int n,
  ) {
    return _ImFontGlyphRangesBuilder_GetBit(
      self,
      n,
    );
  }

  late final _ImFontGlyphRangesBuilder_GetBitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
              ffi.Size)>>('ImFontGlyphRangesBuilder_GetBit');
  late final _ImFontGlyphRangesBuilder_GetBit =
      _ImFontGlyphRangesBuilder_GetBitPtr.asFunction<
          bool Function(ffi.Pointer<ImFontGlyphRangesBuilder>, int)>();

  void ImFontGlyphRangesBuilder_SetBit(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
    int n,
  ) {
    return _ImFontGlyphRangesBuilder_SetBit(
      self,
      n,
    );
  }

  late final _ImFontGlyphRangesBuilder_SetBitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
              ffi.Size)>>('ImFontGlyphRangesBuilder_SetBit');
  late final _ImFontGlyphRangesBuilder_SetBit =
      _ImFontGlyphRangesBuilder_SetBitPtr.asFunction<
          void Function(ffi.Pointer<ImFontGlyphRangesBuilder>, int)>();

  void ImFontGlyphRangesBuilder_AddChar(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
    int c,
  ) {
    return _ImFontGlyphRangesBuilder_AddChar(
      self,
      c,
    );
  }

  late final _ImFontGlyphRangesBuilder_AddCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
              ImWchar)>>('ImFontGlyphRangesBuilder_AddChar');
  late final _ImFontGlyphRangesBuilder_AddChar =
      _ImFontGlyphRangesBuilder_AddCharPtr.asFunction<
          void Function(ffi.Pointer<ImFontGlyphRangesBuilder>, int)>();

  void ImFontGlyphRangesBuilder_AddText(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _ImFontGlyphRangesBuilder_AddText(
      self,
      text,
      text_end,
    );
  }

  late final _ImFontGlyphRangesBuilder_AddTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontGlyphRangesBuilder>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ImFontGlyphRangesBuilder_AddText');
  late final _ImFontGlyphRangesBuilder_AddText =
      _ImFontGlyphRangesBuilder_AddTextPtr.asFunction<
          void Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void ImFontGlyphRangesBuilder_AddRanges(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
    ffi.Pointer<ImWchar> ranges,
  ) {
    return _ImFontGlyphRangesBuilder_AddRanges(
      self,
      ranges,
    );
  }

  late final _ImFontGlyphRangesBuilder_AddRangesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
              ffi.Pointer<ImWchar>)>>('ImFontGlyphRangesBuilder_AddRanges');
  late final _ImFontGlyphRangesBuilder_AddRanges =
      _ImFontGlyphRangesBuilder_AddRangesPtr.asFunction<
          void Function(
              ffi.Pointer<ImFontGlyphRangesBuilder>, ffi.Pointer<ImWchar>)>();

  void ImFontGlyphRangesBuilder_BuildRanges(
    ffi.Pointer<ImFontGlyphRangesBuilder> self,
    ffi.Pointer<ImVector_ImWchar> out_ranges,
  ) {
    return _ImFontGlyphRangesBuilder_BuildRanges(
      self,
      out_ranges,
    );
  }

  late final _ImFontGlyphRangesBuilder_BuildRangesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
                  ffi.Pointer<ImVector_ImWchar>)>>(
      'ImFontGlyphRangesBuilder_BuildRanges');
  late final _ImFontGlyphRangesBuilder_BuildRanges =
      _ImFontGlyphRangesBuilder_BuildRangesPtr.asFunction<
          void Function(ffi.Pointer<ImFontGlyphRangesBuilder>,
              ffi.Pointer<ImVector_ImWchar>)>();

  ffi.Pointer<ImFontAtlasCustomRect>
      ImFontAtlasCustomRect_ImFontAtlasCustomRect() {
    return _ImFontAtlasCustomRect_ImFontAtlasCustomRect();
  }

  late final _ImFontAtlasCustomRect_ImFontAtlasCustomRectPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImFontAtlasCustomRect> Function()>>(
      'ImFontAtlasCustomRect_ImFontAtlasCustomRect');
  late final _ImFontAtlasCustomRect_ImFontAtlasCustomRect =
      _ImFontAtlasCustomRect_ImFontAtlasCustomRectPtr.asFunction<
          ffi.Pointer<ImFontAtlasCustomRect> Function()>();

  void ImFontAtlasCustomRect_destroy(
    ffi.Pointer<ImFontAtlasCustomRect> self,
  ) {
    return _ImFontAtlasCustomRect_destroy(
      self,
    );
  }

  late final _ImFontAtlasCustomRect_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImFontAtlasCustomRect>)>>(
      'ImFontAtlasCustomRect_destroy');
  late final _ImFontAtlasCustomRect_destroy = _ImFontAtlasCustomRect_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImFontAtlasCustomRect>)>();

  bool ImFontAtlasCustomRect_IsPacked(
    ffi.Pointer<ImFontAtlasCustomRect> self,
  ) {
    return _ImFontAtlasCustomRect_IsPacked(
      self,
    );
  }

  late final _ImFontAtlasCustomRect_IsPackedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ImFontAtlasCustomRect>)>>(
      'ImFontAtlasCustomRect_IsPacked');
  late final _ImFontAtlasCustomRect_IsPacked =
      _ImFontAtlasCustomRect_IsPackedPtr.asFunction<
          bool Function(ffi.Pointer<ImFontAtlasCustomRect>)>();

  ffi.Pointer<ImFontAtlas> ImFontAtlas_ImFontAtlas() {
    return _ImFontAtlas_ImFontAtlas();
  }

  late final _ImFontAtlas_ImFontAtlasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImFontAtlas> Function()>>(
          'ImFontAtlas_ImFontAtlas');
  late final _ImFontAtlas_ImFontAtlas = _ImFontAtlas_ImFontAtlasPtr.asFunction<
      ffi.Pointer<ImFontAtlas> Function()>();

  void ImFontAtlas_destroy(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_destroy(
      self,
    );
  }

  late final _ImFontAtlas_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_destroy');
  late final _ImFontAtlas_destroy = _ImFontAtlas_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImFont> ImFontAtlas_AddFont(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ImFontConfig> font_cfg,
  ) {
    return _ImFontAtlas_AddFont(
      self,
      font_cfg,
    );
  }

  late final _ImFontAtlas_AddFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFont> Function(ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ImFontConfig>)>>('ImFontAtlas_AddFont');
  late final _ImFontAtlas_AddFont = _ImFontAtlas_AddFontPtr.asFunction<
      ffi.Pointer<ImFont> Function(
          ffi.Pointer<ImFontAtlas>, ffi.Pointer<ImFontConfig>)>();

  ffi.Pointer<ImFont> ImFontAtlas_AddFontDefault(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ImFontConfig> font_cfg,
  ) {
    return _ImFontAtlas_AddFontDefault(
      self,
      font_cfg,
    );
  }

  late final _ImFontAtlas_AddFontDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFont> Function(ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ImFontConfig>)>>('ImFontAtlas_AddFontDefault');
  late final _ImFontAtlas_AddFontDefault =
      _ImFontAtlas_AddFontDefaultPtr.asFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>, ffi.Pointer<ImFontConfig>)>();

  ffi.Pointer<ImFont> ImFontAtlas_AddFontFromFileTTF(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ffi.Char> filename,
    double size_pixels,
    ffi.Pointer<ImFontConfig> font_cfg,
    ffi.Pointer<ImWchar> glyph_ranges,
  ) {
    return _ImFontAtlas_AddFontFromFileTTF(
      self,
      filename,
      size_pixels,
      font_cfg,
      glyph_ranges,
    );
  }

  late final _ImFontAtlas_AddFontFromFileTTFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Pointer<ImFontConfig>,
              ffi.Pointer<ImWchar>)>>('ImFontAtlas_AddFontFromFileTTF');
  late final _ImFontAtlas_AddFontFromFileTTF =
      _ImFontAtlas_AddFontFromFileTTFPtr.asFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Char>,
              double,
              ffi.Pointer<ImFontConfig>,
              ffi.Pointer<ImWchar>)>();

  ffi.Pointer<ImFont> ImFontAtlas_AddFontFromMemoryTTF(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ffi.Void> font_data,
    int font_data_size,
    double size_pixels,
    ffi.Pointer<ImFontConfig> font_cfg,
    ffi.Pointer<ImWchar> glyph_ranges,
  ) {
    return _ImFontAtlas_AddFontFromMemoryTTF(
      self,
      font_data,
      font_data_size,
      size_pixels,
      font_cfg,
      glyph_ranges,
    );
  }

  late final _ImFontAtlas_AddFontFromMemoryTTFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Float,
              ffi.Pointer<ImFontConfig>,
              ffi.Pointer<ImWchar>)>>('ImFontAtlas_AddFontFromMemoryTTF');
  late final _ImFontAtlas_AddFontFromMemoryTTF =
      _ImFontAtlas_AddFontFromMemoryTTFPtr.asFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Void>,
              int,
              double,
              ffi.Pointer<ImFontConfig>,
              ffi.Pointer<ImWchar>)>();

  ffi.Pointer<ImFont> ImFontAtlas_AddFontFromMemoryCompressedTTF(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ffi.Void> compressed_font_data,
    int compressed_font_data_size,
    double size_pixels,
    ffi.Pointer<ImFontConfig> font_cfg,
    ffi.Pointer<ImWchar> glyph_ranges,
  ) {
    return _ImFontAtlas_AddFontFromMemoryCompressedTTF(
      self,
      compressed_font_data,
      compressed_font_data_size,
      size_pixels,
      font_cfg,
      glyph_ranges,
    );
  }

  late final _ImFontAtlas_AddFontFromMemoryCompressedTTFPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImFont> Function(
                  ffi.Pointer<ImFontAtlas>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int,
                  ffi.Float,
                  ffi.Pointer<ImFontConfig>,
                  ffi.Pointer<ImWchar>)>>(
      'ImFontAtlas_AddFontFromMemoryCompressedTTF');
  late final _ImFontAtlas_AddFontFromMemoryCompressedTTF =
      _ImFontAtlas_AddFontFromMemoryCompressedTTFPtr.asFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Void>,
              int,
              double,
              ffi.Pointer<ImFontConfig>,
              ffi.Pointer<ImWchar>)>();

  ffi.Pointer<ImFont> ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ffi.Char> compressed_font_data_base85,
    double size_pixels,
    ffi.Pointer<ImFontConfig> font_cfg,
    ffi.Pointer<ImWchar> glyph_ranges,
  ) {
    return _ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
      self,
      compressed_font_data_base85,
      size_pixels,
      font_cfg,
      glyph_ranges,
    );
  }

  late final _ImFontAtlas_AddFontFromMemoryCompressedBase85TTFPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImFont> Function(
                  ffi.Pointer<ImFontAtlas>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Float,
                  ffi.Pointer<ImFontConfig>,
                  ffi.Pointer<ImWchar>)>>(
      'ImFontAtlas_AddFontFromMemoryCompressedBase85TTF');
  late final _ImFontAtlas_AddFontFromMemoryCompressedBase85TTF =
      _ImFontAtlas_AddFontFromMemoryCompressedBase85TTFPtr.asFunction<
          ffi.Pointer<ImFont> Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Char>,
              double,
              ffi.Pointer<ImFontConfig>,
              ffi.Pointer<ImWchar>)>();

  void ImFontAtlas_ClearInputData(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_ClearInputData(
      self,
    );
  }

  late final _ImFontAtlas_ClearInputDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_ClearInputData');
  late final _ImFontAtlas_ClearInputData = _ImFontAtlas_ClearInputDataPtr
      .asFunction<void Function(ffi.Pointer<ImFontAtlas>)>();

  void ImFontAtlas_ClearTexData(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_ClearTexData(
      self,
    );
  }

  late final _ImFontAtlas_ClearTexDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_ClearTexData');
  late final _ImFontAtlas_ClearTexData = _ImFontAtlas_ClearTexDataPtr
      .asFunction<void Function(ffi.Pointer<ImFontAtlas>)>();

  void ImFontAtlas_ClearFonts(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_ClearFonts(
      self,
    );
  }

  late final _ImFontAtlas_ClearFontsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_ClearFonts');
  late final _ImFontAtlas_ClearFonts = _ImFontAtlas_ClearFontsPtr.asFunction<
      void Function(ffi.Pointer<ImFontAtlas>)>();

  void ImFontAtlas_Clear(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_Clear(
      self,
    );
  }

  late final _ImFontAtlas_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_Clear');
  late final _ImFontAtlas_Clear = _ImFontAtlas_ClearPtr.asFunction<
      void Function(ffi.Pointer<ImFontAtlas>)>();

  bool ImFontAtlas_Build(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_Build(
      self,
    );
  }

  late final _ImFontAtlas_BuildPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_Build');
  late final _ImFontAtlas_Build = _ImFontAtlas_BuildPtr.asFunction<
      bool Function(ffi.Pointer<ImFontAtlas>)>();

  void ImFontAtlas_GetTexDataAsAlpha8(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out_pixels,
    ffi.Pointer<ffi.Int> out_width,
    ffi.Pointer<ffi.Int> out_height,
    ffi.Pointer<ffi.Int> out_bytes_per_pixel,
  ) {
    return _ImFontAtlas_GetTexDataAsAlpha8(
      self,
      out_pixels,
      out_width,
      out_height,
      out_bytes_per_pixel,
    );
  }

  late final _ImFontAtlas_GetTexDataAsAlpha8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ImFontAtlas_GetTexDataAsAlpha8');
  late final _ImFontAtlas_GetTexDataAsAlpha8 =
      _ImFontAtlas_GetTexDataAsAlpha8Ptr.asFunction<
          void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  void ImFontAtlas_GetTexDataAsRGBA32(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>> out_pixels,
    ffi.Pointer<ffi.Int> out_width,
    ffi.Pointer<ffi.Int> out_height,
    ffi.Pointer<ffi.Int> out_bytes_per_pixel,
  ) {
    return _ImFontAtlas_GetTexDataAsRGBA32(
      self,
      out_pixels,
      out_width,
      out_height,
      out_bytes_per_pixel,
    );
  }

  late final _ImFontAtlas_GetTexDataAsRGBA32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ImFontAtlas_GetTexDataAsRGBA32');
  late final _ImFontAtlas_GetTexDataAsRGBA32 =
      _ImFontAtlas_GetTexDataAsRGBA32Ptr.asFunction<
          void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Pointer<ffi.UnsignedChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>();

  bool ImFontAtlas_IsBuilt(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_IsBuilt(
      self,
    );
  }

  late final _ImFontAtlas_IsBuiltPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImFontAtlas>)>>(
          'ImFontAtlas_IsBuilt');
  late final _ImFontAtlas_IsBuilt = _ImFontAtlas_IsBuiltPtr.asFunction<
      bool Function(ffi.Pointer<ImFontAtlas>)>();

  void ImFontAtlas_SetTexID(
    ffi.Pointer<ImFontAtlas> self,
    int id,
  ) {
    return _ImFontAtlas_SetTexID(
      self,
      id,
    );
  }

  late final _ImFontAtlas_SetTexIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>, ImTextureID)>>('ImFontAtlas_SetTexID');
  late final _ImFontAtlas_SetTexID = _ImFontAtlas_SetTexIDPtr.asFunction<
      void Function(ffi.Pointer<ImFontAtlas>, int)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesDefault(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesDefault(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImWchar> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImFontAtlas_GetGlyphRangesDefault');
  late final _ImFontAtlas_GetGlyphRangesDefault =
      _ImFontAtlas_GetGlyphRangesDefaultPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesGreek(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesGreek(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesGreekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImWchar> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImFontAtlas_GetGlyphRangesGreek');
  late final _ImFontAtlas_GetGlyphRangesGreek =
      _ImFontAtlas_GetGlyphRangesGreekPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesKorean(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesKorean(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesKoreanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImWchar> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImFontAtlas_GetGlyphRangesKorean');
  late final _ImFontAtlas_GetGlyphRangesKorean =
      _ImFontAtlas_GetGlyphRangesKoreanPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesJapanese(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesJapanese(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesJapanesePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImWchar> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImFontAtlas_GetGlyphRangesJapanese');
  late final _ImFontAtlas_GetGlyphRangesJapanese =
      _ImFontAtlas_GetGlyphRangesJapanesePtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesChineseFull(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesChineseFull(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesChineseFullPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>>(
      'ImFontAtlas_GetGlyphRangesChineseFull');
  late final _ImFontAtlas_GetGlyphRangesChineseFull =
      _ImFontAtlas_GetGlyphRangesChineseFullPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesChineseSimplifiedCommonPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>>(
      'ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon');
  late final _ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon =
      _ImFontAtlas_GetGlyphRangesChineseSimplifiedCommonPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesCyrillic(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesCyrillic(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesCyrillicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImWchar> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImFontAtlas_GetGlyphRangesCyrillic');
  late final _ImFontAtlas_GetGlyphRangesCyrillic =
      _ImFontAtlas_GetGlyphRangesCyrillicPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesThai(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesThai(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesThaiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImWchar> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImFontAtlas_GetGlyphRangesThai');
  late final _ImFontAtlas_GetGlyphRangesThai =
      _ImFontAtlas_GetGlyphRangesThaiPtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  ffi.Pointer<ImWchar> ImFontAtlas_GetGlyphRangesVietnamese(
    ffi.Pointer<ImFontAtlas> self,
  ) {
    return _ImFontAtlas_GetGlyphRangesVietnamese(
      self,
    );
  }

  late final _ImFontAtlas_GetGlyphRangesVietnamesePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>>(
      'ImFontAtlas_GetGlyphRangesVietnamese');
  late final _ImFontAtlas_GetGlyphRangesVietnamese =
      _ImFontAtlas_GetGlyphRangesVietnamesePtr.asFunction<
          ffi.Pointer<ImWchar> Function(ffi.Pointer<ImFontAtlas>)>();

  int ImFontAtlas_AddCustomRectRegular(
    ffi.Pointer<ImFontAtlas> self,
    int width,
    int height,
  ) {
    return _ImFontAtlas_AddCustomRectRegular(
      self,
      width,
      height,
    );
  }

  late final _ImFontAtlas_AddCustomRectRegularPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ImFontAtlas>, ffi.Int,
              ffi.Int)>>('ImFontAtlas_AddCustomRectRegular');
  late final _ImFontAtlas_AddCustomRectRegular =
      _ImFontAtlas_AddCustomRectRegularPtr.asFunction<
          int Function(ffi.Pointer<ImFontAtlas>, int, int)>();

  int ImFontAtlas_AddCustomRectFontGlyph(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ImFont> font,
    int id,
    int width,
    int height,
    double advance_x,
    ImVec2 offset,
  ) {
    return _ImFontAtlas_AddCustomRectFontGlyph(
      self,
      font,
      id,
      width,
      height,
      advance_x,
      offset,
    );
  }

  late final _ImFontAtlas_AddCustomRectFontGlyphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ImFont>,
              ImWchar,
              ffi.Int,
              ffi.Int,
              ffi.Float,
              ImVec2)>>('ImFontAtlas_AddCustomRectFontGlyph');
  late final _ImFontAtlas_AddCustomRectFontGlyph =
      _ImFontAtlas_AddCustomRectFontGlyphPtr.asFunction<
          int Function(ffi.Pointer<ImFontAtlas>, ffi.Pointer<ImFont>, int, int,
              int, double, ImVec2)>();

  ffi.Pointer<ImFontAtlasCustomRect> ImFontAtlas_GetCustomRectByIndex(
    ffi.Pointer<ImFontAtlas> self,
    int index,
  ) {
    return _ImFontAtlas_GetCustomRectByIndex(
      self,
      index,
    );
  }

  late final _ImFontAtlas_GetCustomRectByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFontAtlasCustomRect> Function(ffi.Pointer<ImFontAtlas>,
              ffi.Int)>>('ImFontAtlas_GetCustomRectByIndex');
  late final _ImFontAtlas_GetCustomRectByIndex =
      _ImFontAtlas_GetCustomRectByIndexPtr.asFunction<
          ffi.Pointer<ImFontAtlasCustomRect> Function(
              ffi.Pointer<ImFontAtlas>, int)>();

  void ImFontAtlas_CalcCustomRectUV(
    ffi.Pointer<ImFontAtlas> self,
    ffi.Pointer<ImFontAtlasCustomRect> rect,
    ffi.Pointer<ImVec2> out_uv_min,
    ffi.Pointer<ImVec2> out_uv_max,
  ) {
    return _ImFontAtlas_CalcCustomRectUV(
      self,
      rect,
      out_uv_min,
      out_uv_max,
    );
  }

  late final _ImFontAtlas_CalcCustomRectUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ImFontAtlasCustomRect>,
              ffi.Pointer<ImVec2>,
              ffi.Pointer<ImVec2>)>>('ImFontAtlas_CalcCustomRectUV');
  late final _ImFontAtlas_CalcCustomRectUV =
      _ImFontAtlas_CalcCustomRectUVPtr.asFunction<
          void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ImFontAtlasCustomRect>,
              ffi.Pointer<ImVec2>,
              ffi.Pointer<ImVec2>)>();

  bool ImFontAtlas_GetMouseCursorTexData(
    ffi.Pointer<ImFontAtlas> self,
    int cursor,
    ffi.Pointer<ImVec2> out_offset,
    ffi.Pointer<ImVec2> out_size,
    ffi.Pointer<ImVec2> out_uv_border,
    ffi.Pointer<ImVec2> out_uv_fill,
  ) {
    return _ImFontAtlas_GetMouseCursorTexData(
      self,
      cursor,
      out_offset,
      out_size,
      out_uv_border,
      out_uv_fill,
    );
  }

  late final _ImFontAtlas_GetMouseCursorTexDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ImFontAtlas>,
              ImGuiMouseCursor,
              ffi.Pointer<ImVec2>,
              ffi.Pointer<ImVec2>,
              ffi.Pointer<ImVec2>,
              ffi.Pointer<ImVec2>)>>('ImFontAtlas_GetMouseCursorTexData');
  late final _ImFontAtlas_GetMouseCursorTexData =
      _ImFontAtlas_GetMouseCursorTexDataPtr.asFunction<
          bool Function(ffi.Pointer<ImFontAtlas>, int, ffi.Pointer<ImVec2>,
              ffi.Pointer<ImVec2>, ffi.Pointer<ImVec2>, ffi.Pointer<ImVec2>)>();

  ffi.Pointer<ImFont> ImFont_ImFont() {
    return _ImFont_ImFont();
  }

  late final _ImFont_ImFontPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImFont> Function()>>(
          'ImFont_ImFont');
  late final _ImFont_ImFont =
      _ImFont_ImFontPtr.asFunction<ffi.Pointer<ImFont> Function()>();

  void ImFont_destroy(
    ffi.Pointer<ImFont> self,
  ) {
    return _ImFont_destroy(
      self,
    );
  }

  late final _ImFont_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>)>>(
          'ImFont_destroy');
  late final _ImFont_destroy =
      _ImFont_destroyPtr.asFunction<void Function(ffi.Pointer<ImFont>)>();

  ffi.Pointer<ImFontGlyph> ImFont_FindGlyph(
    ffi.Pointer<ImFont> self,
    int c,
  ) {
    return _ImFont_FindGlyph(
      self,
      c,
    );
  }

  late final _ImFont_FindGlyphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFontGlyph> Function(
              ffi.Pointer<ImFont>, ImWchar)>>('ImFont_FindGlyph');
  late final _ImFont_FindGlyph = _ImFont_FindGlyphPtr.asFunction<
      ffi.Pointer<ImFontGlyph> Function(ffi.Pointer<ImFont>, int)>();

  ffi.Pointer<ImFontGlyph> ImFont_FindGlyphNoFallback(
    ffi.Pointer<ImFont> self,
    int c,
  ) {
    return _ImFont_FindGlyphNoFallback(
      self,
      c,
    );
  }

  late final _ImFont_FindGlyphNoFallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImFontGlyph> Function(
              ffi.Pointer<ImFont>, ImWchar)>>('ImFont_FindGlyphNoFallback');
  late final _ImFont_FindGlyphNoFallback =
      _ImFont_FindGlyphNoFallbackPtr.asFunction<
          ffi.Pointer<ImFontGlyph> Function(ffi.Pointer<ImFont>, int)>();

  double ImFont_GetCharAdvance(
    ffi.Pointer<ImFont> self,
    int c,
  ) {
    return _ImFont_GetCharAdvance(
      self,
      c,
    );
  }

  late final _ImFont_GetCharAdvancePtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ImFont>, ImWchar)>>(
      'ImFont_GetCharAdvance');
  late final _ImFont_GetCharAdvance = _ImFont_GetCharAdvancePtr.asFunction<
      double Function(ffi.Pointer<ImFont>, int)>();

  bool ImFont_IsLoaded(
    ffi.Pointer<ImFont> self,
  ) {
    return _ImFont_IsLoaded(
      self,
    );
  }

  late final _ImFont_IsLoadedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImFont>)>>(
          'ImFont_IsLoaded');
  late final _ImFont_IsLoaded =
      _ImFont_IsLoadedPtr.asFunction<bool Function(ffi.Pointer<ImFont>)>();

  ffi.Pointer<ffi.Char> ImFont_GetDebugName(
    ffi.Pointer<ImFont> self,
  ) {
    return _ImFont_GetDebugName(
      self,
    );
  }

  late final _ImFont_GetDebugNamePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImFont>)>>(
      'ImFont_GetDebugName');
  late final _ImFont_GetDebugName = _ImFont_GetDebugNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImFont>)>();

  void ImFont_CalcTextSizeA(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImFont> self,
    double size,
    double max_width,
    double wrap_width,
    ffi.Pointer<ffi.Char> text_begin,
    ffi.Pointer<ffi.Char> text_end,
    ffi.Pointer<ffi.Pointer<ffi.Char>> remaining,
  ) {
    return _ImFont_CalcTextSizeA(
      pOut,
      self,
      size,
      max_width,
      wrap_width,
      text_begin,
      text_end,
      remaining,
    );
  }

  late final _ImFont_CalcTextSizeAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>,
              ffi.Pointer<ImFont>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('ImFont_CalcTextSizeA');
  late final _ImFont_CalcTextSizeA = _ImFont_CalcTextSizeAPtr.asFunction<
      void Function(
          ffi.Pointer<ImVec2>,
          ffi.Pointer<ImFont>,
          double,
          double,
          double,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> ImFont_CalcWordWrapPositionA(
    ffi.Pointer<ImFont> self,
    double scale,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    double wrap_width,
  ) {
    return _ImFont_CalcWordWrapPositionA(
      self,
      scale,
      text,
      text_end,
      wrap_width,
    );
  }

  late final _ImFont_CalcWordWrapPositionAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImFont>,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Float)>>('ImFont_CalcWordWrapPositionA');
  late final _ImFont_CalcWordWrapPositionA =
      _ImFont_CalcWordWrapPositionAPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImFont>, double,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, double)>();

  void ImFont_RenderChar(
    ffi.Pointer<ImFont> self,
    ffi.Pointer<ImDrawList> draw_list,
    double size,
    ImVec2 pos,
    int col,
    int c,
  ) {
    return _ImFont_RenderChar(
      self,
      draw_list,
      size,
      pos,
      col,
      c,
    );
  }

  late final _ImFont_RenderCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFont>, ffi.Pointer<ImDrawList>,
              ffi.Float, ImVec2, ImU32, ImWchar)>>('ImFont_RenderChar');
  late final _ImFont_RenderChar = _ImFont_RenderCharPtr.asFunction<
      void Function(ffi.Pointer<ImFont>, ffi.Pointer<ImDrawList>, double,
          ImVec2, int, int)>();

  void ImFont_RenderText(
    ffi.Pointer<ImFont> self,
    ffi.Pointer<ImDrawList> draw_list,
    double size,
    ImVec2 pos,
    int col,
    ImVec4 clip_rect,
    ffi.Pointer<ffi.Char> text_begin,
    ffi.Pointer<ffi.Char> text_end,
    double wrap_width,
    bool cpu_fine_clip,
  ) {
    return _ImFont_RenderText(
      self,
      draw_list,
      size,
      pos,
      col,
      clip_rect,
      text_begin,
      text_end,
      wrap_width,
      cpu_fine_clip,
    );
  }

  late final _ImFont_RenderTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFont>,
              ffi.Pointer<ImDrawList>,
              ffi.Float,
              ImVec2,
              ImU32,
              ImVec4,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Bool)>>('ImFont_RenderText');
  late final _ImFont_RenderText = _ImFont_RenderTextPtr.asFunction<
      void Function(
          ffi.Pointer<ImFont>,
          ffi.Pointer<ImDrawList>,
          double,
          ImVec2,
          int,
          ImVec4,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          double,
          bool)>();

  void ImFont_BuildLookupTable(
    ffi.Pointer<ImFont> self,
  ) {
    return _ImFont_BuildLookupTable(
      self,
    );
  }

  late final _ImFont_BuildLookupTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>)>>(
          'ImFont_BuildLookupTable');
  late final _ImFont_BuildLookupTable = _ImFont_BuildLookupTablePtr.asFunction<
      void Function(ffi.Pointer<ImFont>)>();

  void ImFont_ClearOutputData(
    ffi.Pointer<ImFont> self,
  ) {
    return _ImFont_ClearOutputData(
      self,
    );
  }

  late final _ImFont_ClearOutputDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>)>>(
          'ImFont_ClearOutputData');
  late final _ImFont_ClearOutputData = _ImFont_ClearOutputDataPtr.asFunction<
      void Function(ffi.Pointer<ImFont>)>();

  void ImFont_GrowIndex(
    ffi.Pointer<ImFont> self,
    int new_size,
  ) {
    return _ImFont_GrowIndex(
      self,
      new_size,
    );
  }

  late final _ImFont_GrowIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>, ffi.Int)>>(
      'ImFont_GrowIndex');
  late final _ImFont_GrowIndex = _ImFont_GrowIndexPtr.asFunction<
      void Function(ffi.Pointer<ImFont>, int)>();

  void ImFont_AddGlyph(
    ffi.Pointer<ImFont> self,
    ffi.Pointer<ImFontConfig> src_cfg,
    int c,
    double x0,
    double y0,
    double x1,
    double y1,
    double u0,
    double v0,
    double u1,
    double v1,
    double advance_x,
  ) {
    return _ImFont_AddGlyph(
      self,
      src_cfg,
      c,
      x0,
      y0,
      x1,
      y1,
      u0,
      v0,
      u1,
      v1,
      advance_x,
    );
  }

  late final _ImFont_AddGlyphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFont>,
              ffi.Pointer<ImFontConfig>,
              ImWchar,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ImFont_AddGlyph');
  late final _ImFont_AddGlyph = _ImFont_AddGlyphPtr.asFunction<
      void Function(ffi.Pointer<ImFont>, ffi.Pointer<ImFontConfig>, int, double,
          double, double, double, double, double, double, double, double)>();

  void ImFont_AddRemapChar(
    ffi.Pointer<ImFont> self,
    int dst,
    int src,
    bool overwrite_dst,
  ) {
    return _ImFont_AddRemapChar(
      self,
      dst,
      src,
      overwrite_dst,
    );
  }

  late final _ImFont_AddRemapCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFont>, ImWchar, ImWchar,
              ffi.Bool)>>('ImFont_AddRemapChar');
  late final _ImFont_AddRemapChar = _ImFont_AddRemapCharPtr.asFunction<
      void Function(ffi.Pointer<ImFont>, int, int, bool)>();

  void ImFont_SetGlyphVisible(
    ffi.Pointer<ImFont> self,
    int c,
    bool visible,
  ) {
    return _ImFont_SetGlyphVisible(
      self,
      c,
      visible,
    );
  }

  late final _ImFont_SetGlyphVisiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFont>, ImWchar,
              ffi.Bool)>>('ImFont_SetGlyphVisible');
  late final _ImFont_SetGlyphVisible = _ImFont_SetGlyphVisiblePtr.asFunction<
      void Function(ffi.Pointer<ImFont>, int, bool)>();

  bool ImFont_IsGlyphRangeUnused(
    ffi.Pointer<ImFont> self,
    int c_begin,
    int c_last,
  ) {
    return _ImFont_IsGlyphRangeUnused(
      self,
      c_begin,
      c_last,
    );
  }

  late final _ImFont_IsGlyphRangeUnusedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImFont>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ImFont_IsGlyphRangeUnused');
  late final _ImFont_IsGlyphRangeUnused = _ImFont_IsGlyphRangeUnusedPtr
      .asFunction<bool Function(ffi.Pointer<ImFont>, int, int)>();

  ffi.Pointer<ImGuiViewport> ImGuiViewport_ImGuiViewport() {
    return _ImGuiViewport_ImGuiViewport();
  }

  late final _ImGuiViewport_ImGuiViewportPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiViewport> Function()>>(
          'ImGuiViewport_ImGuiViewport');
  late final _ImGuiViewport_ImGuiViewport = _ImGuiViewport_ImGuiViewportPtr
      .asFunction<ffi.Pointer<ImGuiViewport> Function()>();

  void ImGuiViewport_destroy(
    ffi.Pointer<ImGuiViewport> self,
  ) {
    return _ImGuiViewport_destroy(
      self,
    );
  }

  late final _ImGuiViewport_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport>)>>(
      'ImGuiViewport_destroy');
  late final _ImGuiViewport_destroy = _ImGuiViewport_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiViewport>)>();

  void ImGuiViewport_GetCenter(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiViewport> self,
  ) {
    return _ImGuiViewport_GetCenter(
      pOut,
      self,
    );
  }

  late final _ImGuiViewport_GetCenterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImGuiViewport>)>>('ImGuiViewport_GetCenter');
  late final _ImGuiViewport_GetCenter = _ImGuiViewport_GetCenterPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiViewport>)>();

  void ImGuiViewport_GetWorkCenter(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiViewport> self,
  ) {
    return _ImGuiViewport_GetWorkCenter(
      pOut,
      self,
    );
  }

  late final _ImGuiViewport_GetWorkCenterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImGuiViewport>)>>('ImGuiViewport_GetWorkCenter');
  late final _ImGuiViewport_GetWorkCenter =
      _ImGuiViewport_GetWorkCenterPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiViewport>)>();

  ffi.Pointer<ImGuiPlatformIO> ImGuiPlatformIO_ImGuiPlatformIO() {
    return _ImGuiPlatformIO_ImGuiPlatformIO();
  }

  late final _ImGuiPlatformIO_ImGuiPlatformIOPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPlatformIO> Function()>>(
          'ImGuiPlatformIO_ImGuiPlatformIO');
  late final _ImGuiPlatformIO_ImGuiPlatformIO =
      _ImGuiPlatformIO_ImGuiPlatformIOPtr.asFunction<
          ffi.Pointer<ImGuiPlatformIO> Function()>();

  void ImGuiPlatformIO_destroy(
    ffi.Pointer<ImGuiPlatformIO> self,
  ) {
    return _ImGuiPlatformIO_destroy(
      self,
    );
  }

  late final _ImGuiPlatformIO_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiPlatformIO>)>>(
      'ImGuiPlatformIO_destroy');
  late final _ImGuiPlatformIO_destroy = _ImGuiPlatformIO_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiPlatformIO>)>();

  ffi.Pointer<ImGuiPlatformMonitor>
      ImGuiPlatformMonitor_ImGuiPlatformMonitor() {
    return _ImGuiPlatformMonitor_ImGuiPlatformMonitor();
  }

  late final _ImGuiPlatformMonitor_ImGuiPlatformMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPlatformMonitor> Function()>>(
          'ImGuiPlatformMonitor_ImGuiPlatformMonitor');
  late final _ImGuiPlatformMonitor_ImGuiPlatformMonitor =
      _ImGuiPlatformMonitor_ImGuiPlatformMonitorPtr.asFunction<
          ffi.Pointer<ImGuiPlatformMonitor> Function()>();

  void ImGuiPlatformMonitor_destroy(
    ffi.Pointer<ImGuiPlatformMonitor> self,
  ) {
    return _ImGuiPlatformMonitor_destroy(
      self,
    );
  }

  late final _ImGuiPlatformMonitor_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiPlatformMonitor>)>>(
      'ImGuiPlatformMonitor_destroy');
  late final _ImGuiPlatformMonitor_destroy = _ImGuiPlatformMonitor_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiPlatformMonitor>)>();

  ffi.Pointer<ImGuiPlatformImeData>
      ImGuiPlatformImeData_ImGuiPlatformImeData() {
    return _ImGuiPlatformImeData_ImGuiPlatformImeData();
  }

  late final _ImGuiPlatformImeData_ImGuiPlatformImeDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPlatformImeData> Function()>>(
          'ImGuiPlatformImeData_ImGuiPlatformImeData');
  late final _ImGuiPlatformImeData_ImGuiPlatformImeData =
      _ImGuiPlatformImeData_ImGuiPlatformImeDataPtr.asFunction<
          ffi.Pointer<ImGuiPlatformImeData> Function()>();

  void ImGuiPlatformImeData_destroy(
    ffi.Pointer<ImGuiPlatformImeData> self,
  ) {
    return _ImGuiPlatformImeData_destroy(
      self,
    );
  }

  late final _ImGuiPlatformImeData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiPlatformImeData>)>>(
      'ImGuiPlatformImeData_destroy');
  late final _ImGuiPlatformImeData_destroy = _ImGuiPlatformImeData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiPlatformImeData>)>();

  int igImHashData(
    ffi.Pointer<ffi.Void> data,
    int data_size,
    int seed,
  ) {
    return _igImHashData(
      data,
      data_size,
      seed,
    );
  }

  late final _igImHashDataPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ImGuiID)>>('igImHashData');
  late final _igImHashData = _igImHashDataPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int igImHashStr(
    ffi.Pointer<ffi.Char> data,
    int data_size,
    int seed,
  ) {
    return _igImHashStr(
      data,
      data_size,
      seed,
    );
  }

  late final _igImHashStrPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(
              ffi.Pointer<ffi.Char>, ffi.Size, ImGuiID)>>('igImHashStr');
  late final _igImHashStr = _igImHashStrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, int)>();

  void igImQsort(
    ffi.Pointer<ffi.Void> base,
    int count,
    int size_of_element,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        compare_func,
  ) {
    return _igImQsort(
      base,
      count,
      size_of_element,
      compare_func,
    );
  }

  late final _igImQsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('igImQsort');
  late final _igImQsort = _igImQsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int igImAlphaBlendColors(
    int col_a,
    int col_b,
  ) {
    return _igImAlphaBlendColors(
      col_a,
      col_b,
    );
  }

  late final _igImAlphaBlendColorsPtr =
      _lookup<ffi.NativeFunction<ImU32 Function(ImU32, ImU32)>>(
          'igImAlphaBlendColors');
  late final _igImAlphaBlendColors =
      _igImAlphaBlendColorsPtr.asFunction<int Function(int, int)>();

  bool igImIsPowerOfTwo_Int(
    int v,
  ) {
    return _igImIsPowerOfTwo_Int(
      v,
    );
  }

  late final _igImIsPowerOfTwo_IntPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'igImIsPowerOfTwo_Int');
  late final _igImIsPowerOfTwo_Int =
      _igImIsPowerOfTwo_IntPtr.asFunction<bool Function(int)>();

  bool igImIsPowerOfTwo_U64(
    int v,
  ) {
    return _igImIsPowerOfTwo_U64(
      v,
    );
  }

  late final _igImIsPowerOfTwo_U64Ptr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImU64)>>(
          'igImIsPowerOfTwo_U64');
  late final _igImIsPowerOfTwo_U64 =
      _igImIsPowerOfTwo_U64Ptr.asFunction<bool Function(int)>();

  int igImUpperPowerOfTwo(
    int v,
  ) {
    return _igImUpperPowerOfTwo(
      v,
    );
  }

  late final _igImUpperPowerOfTwoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'igImUpperPowerOfTwo');
  late final _igImUpperPowerOfTwo =
      _igImUpperPowerOfTwoPtr.asFunction<int Function(int)>();

  int igImStricmp(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
  ) {
    return _igImStricmp(
      str1,
      str2,
    );
  }

  late final _igImStricmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('igImStricmp');
  late final _igImStricmp = _igImStricmpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int igImStrnicmp(
    ffi.Pointer<ffi.Char> str1,
    ffi.Pointer<ffi.Char> str2,
    int count,
  ) {
    return _igImStrnicmp(
      str1,
      str2,
      count,
    );
  }

  late final _igImStrnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('igImStrnicmp');
  late final _igImStrnicmp = _igImStrnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void igImStrncpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
    int count,
  ) {
    return _igImStrncpy(
      dst,
      src,
      count,
    );
  }

  late final _igImStrncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('igImStrncpy');
  late final _igImStrncpy = _igImStrncpyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> igImStrdup(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _igImStrdup(
      str,
    );
  }

  late final _igImStrdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('igImStrdup');
  late final _igImStrdup = _igImStrdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igImStrdupcpy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Size> p_dst_size,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _igImStrdupcpy(
      dst,
      p_dst_size,
      str,
    );
  }

  late final _igImStrdupcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>>('igImStrdupcpy');
  late final _igImStrdupcpy = _igImStrdupcpyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igImStrchrRange(
    ffi.Pointer<ffi.Char> str_begin,
    ffi.Pointer<ffi.Char> str_end,
    int c,
  ) {
    return _igImStrchrRange(
      str_begin,
      str_end,
      c,
    );
  }

  late final _igImStrchrRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Char)>>('igImStrchrRange');
  late final _igImStrchrRange = _igImStrchrRangePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> igImStreolRange(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> str_end,
  ) {
    return _igImStreolRange(
      str,
      str_end,
    );
  }

  late final _igImStreolRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImStreolRange');
  late final _igImStreolRange = _igImStreolRangePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igImStristr(
    ffi.Pointer<ffi.Char> haystack,
    ffi.Pointer<ffi.Char> haystack_end,
    ffi.Pointer<ffi.Char> needle,
    ffi.Pointer<ffi.Char> needle_end,
  ) {
    return _igImStristr(
      haystack,
      haystack_end,
      needle,
      needle_end,
    );
  }

  late final _igImStristrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImStristr');
  late final _igImStristr = _igImStristrPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void igImStrTrimBlanks(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _igImStrTrimBlanks(
      str,
    );
  }

  late final _igImStrTrimBlanksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igImStrTrimBlanks');
  late final _igImStrTrimBlanks =
      _igImStrTrimBlanksPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igImStrSkipBlank(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _igImStrSkipBlank(
      str,
    );
  }

  late final _igImStrSkipBlankPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('igImStrSkipBlank');
  late final _igImStrSkipBlank = _igImStrSkipBlankPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int igImStrlenW(
    ffi.Pointer<ImWchar> str,
  ) {
    return _igImStrlenW(
      str,
    );
  }

  late final _igImStrlenWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ImWchar>)>>(
          'igImStrlenW');
  late final _igImStrlenW =
      _igImStrlenWPtr.asFunction<int Function(ffi.Pointer<ImWchar>)>();

  ffi.Pointer<ffi.Char> igImStrbol(
    ffi.Pointer<ffi.Char> buf_mid_line,
    ffi.Pointer<ffi.Char> buf_begin,
  ) {
    return _igImStrbol(
      buf_mid_line,
      buf_begin,
    );
  }

  late final _igImStrbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('igImStrbol');
  late final _igImStrbol = _igImStrbolPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int igImToUpper(
    int c,
  ) {
    return _igImToUpper(
      c,
    );
  }

  late final _igImToUpperPtr =
      _lookup<ffi.NativeFunction<ffi.Char Function(ffi.Char)>>('igImToUpper');
  late final _igImToUpper = _igImToUpperPtr.asFunction<int Function(int)>();

  bool igImCharIsBlankA(
    int c,
  ) {
    return _igImCharIsBlankA(
      c,
    );
  }

  late final _igImCharIsBlankAPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Char)>>(
          'igImCharIsBlankA');
  late final _igImCharIsBlankA =
      _igImCharIsBlankAPtr.asFunction<bool Function(int)>();

  bool igImCharIsBlankW(
    int c,
  ) {
    return _igImCharIsBlankW(
      c,
    );
  }

  late final _igImCharIsBlankWPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igImCharIsBlankW');
  late final _igImCharIsBlankW =
      _igImCharIsBlankWPtr.asFunction<bool Function(int)>();

  bool igImCharIsXdigitA(
    int c,
  ) {
    return _igImCharIsXdigitA(
      c,
    );
  }

  late final _igImCharIsXdigitAPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Char)>>(
          'igImCharIsXdigitA');
  late final _igImCharIsXdigitA =
      _igImCharIsXdigitAPtr.asFunction<bool Function(int)>();

  int igImFormatString(
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igImFormatString(
      buf,
      buf_size,
      fmt,
    );
  }

  late final _igImFormatStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('igImFormatString');
  late final _igImFormatString = _igImFormatStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int igImFormatStringV(
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igImFormatStringV(
      buf,
      buf_size,
      fmt,
      args,
    );
  }

  late final _igImFormatStringVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igImFormatStringV');
  late final _igImFormatStringV = _igImFormatStringVPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void igImFormatStringToTempBuffer(
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_buf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_buf_end,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igImFormatStringToTempBuffer(
      out_buf,
      out_buf_end,
      fmt,
    );
  }

  late final _igImFormatStringToTempBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('igImFormatStringToTempBuffer');
  late final _igImFormatStringToTempBuffer =
      _igImFormatStringToTempBufferPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  void igImFormatStringToTempBufferV(
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_buf,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_buf_end,
    ffi.Pointer<ffi.Char> fmt,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _igImFormatStringToTempBufferV(
      out_buf,
      out_buf_end,
      fmt,
      args,
    );
  }

  late final _igImFormatStringToTempBufferVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('igImFormatStringToTempBufferV');
  late final _igImFormatStringToTempBufferV =
      _igImFormatStringToTempBufferVPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<ffi.Char> igImParseFormatFindStart(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _igImParseFormatFindStart(
      format,
    );
  }

  late final _igImParseFormatFindStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('igImParseFormatFindStart');
  late final _igImParseFormatFindStart = _igImParseFormatFindStartPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igImParseFormatFindEnd(
    ffi.Pointer<ffi.Char> format,
  ) {
    return _igImParseFormatFindEnd(
      format,
    );
  }

  late final _igImParseFormatFindEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('igImParseFormatFindEnd');
  late final _igImParseFormatFindEnd = _igImParseFormatFindEndPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> igImParseFormatTrimDecorations(
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
  ) {
    return _igImParseFormatTrimDecorations(
      format,
      buf,
      buf_size,
    );
  }

  late final _igImParseFormatTrimDecorationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('igImParseFormatTrimDecorations');
  late final _igImParseFormatTrimDecorations =
      _igImParseFormatTrimDecorationsPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void igImParseFormatSanitizeForPrinting(
    ffi.Pointer<ffi.Char> fmt_in,
    ffi.Pointer<ffi.Char> fmt_out,
    int fmt_out_size,
  ) {
    return _igImParseFormatSanitizeForPrinting(
      fmt_in,
      fmt_out,
      fmt_out_size,
    );
  }

  late final _igImParseFormatSanitizeForPrintingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('igImParseFormatSanitizeForPrinting');
  late final _igImParseFormatSanitizeForPrinting =
      _igImParseFormatSanitizeForPrintingPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> igImParseFormatSanitizeForScanning(
    ffi.Pointer<ffi.Char> fmt_in,
    ffi.Pointer<ffi.Char> fmt_out,
    int fmt_out_size,
  ) {
    return _igImParseFormatSanitizeForScanning(
      fmt_in,
      fmt_out,
      fmt_out_size,
    );
  }

  late final _igImParseFormatSanitizeForScanningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('igImParseFormatSanitizeForScanning');
  late final _igImParseFormatSanitizeForScanning =
      _igImParseFormatSanitizeForScanningPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int igImParseFormatPrecision(
    ffi.Pointer<ffi.Char> format,
    int default_value,
  ) {
    return _igImParseFormatPrecision(
      format,
      default_value,
    );
  }

  late final _igImParseFormatPrecisionPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'igImParseFormatPrecision');
  late final _igImParseFormatPrecision = _igImParseFormatPrecisionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> igImTextCharToUtf8(
    ffi.Pointer<ffi.Char> out_buf,
    int c,
  ) {
    return _igImTextCharToUtf8(
      out_buf,
      c,
    );
  }

  late final _igImTextCharToUtf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('igImTextCharToUtf8');
  late final _igImTextCharToUtf8 = _igImTextCharToUtf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int igImTextStrToUtf8(
    ffi.Pointer<ffi.Char> out_buf,
    int out_buf_size,
    ffi.Pointer<ImWchar> in_text,
    ffi.Pointer<ImWchar> in_text_end,
  ) {
    return _igImTextStrToUtf8(
      out_buf,
      out_buf_size,
      in_text,
      in_text_end,
    );
  }

  late final _igImTextStrToUtf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ImWchar>,
              ffi.Pointer<ImWchar>)>>('igImTextStrToUtf8');
  late final _igImTextStrToUtf8 = _igImTextStrToUtf8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ImWchar>,
          ffi.Pointer<ImWchar>)>();

  int igImTextCharFromUtf8(
    ffi.Pointer<ffi.UnsignedInt> out_char,
    ffi.Pointer<ffi.Char> in_text,
    ffi.Pointer<ffi.Char> in_text_end,
  ) {
    return _igImTextCharFromUtf8(
      out_char,
      in_text,
      in_text_end,
    );
  }

  late final _igImTextCharFromUtf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImTextCharFromUtf8');
  late final _igImTextCharFromUtf8 = _igImTextCharFromUtf8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int igImTextStrFromUtf8(
    ffi.Pointer<ImWchar> out_buf,
    int out_buf_size,
    ffi.Pointer<ffi.Char> in_text,
    ffi.Pointer<ffi.Char> in_text_end,
    ffi.Pointer<ffi.Pointer<ffi.Char>> in_remaining,
  ) {
    return _igImTextStrFromUtf8(
      out_buf,
      out_buf_size,
      in_text,
      in_text_end,
      in_remaining,
    );
  }

  late final _igImTextStrFromUtf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ImWchar>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('igImTextStrFromUtf8');
  late final _igImTextStrFromUtf8 = _igImTextStrFromUtf8Ptr.asFunction<
      int Function(ffi.Pointer<ImWchar>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int igImTextCountCharsFromUtf8(
    ffi.Pointer<ffi.Char> in_text,
    ffi.Pointer<ffi.Char> in_text_end,
  ) {
    return _igImTextCountCharsFromUtf8(
      in_text,
      in_text_end,
    );
  }

  late final _igImTextCountCharsFromUtf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImTextCountCharsFromUtf8');
  late final _igImTextCountCharsFromUtf8 = _igImTextCountCharsFromUtf8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int igImTextCountUtf8BytesFromChar(
    ffi.Pointer<ffi.Char> in_text,
    ffi.Pointer<ffi.Char> in_text_end,
  ) {
    return _igImTextCountUtf8BytesFromChar(
      in_text,
      in_text_end,
    );
  }

  late final _igImTextCountUtf8BytesFromCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImTextCountUtf8BytesFromChar');
  late final _igImTextCountUtf8BytesFromChar =
      _igImTextCountUtf8BytesFromCharPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int igImTextCountUtf8BytesFromStr(
    ffi.Pointer<ImWchar> in_text,
    ffi.Pointer<ImWchar> in_text_end,
  ) {
    return _igImTextCountUtf8BytesFromStr(
      in_text,
      in_text_end,
    );
  }

  late final _igImTextCountUtf8BytesFromStrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ImWchar>,
              ffi.Pointer<ImWchar>)>>('igImTextCountUtf8BytesFromStr');
  late final _igImTextCountUtf8BytesFromStr = _igImTextCountUtf8BytesFromStrPtr
      .asFunction<int Function(ffi.Pointer<ImWchar>, ffi.Pointer<ImWchar>)>();

  ffi.Pointer<ffi.Char> igImTextFindPreviousUtf8Codepoint(
    ffi.Pointer<ffi.Char> in_text_start,
    ffi.Pointer<ffi.Char> in_text_curr,
  ) {
    return _igImTextFindPreviousUtf8Codepoint(
      in_text_start,
      in_text_curr,
    );
  }

  late final _igImTextFindPreviousUtf8CodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImTextFindPreviousUtf8Codepoint');
  late final _igImTextFindPreviousUtf8Codepoint =
      _igImTextFindPreviousUtf8CodepointPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int igImTextCountLines(
    ffi.Pointer<ffi.Char> in_text,
    ffi.Pointer<ffi.Char> in_text_end,
  ) {
    return _igImTextCountLines(
      in_text,
      in_text_end,
    );
  }

  late final _igImTextCountLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igImTextCountLines');
  late final _igImTextCountLines = _igImTextCountLinesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ImFileHandle igImFileOpen(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
  ) {
    return _igImFileOpen(
      filename,
      mode,
    );
  }

  late final _igImFileOpenPtr = _lookup<
      ffi.NativeFunction<
          ImFileHandle Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('igImFileOpen');
  late final _igImFileOpen = _igImFileOpenPtr.asFunction<
      ImFileHandle Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool igImFileClose(
    ImFileHandle file,
  ) {
    return _igImFileClose(
      file,
    );
  }

  late final _igImFileClosePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImFileHandle)>>(
          'igImFileClose');
  late final _igImFileClose =
      _igImFileClosePtr.asFunction<bool Function(ImFileHandle)>();

  int igImFileGetSize(
    ImFileHandle file,
  ) {
    return _igImFileGetSize(
      file,
    );
  }

  late final _igImFileGetSizePtr =
      _lookup<ffi.NativeFunction<ImU64 Function(ImFileHandle)>>(
          'igImFileGetSize');
  late final _igImFileGetSize =
      _igImFileGetSizePtr.asFunction<int Function(ImFileHandle)>();

  int igImFileRead(
    ffi.Pointer<ffi.Void> data,
    int size,
    int count,
    ImFileHandle file,
  ) {
    return _igImFileRead(
      data,
      size,
      count,
      file,
    );
  }

  late final _igImFileReadPtr = _lookup<
      ffi.NativeFunction<
          ImU64 Function(ffi.Pointer<ffi.Void>, ImU64, ImU64,
              ImFileHandle)>>('igImFileRead');
  late final _igImFileRead = _igImFileReadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ImFileHandle)>();

  int igImFileWrite(
    ffi.Pointer<ffi.Void> data,
    int size,
    int count,
    ImFileHandle file,
  ) {
    return _igImFileWrite(
      data,
      size,
      count,
      file,
    );
  }

  late final _igImFileWritePtr = _lookup<
      ffi.NativeFunction<
          ImU64 Function(ffi.Pointer<ffi.Void>, ImU64, ImU64,
              ImFileHandle)>>('igImFileWrite');
  late final _igImFileWrite = _igImFileWritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ImFileHandle)>();

  ffi.Pointer<ffi.Void> igImFileLoadToMemory(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> mode,
    ffi.Pointer<ffi.Size> out_file_size,
    int padding_bytes,
  ) {
    return _igImFileLoadToMemory(
      filename,
      mode,
      out_file_size,
      padding_bytes,
    );
  }

  late final _igImFileLoadToMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Int)>>('igImFileLoadToMemory');
  late final _igImFileLoadToMemory = _igImFileLoadToMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>, int)>();

  double igImPow_Float(
    double x,
    double y,
  ) {
    return _igImPow_Float(
      x,
      y,
    );
  }

  late final _igImPow_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'igImPow_Float');
  late final _igImPow_Float =
      _igImPow_FloatPtr.asFunction<double Function(double, double)>();

  double igImPow_double(
    double x,
    double y,
  ) {
    return _igImPow_double(
      x,
      y,
    );
  }

  late final _igImPow_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'igImPow_double');
  late final _igImPow_double =
      _igImPow_doublePtr.asFunction<double Function(double, double)>();

  double igImLog_Float(
    double x,
  ) {
    return _igImLog_Float(
      x,
    );
  }

  late final _igImLog_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImLog_Float');
  late final _igImLog_Float =
      _igImLog_FloatPtr.asFunction<double Function(double)>();

  double igImLog_double(
    double x,
  ) {
    return _igImLog_double(
      x,
    );
  }

  late final _igImLog_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'igImLog_double');
  late final _igImLog_double =
      _igImLog_doublePtr.asFunction<double Function(double)>();

  int igImAbs_Int(
    int x,
  ) {
    return _igImAbs_Int(
      x,
    );
  }

  late final _igImAbs_IntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('igImAbs_Int');
  late final _igImAbs_Int = _igImAbs_IntPtr.asFunction<int Function(int)>();

  double igImAbs_Float(
    double x,
  ) {
    return _igImAbs_Float(
      x,
    );
  }

  late final _igImAbs_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImAbs_Float');
  late final _igImAbs_Float =
      _igImAbs_FloatPtr.asFunction<double Function(double)>();

  double igImAbs_double(
    double x,
  ) {
    return _igImAbs_double(
      x,
    );
  }

  late final _igImAbs_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'igImAbs_double');
  late final _igImAbs_double =
      _igImAbs_doublePtr.asFunction<double Function(double)>();

  double igImSign_Float(
    double x,
  ) {
    return _igImSign_Float(
      x,
    );
  }

  late final _igImSign_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImSign_Float');
  late final _igImSign_Float =
      _igImSign_FloatPtr.asFunction<double Function(double)>();

  double igImSign_double(
    double x,
  ) {
    return _igImSign_double(
      x,
    );
  }

  late final _igImSign_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'igImSign_double');
  late final _igImSign_double =
      _igImSign_doublePtr.asFunction<double Function(double)>();

  double igImRsqrt_Float(
    double x,
  ) {
    return _igImRsqrt_Float(
      x,
    );
  }

  late final _igImRsqrt_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImRsqrt_Float');
  late final _igImRsqrt_Float =
      _igImRsqrt_FloatPtr.asFunction<double Function(double)>();

  double igImRsqrt_double(
    double x,
  ) {
    return _igImRsqrt_double(
      x,
    );
  }

  late final _igImRsqrt_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>(
          'igImRsqrt_double');
  late final _igImRsqrt_double =
      _igImRsqrt_doublePtr.asFunction<double Function(double)>();

  void igImMin(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 lhs,
    ImVec2 rhs,
  ) {
    return _igImMin(
      pOut,
      lhs,
      rhs,
    );
  }

  late final _igImMinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2)>>('igImMin');
  late final _igImMin = _igImMinPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2)>();

  void igImMax(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 lhs,
    ImVec2 rhs,
  ) {
    return _igImMax(
      pOut,
      lhs,
      rhs,
    );
  }

  late final _igImMaxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2)>>('igImMax');
  late final _igImMax = _igImMaxPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2)>();

  void igImClamp(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 v,
    ImVec2 mn,
    ImVec2 mx,
  ) {
    return _igImClamp(
      pOut,
      v,
      mn,
      mx,
    );
  }

  late final _igImClampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2)>>('igImClamp');
  late final _igImClamp = _igImClampPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2)>();

  void igImLerp_Vec2Float(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 a,
    ImVec2 b,
    double t,
  ) {
    return _igImLerp_Vec2Float(
      pOut,
      a,
      b,
      t,
    );
  }

  late final _igImLerp_Vec2FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2,
              ffi.Float)>>('igImLerp_Vec2Float');
  late final _igImLerp_Vec2Float = _igImLerp_Vec2FloatPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, double)>();

  void igImLerp_Vec2Vec2(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 a,
    ImVec2 b,
    ImVec2 t,
  ) {
    return _igImLerp_Vec2Vec2(
      pOut,
      a,
      b,
      t,
    );
  }

  late final _igImLerp_Vec2Vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2,
              ImVec2)>>('igImLerp_Vec2Vec2');
  late final _igImLerp_Vec2Vec2 = _igImLerp_Vec2Vec2Ptr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2)>();

  void igImLerp_Vec4(
    ffi.Pointer<ImVec4> pOut,
    ImVec4 a,
    ImVec4 b,
    double t,
  ) {
    return _igImLerp_Vec4(
      pOut,
      a,
      b,
      t,
    );
  }

  late final _igImLerp_Vec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec4>, ImVec4, ImVec4,
              ffi.Float)>>('igImLerp_Vec4');
  late final _igImLerp_Vec4 = _igImLerp_Vec4Ptr
      .asFunction<void Function(ffi.Pointer<ImVec4>, ImVec4, ImVec4, double)>();

  double igImSaturate(
    double f,
  ) {
    return _igImSaturate(
      f,
    );
  }

  late final _igImSaturatePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImSaturate');
  late final _igImSaturate =
      _igImSaturatePtr.asFunction<double Function(double)>();

  double igImLengthSqr_Vec2(
    ImVec2 lhs,
  ) {
    return _igImLengthSqr_Vec2(
      lhs,
    );
  }

  late final _igImLengthSqr_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ImVec2)>>(
          'igImLengthSqr_Vec2');
  late final _igImLengthSqr_Vec2 =
      _igImLengthSqr_Vec2Ptr.asFunction<double Function(ImVec2)>();

  double igImLengthSqr_Vec4(
    ImVec4 lhs,
  ) {
    return _igImLengthSqr_Vec4(
      lhs,
    );
  }

  late final _igImLengthSqr_Vec4Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ImVec4)>>(
          'igImLengthSqr_Vec4');
  late final _igImLengthSqr_Vec4 =
      _igImLengthSqr_Vec4Ptr.asFunction<double Function(ImVec4)>();

  double igImInvLength(
    ImVec2 lhs,
    double fail_value,
  ) {
    return _igImInvLength(
      lhs,
      fail_value,
    );
  }

  late final _igImInvLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ImVec2, ffi.Float)>>(
          'igImInvLength');
  late final _igImInvLength =
      _igImInvLengthPtr.asFunction<double Function(ImVec2, double)>();

  double igImTrunc_Float(
    double f,
  ) {
    return _igImTrunc_Float(
      f,
    );
  }

  late final _igImTrunc_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImTrunc_Float');
  late final _igImTrunc_Float =
      _igImTrunc_FloatPtr.asFunction<double Function(double)>();

  void igImTrunc_Vec2(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 v,
  ) {
    return _igImTrunc_Vec2(
      pOut,
      v,
    );
  }

  late final _igImTrunc_Vec2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2)>>(
      'igImTrunc_Vec2');
  late final _igImTrunc_Vec2 = _igImTrunc_Vec2Ptr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2)>();

  double igImFloor_Float(
    double f,
  ) {
    return _igImFloor_Float(
      f,
    );
  }

  late final _igImFloor_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'igImFloor_Float');
  late final _igImFloor_Float =
      _igImFloor_FloatPtr.asFunction<double Function(double)>();

  void igImFloor_Vec2(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 v,
  ) {
    return _igImFloor_Vec2(
      pOut,
      v,
    );
  }

  late final _igImFloor_Vec2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2)>>(
      'igImFloor_Vec2');
  late final _igImFloor_Vec2 = _igImFloor_Vec2Ptr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2)>();

  int igImModPositive(
    int a,
    int b,
  ) {
    return _igImModPositive(
      a,
      b,
    );
  }

  late final _igImModPositivePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'igImModPositive');
  late final _igImModPositive =
      _igImModPositivePtr.asFunction<int Function(int, int)>();

  double igImDot(
    ImVec2 a,
    ImVec2 b,
  ) {
    return _igImDot(
      a,
      b,
    );
  }

  late final _igImDotPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ImVec2, ImVec2)>>(
          'igImDot');
  late final _igImDot =
      _igImDotPtr.asFunction<double Function(ImVec2, ImVec2)>();

  void igImRotate(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 v,
    double cos_a,
    double sin_a,
  ) {
    return _igImRotate(
      pOut,
      v,
      cos_a,
      sin_a,
    );
  }

  late final _igImRotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ffi.Float,
              ffi.Float)>>('igImRotate');
  late final _igImRotate = _igImRotatePtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, double, double)>();

  double igImLinearSweep(
    double current,
    double target,
    double speed,
  ) {
    return _igImLinearSweep(
      current,
      target,
      speed,
    );
  }

  late final _igImLinearSweepPtr = _lookup<
          ffi
          .NativeFunction<ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'igImLinearSweep');
  late final _igImLinearSweep =
      _igImLinearSweepPtr.asFunction<double Function(double, double, double)>();

  double igImLinearRemapClamp(
    double s0,
    double s1,
    double d0,
    double d1,
    double x,
  ) {
    return _igImLinearRemapClamp(
      s0,
      s1,
      d0,
      d1,
      x,
    );
  }

  late final _igImLinearRemapClampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Float)>>('igImLinearRemapClamp');
  late final _igImLinearRemapClamp = _igImLinearRemapClampPtr
      .asFunction<double Function(double, double, double, double, double)>();

  void igImMul(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 lhs,
    ImVec2 rhs,
  ) {
    return _igImMul(
      pOut,
      lhs,
      rhs,
    );
  }

  late final _igImMulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2)>>('igImMul');
  late final _igImMul = _igImMulPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2)>();

  bool igImIsFloatAboveGuaranteedIntegerPrecision(
    double f,
  ) {
    return _igImIsFloatAboveGuaranteedIntegerPrecision(
      f,
    );
  }

  late final _igImIsFloatAboveGuaranteedIntegerPrecisionPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Float)>>(
          'igImIsFloatAboveGuaranteedIntegerPrecision');
  late final _igImIsFloatAboveGuaranteedIntegerPrecision =
      _igImIsFloatAboveGuaranteedIntegerPrecisionPtr
          .asFunction<bool Function(double)>();

  double igImExponentialMovingAverage(
    double avg,
    double sample,
    int n,
  ) {
    return _igImExponentialMovingAverage(
      avg,
      sample,
      n,
    );
  }

  late final _igImExponentialMovingAveragePtr = _lookup<
          ffi
          .NativeFunction<ffi.Float Function(ffi.Float, ffi.Float, ffi.Int)>>(
      'igImExponentialMovingAverage');
  late final _igImExponentialMovingAverage = _igImExponentialMovingAveragePtr
      .asFunction<double Function(double, double, int)>();

  void igImBezierCubicCalc(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    double t,
  ) {
    return _igImBezierCubicCalc(
      pOut,
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _igImBezierCubicCalcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2,
              ffi.Float)>>('igImBezierCubicCalc');
  late final _igImBezierCubicCalc = _igImBezierCubicCalcPtr.asFunction<
      void Function(
          ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2, double)>();

  void igImBezierCubicClosestPoint(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    ImVec2 p,
    int num_segments,
  ) {
    return _igImBezierCubicClosestPoint(
      pOut,
      p1,
      p2,
      p3,
      p4,
      p,
      num_segments,
    );
  }

  late final _igImBezierCubicClosestPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2,
              ImVec2, ffi.Int)>>('igImBezierCubicClosestPoint');
  late final _igImBezierCubicClosestPoint =
      _igImBezierCubicClosestPointPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2,
              ImVec2, int)>();

  void igImBezierCubicClosestPointCasteljau(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    ImVec2 p4,
    ImVec2 p,
    double tess_tol,
  ) {
    return _igImBezierCubicClosestPointCasteljau(
      pOut,
      p1,
      p2,
      p3,
      p4,
      p,
      tess_tol,
    );
  }

  late final _igImBezierCubicClosestPointCasteljauPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2,
              ImVec2, ffi.Float)>>('igImBezierCubicClosestPointCasteljau');
  late final _igImBezierCubicClosestPointCasteljau =
      _igImBezierCubicClosestPointCasteljauPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2,
              ImVec2, double)>();

  void igImBezierQuadraticCalc(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 p1,
    ImVec2 p2,
    ImVec2 p3,
    double t,
  ) {
    return _igImBezierQuadraticCalc(
      pOut,
      p1,
      p2,
      p3,
      t,
    );
  }

  late final _igImBezierQuadraticCalcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2,
              ffi.Float)>>('igImBezierQuadraticCalc');
  late final _igImBezierQuadraticCalc = _igImBezierQuadraticCalcPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, double)>();

  void igImLineClosestPoint(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 a,
    ImVec2 b,
    ImVec2 p,
  ) {
    return _igImLineClosestPoint(
      pOut,
      a,
      b,
      p,
    );
  }

  late final _igImLineClosestPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2,
              ImVec2)>>('igImLineClosestPoint');
  late final _igImLineClosestPoint = _igImLineClosestPointPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2)>();

  bool igImTriangleContainsPoint(
    ImVec2 a,
    ImVec2 b,
    ImVec2 c,
    ImVec2 p,
  ) {
    return _igImTriangleContainsPoint(
      a,
      b,
      c,
      p,
    );
  }

  late final _igImTriangleContainsPointPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ImVec2, ImVec2, ImVec2, ImVec2)>>(
      'igImTriangleContainsPoint');
  late final _igImTriangleContainsPoint = _igImTriangleContainsPointPtr
      .asFunction<bool Function(ImVec2, ImVec2, ImVec2, ImVec2)>();

  void igImTriangleClosestPoint(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 a,
    ImVec2 b,
    ImVec2 c,
    ImVec2 p,
  ) {
    return _igImTriangleClosestPoint(
      pOut,
      a,
      b,
      c,
      p,
    );
  }

  late final _igImTriangleClosestPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2,
              ImVec2)>>('igImTriangleClosestPoint');
  late final _igImTriangleClosestPoint =
      _igImTriangleClosestPointPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2, ImVec2, ImVec2)>();

  void igImTriangleBarycentricCoords(
    ImVec2 a,
    ImVec2 b,
    ImVec2 c,
    ImVec2 p,
    ffi.Pointer<ffi.Float> out_u,
    ffi.Pointer<ffi.Float> out_v,
    ffi.Pointer<ffi.Float> out_w,
  ) {
    return _igImTriangleBarycentricCoords(
      a,
      b,
      c,
      p,
      out_u,
      out_v,
      out_w,
    );
  }

  late final _igImTriangleBarycentricCoordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImVec2,
              ImVec2,
              ImVec2,
              ImVec2,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('igImTriangleBarycentricCoords');
  late final _igImTriangleBarycentricCoords =
      _igImTriangleBarycentricCoordsPtr.asFunction<
          void Function(ImVec2, ImVec2, ImVec2, ImVec2, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  double igImTriangleArea(
    ImVec2 a,
    ImVec2 b,
    ImVec2 c,
  ) {
    return _igImTriangleArea(
      a,
      b,
      c,
    );
  }

  late final _igImTriangleAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ImVec2, ImVec2, ImVec2)>>(
          'igImTriangleArea');
  late final _igImTriangleArea = _igImTriangleAreaPtr
      .asFunction<double Function(ImVec2, ImVec2, ImVec2)>();

  bool igImTriangleIsClockwise(
    ImVec2 a,
    ImVec2 b,
    ImVec2 c,
  ) {
    return _igImTriangleIsClockwise(
      a,
      b,
      c,
    );
  }

  late final _igImTriangleIsClockwisePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImVec2, ImVec2, ImVec2)>>(
          'igImTriangleIsClockwise');
  late final _igImTriangleIsClockwise = _igImTriangleIsClockwisePtr
      .asFunction<bool Function(ImVec2, ImVec2, ImVec2)>();

  ffi.Pointer<ImVec1> ImVec1_ImVec1_Nil() {
    return _ImVec1_ImVec1_Nil();
  }

  late final _ImVec1_ImVec1_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec1> Function()>>(
          'ImVec1_ImVec1_Nil');
  late final _ImVec1_ImVec1_Nil =
      _ImVec1_ImVec1_NilPtr.asFunction<ffi.Pointer<ImVec1> Function()>();

  void ImVec1_destroy(
    ffi.Pointer<ImVec1> self,
  ) {
    return _ImVec1_destroy(
      self,
    );
  }

  late final _ImVec1_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec1>)>>(
          'ImVec1_destroy');
  late final _ImVec1_destroy =
      _ImVec1_destroyPtr.asFunction<void Function(ffi.Pointer<ImVec1>)>();

  ffi.Pointer<ImVec1> ImVec1_ImVec1_Float(
    double _x,
  ) {
    return _ImVec1_ImVec1_Float(
      _x,
    );
  }

  late final _ImVec1_ImVec1_FloatPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec1> Function(ffi.Float)>>(
          'ImVec1_ImVec1_Float');
  late final _ImVec1_ImVec1_Float = _ImVec1_ImVec1_FloatPtr.asFunction<
      ffi.Pointer<ImVec1> Function(double)>();

  ffi.Pointer<ImVec2ih> ImVec2ih_ImVec2ih_Nil() {
    return _ImVec2ih_ImVec2ih_Nil();
  }

  late final _ImVec2ih_ImVec2ih_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec2ih> Function()>>(
          'ImVec2ih_ImVec2ih_Nil');
  late final _ImVec2ih_ImVec2ih_Nil =
      _ImVec2ih_ImVec2ih_NilPtr.asFunction<ffi.Pointer<ImVec2ih> Function()>();

  void ImVec2ih_destroy(
    ffi.Pointer<ImVec2ih> self,
  ) {
    return _ImVec2ih_destroy(
      self,
    );
  }

  late final _ImVec2ih_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVec2ih>)>>(
          'ImVec2ih_destroy');
  late final _ImVec2ih_destroy =
      _ImVec2ih_destroyPtr.asFunction<void Function(ffi.Pointer<ImVec2ih>)>();

  ffi.Pointer<ImVec2ih> ImVec2ih_ImVec2ih_short(
    int _x,
    int _y,
  ) {
    return _ImVec2ih_ImVec2ih_short(
      _x,
      _y,
    );
  }

  late final _ImVec2ih_ImVec2ih_shortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImVec2ih> Function(
              ffi.Short, ffi.Short)>>('ImVec2ih_ImVec2ih_short');
  late final _ImVec2ih_ImVec2ih_short = _ImVec2ih_ImVec2ih_shortPtr.asFunction<
      ffi.Pointer<ImVec2ih> Function(int, int)>();

  ffi.Pointer<ImVec2ih> ImVec2ih_ImVec2ih_Vec2(
    ImVec2 rhs,
  ) {
    return _ImVec2ih_ImVec2ih_Vec2(
      rhs,
    );
  }

  late final _ImVec2ih_ImVec2ih_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVec2ih> Function(ImVec2)>>(
          'ImVec2ih_ImVec2ih_Vec2');
  late final _ImVec2ih_ImVec2ih_Vec2 = _ImVec2ih_ImVec2ih_Vec2Ptr.asFunction<
      ffi.Pointer<ImVec2ih> Function(ImVec2)>();

  ffi.Pointer<ImRect> ImRect_ImRect_Nil() {
    return _ImRect_ImRect_Nil();
  }

  late final _ImRect_ImRect_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImRect> Function()>>(
          'ImRect_ImRect_Nil');
  late final _ImRect_ImRect_Nil =
      _ImRect_ImRect_NilPtr.asFunction<ffi.Pointer<ImRect> Function()>();

  void ImRect_destroy(
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_destroy(
      self,
    );
  }

  late final _ImRect_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>)>>(
          'ImRect_destroy');
  late final _ImRect_destroy =
      _ImRect_destroyPtr.asFunction<void Function(ffi.Pointer<ImRect>)>();

  ffi.Pointer<ImRect> ImRect_ImRect_Vec2(
    ImVec2 min,
    ImVec2 max,
  ) {
    return _ImRect_ImRect_Vec2(
      min,
      max,
    );
  }

  late final _ImRect_ImRect_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImRect> Function(ImVec2, ImVec2)>>(
          'ImRect_ImRect_Vec2');
  late final _ImRect_ImRect_Vec2 = _ImRect_ImRect_Vec2Ptr.asFunction<
      ffi.Pointer<ImRect> Function(ImVec2, ImVec2)>();

  ffi.Pointer<ImRect> ImRect_ImRect_Vec4(
    ImVec4 v,
  ) {
    return _ImRect_ImRect_Vec4(
      v,
    );
  }

  late final _ImRect_ImRect_Vec4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImRect> Function(ImVec4)>>(
          'ImRect_ImRect_Vec4');
  late final _ImRect_ImRect_Vec4 =
      _ImRect_ImRect_Vec4Ptr.asFunction<ffi.Pointer<ImRect> Function(ImVec4)>();

  ffi.Pointer<ImRect> ImRect_ImRect_Float(
    double x1,
    double y1,
    double x2,
    double y2,
  ) {
    return _ImRect_ImRect_Float(
      x1,
      y1,
      x2,
      y2,
    );
  }

  late final _ImRect_ImRect_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImRect> Function(ffi.Float, ffi.Float, ffi.Float,
              ffi.Float)>>('ImRect_ImRect_Float');
  late final _ImRect_ImRect_Float = _ImRect_ImRect_FloatPtr.asFunction<
      ffi.Pointer<ImRect> Function(double, double, double, double)>();

  void ImRect_GetCenter(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetCenter(
      pOut,
      self,
    );
  }

  late final _ImRect_GetCenterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>>('ImRect_GetCenter');
  late final _ImRect_GetCenter = _ImRect_GetCenterPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>();

  void ImRect_GetSize(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetSize(
      pOut,
      self,
    );
  }

  late final _ImRect_GetSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>>('ImRect_GetSize');
  late final _ImRect_GetSize = _ImRect_GetSizePtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>();

  double ImRect_GetWidth(
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetWidth(
      self,
    );
  }

  late final _ImRect_GetWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ImRect>)>>(
          'ImRect_GetWidth');
  late final _ImRect_GetWidth =
      _ImRect_GetWidthPtr.asFunction<double Function(ffi.Pointer<ImRect>)>();

  double ImRect_GetHeight(
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetHeight(
      self,
    );
  }

  late final _ImRect_GetHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ImRect>)>>(
          'ImRect_GetHeight');
  late final _ImRect_GetHeight =
      _ImRect_GetHeightPtr.asFunction<double Function(ffi.Pointer<ImRect>)>();

  double ImRect_GetArea(
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetArea(
      self,
    );
  }

  late final _ImRect_GetAreaPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ImRect>)>>(
          'ImRect_GetArea');
  late final _ImRect_GetArea =
      _ImRect_GetAreaPtr.asFunction<double Function(ffi.Pointer<ImRect>)>();

  void ImRect_GetTL(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetTL(
      pOut,
      self,
    );
  }

  late final _ImRect_GetTLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>>('ImRect_GetTL');
  late final _ImRect_GetTL = _ImRect_GetTLPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>();

  void ImRect_GetTR(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetTR(
      pOut,
      self,
    );
  }

  late final _ImRect_GetTRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>>('ImRect_GetTR');
  late final _ImRect_GetTR = _ImRect_GetTRPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>();

  void ImRect_GetBL(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetBL(
      pOut,
      self,
    );
  }

  late final _ImRect_GetBLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>>('ImRect_GetBL');
  late final _ImRect_GetBL = _ImRect_GetBLPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>();

  void ImRect_GetBR(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_GetBR(
      pOut,
      self,
    );
  }

  late final _ImRect_GetBRPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>>('ImRect_GetBR');
  late final _ImRect_GetBR = _ImRect_GetBRPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImRect>)>();

  bool ImRect_Contains_Vec2(
    ffi.Pointer<ImRect> self,
    ImVec2 p,
  ) {
    return _ImRect_Contains_Vec2(
      self,
      p,
    );
  }

  late final _ImRect_Contains_Vec2Ptr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImRect>, ImVec2)>>(
      'ImRect_Contains_Vec2');
  late final _ImRect_Contains_Vec2 = _ImRect_Contains_Vec2Ptr.asFunction<
      bool Function(ffi.Pointer<ImRect>, ImVec2)>();

  bool ImRect_Contains_Rect(
    ffi.Pointer<ImRect> self,
    ImRect r,
  ) {
    return _ImRect_Contains_Rect(
      self,
      r,
    );
  }

  late final _ImRect_Contains_RectPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImRect>, ImRect)>>(
      'ImRect_Contains_Rect');
  late final _ImRect_Contains_Rect = _ImRect_Contains_RectPtr.asFunction<
      bool Function(ffi.Pointer<ImRect>, ImRect)>();

  bool ImRect_ContainsWithPad(
    ffi.Pointer<ImRect> self,
    ImVec2 p,
    ImVec2 pad,
  ) {
    return _ImRect_ContainsWithPad(
      self,
      p,
      pad,
    );
  }

  late final _ImRect_ContainsWithPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ImRect>, ImVec2, ImVec2)>>('ImRect_ContainsWithPad');
  late final _ImRect_ContainsWithPad = _ImRect_ContainsWithPadPtr.asFunction<
      bool Function(ffi.Pointer<ImRect>, ImVec2, ImVec2)>();

  bool ImRect_Overlaps(
    ffi.Pointer<ImRect> self,
    ImRect r,
  ) {
    return _ImRect_Overlaps(
      self,
      r,
    );
  }

  late final _ImRect_OverlapsPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImRect>, ImRect)>>(
      'ImRect_Overlaps');
  late final _ImRect_Overlaps = _ImRect_OverlapsPtr.asFunction<
      bool Function(ffi.Pointer<ImRect>, ImRect)>();

  void ImRect_Add_Vec2(
    ffi.Pointer<ImRect> self,
    ImVec2 p,
  ) {
    return _ImRect_Add_Vec2(
      self,
      p,
    );
  }

  late final _ImRect_Add_Vec2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ImVec2)>>(
      'ImRect_Add_Vec2');
  late final _ImRect_Add_Vec2 = _ImRect_Add_Vec2Ptr.asFunction<
      void Function(ffi.Pointer<ImRect>, ImVec2)>();

  void ImRect_Add_Rect(
    ffi.Pointer<ImRect> self,
    ImRect r,
  ) {
    return _ImRect_Add_Rect(
      self,
      r,
    );
  }

  late final _ImRect_Add_RectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ImRect)>>(
      'ImRect_Add_Rect');
  late final _ImRect_Add_Rect = _ImRect_Add_RectPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ImRect)>();

  void ImRect_Expand_Float(
    ffi.Pointer<ImRect> self,
    double amount,
  ) {
    return _ImRect_Expand_Float(
      self,
      amount,
    );
  }

  late final _ImRect_Expand_FloatPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ffi.Float)>>(
      'ImRect_Expand_Float');
  late final _ImRect_Expand_Float = _ImRect_Expand_FloatPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, double)>();

  void ImRect_Expand_Vec2(
    ffi.Pointer<ImRect> self,
    ImVec2 amount,
  ) {
    return _ImRect_Expand_Vec2(
      self,
      amount,
    );
  }

  late final _ImRect_Expand_Vec2Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ImVec2)>>(
      'ImRect_Expand_Vec2');
  late final _ImRect_Expand_Vec2 = _ImRect_Expand_Vec2Ptr.asFunction<
      void Function(ffi.Pointer<ImRect>, ImVec2)>();

  void ImRect_Translate(
    ffi.Pointer<ImRect> self,
    ImVec2 d,
  ) {
    return _ImRect_Translate(
      self,
      d,
    );
  }

  late final _ImRect_TranslatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ImVec2)>>(
      'ImRect_Translate');
  late final _ImRect_Translate = _ImRect_TranslatePtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ImVec2)>();

  void ImRect_TranslateX(
    ffi.Pointer<ImRect> self,
    double dx,
  ) {
    return _ImRect_TranslateX(
      self,
      dx,
    );
  }

  late final _ImRect_TranslateXPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ffi.Float)>>(
      'ImRect_TranslateX');
  late final _ImRect_TranslateX = _ImRect_TranslateXPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, double)>();

  void ImRect_TranslateY(
    ffi.Pointer<ImRect> self,
    double dy,
  ) {
    return _ImRect_TranslateY(
      self,
      dy,
    );
  }

  late final _ImRect_TranslateYPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ffi.Float)>>(
      'ImRect_TranslateY');
  late final _ImRect_TranslateY = _ImRect_TranslateYPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, double)>();

  void ImRect_ClipWith(
    ffi.Pointer<ImRect> self,
    ImRect r,
  ) {
    return _ImRect_ClipWith(
      self,
      r,
    );
  }

  late final _ImRect_ClipWithPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ImRect)>>(
      'ImRect_ClipWith');
  late final _ImRect_ClipWith = _ImRect_ClipWithPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ImRect)>();

  void ImRect_ClipWithFull(
    ffi.Pointer<ImRect> self,
    ImRect r,
  ) {
    return _ImRect_ClipWithFull(
      self,
      r,
    );
  }

  late final _ImRect_ClipWithFullPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>, ImRect)>>(
      'ImRect_ClipWithFull');
  late final _ImRect_ClipWithFull = _ImRect_ClipWithFullPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ImRect)>();

  void ImRect_Floor(
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_Floor(
      self,
    );
  }

  late final _ImRect_FloorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImRect>)>>(
          'ImRect_Floor');
  late final _ImRect_Floor =
      _ImRect_FloorPtr.asFunction<void Function(ffi.Pointer<ImRect>)>();

  bool ImRect_IsInverted(
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_IsInverted(
      self,
    );
  }

  late final _ImRect_IsInvertedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImRect>)>>(
          'ImRect_IsInverted');
  late final _ImRect_IsInverted =
      _ImRect_IsInvertedPtr.asFunction<bool Function(ffi.Pointer<ImRect>)>();

  void ImRect_ToVec4(
    ffi.Pointer<ImVec4> pOut,
    ffi.Pointer<ImRect> self,
  ) {
    return _ImRect_ToVec4(
      pOut,
      self,
    );
  }

  late final _ImRect_ToVec4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec4>, ffi.Pointer<ImRect>)>>('ImRect_ToVec4');
  late final _ImRect_ToVec4 = _ImRect_ToVec4Ptr.asFunction<
      void Function(ffi.Pointer<ImVec4>, ffi.Pointer<ImRect>)>();

  int igImBitArrayGetStorageSizeInBytes(
    int bitcount,
  ) {
    return _igImBitArrayGetStorageSizeInBytes(
      bitcount,
    );
  }

  late final _igImBitArrayGetStorageSizeInBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Int)>>(
          'igImBitArrayGetStorageSizeInBytes');
  late final _igImBitArrayGetStorageSizeInBytes =
      _igImBitArrayGetStorageSizeInBytesPtr.asFunction<int Function(int)>();

  void igImBitArrayClearAllBits(
    ffi.Pointer<ImU32> arr,
    int bitcount,
  ) {
    return _igImBitArrayClearAllBits(
      arr,
      bitcount,
    );
  }

  late final _igImBitArrayClearAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImU32>, ffi.Int)>>(
      'igImBitArrayClearAllBits');
  late final _igImBitArrayClearAllBits = _igImBitArrayClearAllBitsPtr
      .asFunction<void Function(ffi.Pointer<ImU32>, int)>();

  bool igImBitArrayTestBit(
    ffi.Pointer<ImU32> arr,
    int n,
  ) {
    return _igImBitArrayTestBit(
      arr,
      n,
    );
  }

  late final _igImBitArrayTestBitPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImU32>, ffi.Int)>>(
      'igImBitArrayTestBit');
  late final _igImBitArrayTestBit = _igImBitArrayTestBitPtr
      .asFunction<bool Function(ffi.Pointer<ImU32>, int)>();

  void igImBitArrayClearBit(
    ffi.Pointer<ImU32> arr,
    int n,
  ) {
    return _igImBitArrayClearBit(
      arr,
      n,
    );
  }

  late final _igImBitArrayClearBitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImU32>, ffi.Int)>>(
      'igImBitArrayClearBit');
  late final _igImBitArrayClearBit = _igImBitArrayClearBitPtr
      .asFunction<void Function(ffi.Pointer<ImU32>, int)>();

  void igImBitArraySetBit(
    ffi.Pointer<ImU32> arr,
    int n,
  ) {
    return _igImBitArraySetBit(
      arr,
      n,
    );
  }

  late final _igImBitArraySetBitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImU32>, ffi.Int)>>(
      'igImBitArraySetBit');
  late final _igImBitArraySetBit = _igImBitArraySetBitPtr
      .asFunction<void Function(ffi.Pointer<ImU32>, int)>();

  void igImBitArraySetBitRange(
    ffi.Pointer<ImU32> arr,
    int n,
    int n2,
  ) {
    return _igImBitArraySetBitRange(
      arr,
      n,
      n2,
    );
  }

  late final _igImBitArraySetBitRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImU32>, ffi.Int,
              ffi.Int)>>('igImBitArraySetBitRange');
  late final _igImBitArraySetBitRange = _igImBitArraySetBitRangePtr
      .asFunction<void Function(ffi.Pointer<ImU32>, int, int)>();

  void ImBitVector_Create(
    ffi.Pointer<ImBitVector> self,
    int sz,
  ) {
    return _ImBitVector_Create(
      self,
      sz,
    );
  }

  late final _ImBitVector_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImBitVector>, ffi.Int)>>('ImBitVector_Create');
  late final _ImBitVector_Create = _ImBitVector_CreatePtr.asFunction<
      void Function(ffi.Pointer<ImBitVector>, int)>();

  void ImBitVector_Clear(
    ffi.Pointer<ImBitVector> self,
  ) {
    return _ImBitVector_Clear(
      self,
    );
  }

  late final _ImBitVector_ClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImBitVector>)>>(
          'ImBitVector_Clear');
  late final _ImBitVector_Clear = _ImBitVector_ClearPtr.asFunction<
      void Function(ffi.Pointer<ImBitVector>)>();

  bool ImBitVector_TestBit(
    ffi.Pointer<ImBitVector> self,
    int n,
  ) {
    return _ImBitVector_TestBit(
      self,
      n,
    );
  }

  late final _ImBitVector_TestBitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ImBitVector>, ffi.Int)>>('ImBitVector_TestBit');
  late final _ImBitVector_TestBit = _ImBitVector_TestBitPtr.asFunction<
      bool Function(ffi.Pointer<ImBitVector>, int)>();

  void ImBitVector_SetBit(
    ffi.Pointer<ImBitVector> self,
    int n,
  ) {
    return _ImBitVector_SetBit(
      self,
      n,
    );
  }

  late final _ImBitVector_SetBitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImBitVector>, ffi.Int)>>('ImBitVector_SetBit');
  late final _ImBitVector_SetBit = _ImBitVector_SetBitPtr.asFunction<
      void Function(ffi.Pointer<ImBitVector>, int)>();

  void ImBitVector_ClearBit(
    ffi.Pointer<ImBitVector> self,
    int n,
  ) {
    return _ImBitVector_ClearBit(
      self,
      n,
    );
  }

  late final _ImBitVector_ClearBitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImBitVector>, ffi.Int)>>('ImBitVector_ClearBit');
  late final _ImBitVector_ClearBit = _ImBitVector_ClearBitPtr.asFunction<
      void Function(ffi.Pointer<ImBitVector>, int)>();

  void ImGuiTextIndex_clear(
    ffi.Pointer<ImGuiTextIndex> self,
  ) {
    return _ImGuiTextIndex_clear(
      self,
    );
  }

  late final _ImGuiTextIndex_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTextIndex>)>>(
      'ImGuiTextIndex_clear');
  late final _ImGuiTextIndex_clear = _ImGuiTextIndex_clearPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextIndex>)>();

  int ImGuiTextIndex_size(
    ffi.Pointer<ImGuiTextIndex> self,
  ) {
    return _ImGuiTextIndex_size(
      self,
    );
  }

  late final _ImGuiTextIndex_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiTextIndex>)>>(
      'ImGuiTextIndex_size');
  late final _ImGuiTextIndex_size = _ImGuiTextIndex_sizePtr.asFunction<
      int Function(ffi.Pointer<ImGuiTextIndex>)>();

  ffi.Pointer<ffi.Char> ImGuiTextIndex_get_line_begin(
    ffi.Pointer<ImGuiTextIndex> self,
    ffi.Pointer<ffi.Char> base,
    int n,
  ) {
    return _ImGuiTextIndex_get_line_begin(
      self,
      base,
      n,
    );
  }

  late final _ImGuiTextIndex_get_line_beginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImGuiTextIndex>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ImGuiTextIndex_get_line_begin');
  late final _ImGuiTextIndex_get_line_begin =
      _ImGuiTextIndex_get_line_beginPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImGuiTextIndex>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ImGuiTextIndex_get_line_end(
    ffi.Pointer<ImGuiTextIndex> self,
    ffi.Pointer<ffi.Char> base,
    int n,
  ) {
    return _ImGuiTextIndex_get_line_end(
      self,
      base,
      n,
    );
  }

  late final _ImGuiTextIndex_get_line_endPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTextIndex>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('ImGuiTextIndex_get_line_end');
  late final _ImGuiTextIndex_get_line_end =
      _ImGuiTextIndex_get_line_endPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImGuiTextIndex>, ffi.Pointer<ffi.Char>, int)>();

  void ImGuiTextIndex_append(
    ffi.Pointer<ImGuiTextIndex> self,
    ffi.Pointer<ffi.Char> base,
    int old_size,
    int new_size,
  ) {
    return _ImGuiTextIndex_append(
      self,
      base,
      old_size,
      new_size,
    );
  }

  late final _ImGuiTextIndex_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTextIndex>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int)>>('ImGuiTextIndex_append');
  late final _ImGuiTextIndex_append = _ImGuiTextIndex_appendPtr.asFunction<
      void Function(
          ffi.Pointer<ImGuiTextIndex>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ImGuiStoragePair> igImLowerBound(
    ffi.Pointer<ImGuiStoragePair> in_begin,
    ffi.Pointer<ImGuiStoragePair> in_end,
    int key,
  ) {
    return _igImLowerBound(
      in_begin,
      in_end,
      key,
    );
  }

  late final _igImLowerBoundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStoragePair> Function(ffi.Pointer<ImGuiStoragePair>,
              ffi.Pointer<ImGuiStoragePair>, ImGuiID)>>('igImLowerBound');
  late final _igImLowerBound = _igImLowerBoundPtr.asFunction<
      ffi.Pointer<ImGuiStoragePair> Function(
          ffi.Pointer<ImGuiStoragePair>, ffi.Pointer<ImGuiStoragePair>, int)>();

  ffi.Pointer<ImDrawListSharedData>
      ImDrawListSharedData_ImDrawListSharedData() {
    return _ImDrawListSharedData_ImDrawListSharedData();
  }

  late final _ImDrawListSharedData_ImDrawListSharedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawListSharedData> Function()>>(
          'ImDrawListSharedData_ImDrawListSharedData');
  late final _ImDrawListSharedData_ImDrawListSharedData =
      _ImDrawListSharedData_ImDrawListSharedDataPtr.asFunction<
          ffi.Pointer<ImDrawListSharedData> Function()>();

  void ImDrawListSharedData_destroy(
    ffi.Pointer<ImDrawListSharedData> self,
  ) {
    return _ImDrawListSharedData_destroy(
      self,
    );
  }

  late final _ImDrawListSharedData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImDrawListSharedData>)>>(
      'ImDrawListSharedData_destroy');
  late final _ImDrawListSharedData_destroy = _ImDrawListSharedData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImDrawListSharedData>)>();

  void ImDrawListSharedData_SetCircleTessellationMaxError(
    ffi.Pointer<ImDrawListSharedData> self,
    double max_error,
  ) {
    return _ImDrawListSharedData_SetCircleTessellationMaxError(
      self,
      max_error,
    );
  }

  late final _ImDrawListSharedData_SetCircleTessellationMaxErrorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImDrawListSharedData>, ffi.Float)>>(
      'ImDrawListSharedData_SetCircleTessellationMaxError');
  late final _ImDrawListSharedData_SetCircleTessellationMaxError =
      _ImDrawListSharedData_SetCircleTessellationMaxErrorPtr.asFunction<
          void Function(ffi.Pointer<ImDrawListSharedData>, double)>();

  ffi.Pointer<ImDrawDataBuilder> ImDrawDataBuilder_ImDrawDataBuilder() {
    return _ImDrawDataBuilder_ImDrawDataBuilder();
  }

  late final _ImDrawDataBuilder_ImDrawDataBuilderPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImDrawDataBuilder> Function()>>(
          'ImDrawDataBuilder_ImDrawDataBuilder');
  late final _ImDrawDataBuilder_ImDrawDataBuilder =
      _ImDrawDataBuilder_ImDrawDataBuilderPtr.asFunction<
          ffi.Pointer<ImDrawDataBuilder> Function()>();

  void ImDrawDataBuilder_destroy(
    ffi.Pointer<ImDrawDataBuilder> self,
  ) {
    return _ImDrawDataBuilder_destroy(
      self,
    );
  }

  late final _ImDrawDataBuilder_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawDataBuilder>)>>(
      'ImDrawDataBuilder_destroy');
  late final _ImDrawDataBuilder_destroy = _ImDrawDataBuilder_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImDrawDataBuilder>)>();

  ffi.Pointer<ffi.Void> ImGuiDataVarInfo_GetVarPtr(
    ffi.Pointer<ImGuiDataVarInfo> self,
    ffi.Pointer<ffi.Void> parent,
  ) {
    return _ImGuiDataVarInfo_GetVarPtr(
      self,
      parent,
    );
  }

  late final _ImGuiDataVarInfo_GetVarPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ImGuiDataVarInfo>,
              ffi.Pointer<ffi.Void>)>>('ImGuiDataVarInfo_GetVarPtr');
  late final _ImGuiDataVarInfo_GetVarPtr =
      _ImGuiDataVarInfo_GetVarPtrPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImGuiDataVarInfo>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ImGuiStyleMod> ImGuiStyleMod_ImGuiStyleMod_Int(
    int idx,
    int v,
  ) {
    return _ImGuiStyleMod_ImGuiStyleMod_Int(
      idx,
      v,
    );
  }

  late final _ImGuiStyleMod_ImGuiStyleMod_IntPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStyleMod> Function(
              ImGuiStyleVar, ffi.Int)>>('ImGuiStyleMod_ImGuiStyleMod_Int');
  late final _ImGuiStyleMod_ImGuiStyleMod_Int =
      _ImGuiStyleMod_ImGuiStyleMod_IntPtr.asFunction<
          ffi.Pointer<ImGuiStyleMod> Function(int, int)>();

  void ImGuiStyleMod_destroy(
    ffi.Pointer<ImGuiStyleMod> self,
  ) {
    return _ImGuiStyleMod_destroy(
      self,
    );
  }

  late final _ImGuiStyleMod_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStyleMod>)>>(
      'ImGuiStyleMod_destroy');
  late final _ImGuiStyleMod_destroy = _ImGuiStyleMod_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiStyleMod>)>();

  ffi.Pointer<ImGuiStyleMod> ImGuiStyleMod_ImGuiStyleMod_Float(
    int idx,
    double v,
  ) {
    return _ImGuiStyleMod_ImGuiStyleMod_Float(
      idx,
      v,
    );
  }

  late final _ImGuiStyleMod_ImGuiStyleMod_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStyleMod> Function(
              ImGuiStyleVar, ffi.Float)>>('ImGuiStyleMod_ImGuiStyleMod_Float');
  late final _ImGuiStyleMod_ImGuiStyleMod_Float =
      _ImGuiStyleMod_ImGuiStyleMod_FloatPtr.asFunction<
          ffi.Pointer<ImGuiStyleMod> Function(int, double)>();

  ffi.Pointer<ImGuiStyleMod> ImGuiStyleMod_ImGuiStyleMod_Vec2(
    int idx,
    ImVec2 v,
  ) {
    return _ImGuiStyleMod_ImGuiStyleMod_Vec2(
      idx,
      v,
    );
  }

  late final _ImGuiStyleMod_ImGuiStyleMod_Vec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiStyleMod> Function(
              ImGuiStyleVar, ImVec2)>>('ImGuiStyleMod_ImGuiStyleMod_Vec2');
  late final _ImGuiStyleMod_ImGuiStyleMod_Vec2 =
      _ImGuiStyleMod_ImGuiStyleMod_Vec2Ptr.asFunction<
          ffi.Pointer<ImGuiStyleMod> Function(int, ImVec2)>();

  ffi.Pointer<ImGuiComboPreviewData>
      ImGuiComboPreviewData_ImGuiComboPreviewData() {
    return _ImGuiComboPreviewData_ImGuiComboPreviewData();
  }

  late final _ImGuiComboPreviewData_ImGuiComboPreviewDataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiComboPreviewData> Function()>>(
      'ImGuiComboPreviewData_ImGuiComboPreviewData');
  late final _ImGuiComboPreviewData_ImGuiComboPreviewData =
      _ImGuiComboPreviewData_ImGuiComboPreviewDataPtr.asFunction<
          ffi.Pointer<ImGuiComboPreviewData> Function()>();

  void ImGuiComboPreviewData_destroy(
    ffi.Pointer<ImGuiComboPreviewData> self,
  ) {
    return _ImGuiComboPreviewData_destroy(
      self,
    );
  }

  late final _ImGuiComboPreviewData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiComboPreviewData>)>>(
      'ImGuiComboPreviewData_destroy');
  late final _ImGuiComboPreviewData_destroy = _ImGuiComboPreviewData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiComboPreviewData>)>();

  ffi.Pointer<ImGuiMenuColumns> ImGuiMenuColumns_ImGuiMenuColumns() {
    return _ImGuiMenuColumns_ImGuiMenuColumns();
  }

  late final _ImGuiMenuColumns_ImGuiMenuColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiMenuColumns> Function()>>(
          'ImGuiMenuColumns_ImGuiMenuColumns');
  late final _ImGuiMenuColumns_ImGuiMenuColumns =
      _ImGuiMenuColumns_ImGuiMenuColumnsPtr.asFunction<
          ffi.Pointer<ImGuiMenuColumns> Function()>();

  void ImGuiMenuColumns_destroy(
    ffi.Pointer<ImGuiMenuColumns> self,
  ) {
    return _ImGuiMenuColumns_destroy(
      self,
    );
  }

  late final _ImGuiMenuColumns_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiMenuColumns>)>>(
      'ImGuiMenuColumns_destroy');
  late final _ImGuiMenuColumns_destroy = _ImGuiMenuColumns_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiMenuColumns>)>();

  void ImGuiMenuColumns_Update(
    ffi.Pointer<ImGuiMenuColumns> self,
    double spacing,
    bool window_reappearing,
  ) {
    return _ImGuiMenuColumns_Update(
      self,
      spacing,
      window_reappearing,
    );
  }

  late final _ImGuiMenuColumns_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiMenuColumns>, ffi.Float,
              ffi.Bool)>>('ImGuiMenuColumns_Update');
  late final _ImGuiMenuColumns_Update = _ImGuiMenuColumns_UpdatePtr.asFunction<
      void Function(ffi.Pointer<ImGuiMenuColumns>, double, bool)>();

  double ImGuiMenuColumns_DeclColumns(
    ffi.Pointer<ImGuiMenuColumns> self,
    double w_icon,
    double w_label,
    double w_shortcut,
    double w_mark,
  ) {
    return _ImGuiMenuColumns_DeclColumns(
      self,
      w_icon,
      w_label,
      w_shortcut,
      w_mark,
    );
  }

  late final _ImGuiMenuColumns_DeclColumnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ImGuiMenuColumns>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float)>>('ImGuiMenuColumns_DeclColumns');
  late final _ImGuiMenuColumns_DeclColumns =
      _ImGuiMenuColumns_DeclColumnsPtr.asFunction<
          double Function(
              ffi.Pointer<ImGuiMenuColumns>, double, double, double, double)>();

  void ImGuiMenuColumns_CalcNextTotalWidth(
    ffi.Pointer<ImGuiMenuColumns> self,
    bool update_offsets,
  ) {
    return _ImGuiMenuColumns_CalcNextTotalWidth(
      self,
      update_offsets,
    );
  }

  late final _ImGuiMenuColumns_CalcNextTotalWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiMenuColumns>,
              ffi.Bool)>>('ImGuiMenuColumns_CalcNextTotalWidth');
  late final _ImGuiMenuColumns_CalcNextTotalWidth =
      _ImGuiMenuColumns_CalcNextTotalWidthPtr.asFunction<
          void Function(ffi.Pointer<ImGuiMenuColumns>, bool)>();

  ffi.Pointer<ImGuiInputTextDeactivatedState>
      ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState() {
    return _ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState();
  }

  late final _ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedStatePtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Pointer<ImGuiInputTextDeactivatedState> Function()>>(
          'ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState');
  late final _ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState =
      _ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedStatePtr
          .asFunction<ffi.Pointer<ImGuiInputTextDeactivatedState> Function()>();

  void ImGuiInputTextDeactivatedState_destroy(
    ffi.Pointer<ImGuiInputTextDeactivatedState> self,
  ) {
    return _ImGuiInputTextDeactivatedState_destroy(
      self,
    );
  }

  late final _ImGuiInputTextDeactivatedState_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiInputTextDeactivatedState>)>>(
      'ImGuiInputTextDeactivatedState_destroy');
  late final _ImGuiInputTextDeactivatedState_destroy =
      _ImGuiInputTextDeactivatedState_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextDeactivatedState>)>();

  void ImGuiInputTextDeactivatedState_ClearFreeMemory(
    ffi.Pointer<ImGuiInputTextDeactivatedState> self,
  ) {
    return _ImGuiInputTextDeactivatedState_ClearFreeMemory(
      self,
    );
  }

  late final _ImGuiInputTextDeactivatedState_ClearFreeMemoryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiInputTextDeactivatedState>)>>(
      'ImGuiInputTextDeactivatedState_ClearFreeMemory');
  late final _ImGuiInputTextDeactivatedState_ClearFreeMemory =
      _ImGuiInputTextDeactivatedState_ClearFreeMemoryPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextDeactivatedState>)>();

  ffi.Pointer<ImGuiInputTextState> ImGuiInputTextState_ImGuiInputTextState() {
    return _ImGuiInputTextState_ImGuiInputTextState();
  }

  late final _ImGuiInputTextState_ImGuiInputTextStatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiInputTextState> Function()>>(
          'ImGuiInputTextState_ImGuiInputTextState');
  late final _ImGuiInputTextState_ImGuiInputTextState =
      _ImGuiInputTextState_ImGuiInputTextStatePtr.asFunction<
          ffi.Pointer<ImGuiInputTextState> Function()>();

  void ImGuiInputTextState_destroy(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_destroy(
      self,
    );
  }

  late final _ImGuiInputTextState_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_destroy');
  late final _ImGuiInputTextState_destroy = _ImGuiInputTextState_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_ClearText(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_ClearText(
      self,
    );
  }

  late final _ImGuiInputTextState_ClearTextPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_ClearText');
  late final _ImGuiInputTextState_ClearText = _ImGuiInputTextState_ClearTextPtr
      .asFunction<void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_ClearFreeMemory(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_ClearFreeMemory(
      self,
    );
  }

  late final _ImGuiInputTextState_ClearFreeMemoryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_ClearFreeMemory');
  late final _ImGuiInputTextState_ClearFreeMemory =
      _ImGuiInputTextState_ClearFreeMemoryPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_OnKeyPressed(
    ffi.Pointer<ImGuiInputTextState> self,
    int key,
  ) {
    return _ImGuiInputTextState_OnKeyPressed(
      self,
      key,
    );
  }

  late final _ImGuiInputTextState_OnKeyPressedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiInputTextState>,
              ffi.Int)>>('ImGuiInputTextState_OnKeyPressed');
  late final _ImGuiInputTextState_OnKeyPressed =
      _ImGuiInputTextState_OnKeyPressedPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>, int)>();

  void ImGuiInputTextState_OnCharPressed(
    ffi.Pointer<ImGuiInputTextState> self,
    int c,
  ) {
    return _ImGuiInputTextState_OnCharPressed(
      self,
      c,
    );
  }

  late final _ImGuiInputTextState_OnCharPressedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiInputTextState>,
              ffi.UnsignedInt)>>('ImGuiInputTextState_OnCharPressed');
  late final _ImGuiInputTextState_OnCharPressed =
      _ImGuiInputTextState_OnCharPressedPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>, int)>();

  void ImGuiInputTextState_CursorAnimReset(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_CursorAnimReset(
      self,
    );
  }

  late final _ImGuiInputTextState_CursorAnimResetPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_CursorAnimReset');
  late final _ImGuiInputTextState_CursorAnimReset =
      _ImGuiInputTextState_CursorAnimResetPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_CursorClamp(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_CursorClamp(
      self,
    );
  }

  late final _ImGuiInputTextState_CursorClampPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_CursorClamp');
  late final _ImGuiInputTextState_CursorClamp =
      _ImGuiInputTextState_CursorClampPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  bool ImGuiInputTextState_HasSelection(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_HasSelection(
      self,
    );
  }

  late final _ImGuiInputTextState_HasSelectionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_HasSelection');
  late final _ImGuiInputTextState_HasSelection =
      _ImGuiInputTextState_HasSelectionPtr.asFunction<
          bool Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_ClearSelection(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_ClearSelection(
      self,
    );
  }

  late final _ImGuiInputTextState_ClearSelectionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_ClearSelection');
  late final _ImGuiInputTextState_ClearSelection =
      _ImGuiInputTextState_ClearSelectionPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  int ImGuiInputTextState_GetCursorPos(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_GetCursorPos(
      self,
    );
  }

  late final _ImGuiInputTextState_GetCursorPosPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_GetCursorPos');
  late final _ImGuiInputTextState_GetCursorPos =
      _ImGuiInputTextState_GetCursorPosPtr.asFunction<
          int Function(ffi.Pointer<ImGuiInputTextState>)>();

  int ImGuiInputTextState_GetSelectionStart(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_GetSelectionStart(
      self,
    );
  }

  late final _ImGuiInputTextState_GetSelectionStartPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_GetSelectionStart');
  late final _ImGuiInputTextState_GetSelectionStart =
      _ImGuiInputTextState_GetSelectionStartPtr.asFunction<
          int Function(ffi.Pointer<ImGuiInputTextState>)>();

  int ImGuiInputTextState_GetSelectionEnd(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_GetSelectionEnd(
      self,
    );
  }

  late final _ImGuiInputTextState_GetSelectionEndPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_GetSelectionEnd');
  late final _ImGuiInputTextState_GetSelectionEnd =
      _ImGuiInputTextState_GetSelectionEndPtr.asFunction<
          int Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_SelectAll(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_SelectAll(
      self,
    );
  }

  late final _ImGuiInputTextState_SelectAllPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_SelectAll');
  late final _ImGuiInputTextState_SelectAll = _ImGuiInputTextState_SelectAllPtr
      .asFunction<void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_ReloadUserBufAndSelectAll(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_ReloadUserBufAndSelectAll(
      self,
    );
  }

  late final _ImGuiInputTextState_ReloadUserBufAndSelectAllPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_ReloadUserBufAndSelectAll');
  late final _ImGuiInputTextState_ReloadUserBufAndSelectAll =
      _ImGuiInputTextState_ReloadUserBufAndSelectAllPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_ReloadUserBufAndKeepSelection(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_ReloadUserBufAndKeepSelection(
      self,
    );
  }

  late final _ImGuiInputTextState_ReloadUserBufAndKeepSelectionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_ReloadUserBufAndKeepSelection');
  late final _ImGuiInputTextState_ReloadUserBufAndKeepSelection =
      _ImGuiInputTextState_ReloadUserBufAndKeepSelectionPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(
    ffi.Pointer<ImGuiInputTextState> self,
  ) {
    return _ImGuiInputTextState_ReloadUserBufAndMoveToEnd(
      self,
    );
  }

  late final _ImGuiInputTextState_ReloadUserBufAndMoveToEndPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'ImGuiInputTextState_ReloadUserBufAndMoveToEnd');
  late final _ImGuiInputTextState_ReloadUserBufAndMoveToEnd =
      _ImGuiInputTextState_ReloadUserBufAndMoveToEndPtr.asFunction<
          void Function(ffi.Pointer<ImGuiInputTextState>)>();

  ffi.Pointer<ImGuiNextWindowData> ImGuiNextWindowData_ImGuiNextWindowData() {
    return _ImGuiNextWindowData_ImGuiNextWindowData();
  }

  late final _ImGuiNextWindowData_ImGuiNextWindowDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiNextWindowData> Function()>>(
          'ImGuiNextWindowData_ImGuiNextWindowData');
  late final _ImGuiNextWindowData_ImGuiNextWindowData =
      _ImGuiNextWindowData_ImGuiNextWindowDataPtr.asFunction<
          ffi.Pointer<ImGuiNextWindowData> Function()>();

  void ImGuiNextWindowData_destroy(
    ffi.Pointer<ImGuiNextWindowData> self,
  ) {
    return _ImGuiNextWindowData_destroy(
      self,
    );
  }

  late final _ImGuiNextWindowData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNextWindowData>)>>(
      'ImGuiNextWindowData_destroy');
  late final _ImGuiNextWindowData_destroy = _ImGuiNextWindowData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiNextWindowData>)>();

  void ImGuiNextWindowData_ClearFlags(
    ffi.Pointer<ImGuiNextWindowData> self,
  ) {
    return _ImGuiNextWindowData_ClearFlags(
      self,
    );
  }

  late final _ImGuiNextWindowData_ClearFlagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNextWindowData>)>>(
      'ImGuiNextWindowData_ClearFlags');
  late final _ImGuiNextWindowData_ClearFlags =
      _ImGuiNextWindowData_ClearFlagsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiNextWindowData>)>();

  ffi.Pointer<ImGuiNextItemData> ImGuiNextItemData_ImGuiNextItemData() {
    return _ImGuiNextItemData_ImGuiNextItemData();
  }

  late final _ImGuiNextItemData_ImGuiNextItemDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiNextItemData> Function()>>(
          'ImGuiNextItemData_ImGuiNextItemData');
  late final _ImGuiNextItemData_ImGuiNextItemData =
      _ImGuiNextItemData_ImGuiNextItemDataPtr.asFunction<
          ffi.Pointer<ImGuiNextItemData> Function()>();

  void ImGuiNextItemData_destroy(
    ffi.Pointer<ImGuiNextItemData> self,
  ) {
    return _ImGuiNextItemData_destroy(
      self,
    );
  }

  late final _ImGuiNextItemData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNextItemData>)>>(
      'ImGuiNextItemData_destroy');
  late final _ImGuiNextItemData_destroy = _ImGuiNextItemData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiNextItemData>)>();

  void ImGuiNextItemData_ClearFlags(
    ffi.Pointer<ImGuiNextItemData> self,
  ) {
    return _ImGuiNextItemData_ClearFlags(
      self,
    );
  }

  late final _ImGuiNextItemData_ClearFlagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNextItemData>)>>(
      'ImGuiNextItemData_ClearFlags');
  late final _ImGuiNextItemData_ClearFlags = _ImGuiNextItemData_ClearFlagsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiNextItemData>)>();

  ffi.Pointer<ImGuiLastItemData> ImGuiLastItemData_ImGuiLastItemData() {
    return _ImGuiLastItemData_ImGuiLastItemData();
  }

  late final _ImGuiLastItemData_ImGuiLastItemDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiLastItemData> Function()>>(
          'ImGuiLastItemData_ImGuiLastItemData');
  late final _ImGuiLastItemData_ImGuiLastItemData =
      _ImGuiLastItemData_ImGuiLastItemDataPtr.asFunction<
          ffi.Pointer<ImGuiLastItemData> Function()>();

  void ImGuiLastItemData_destroy(
    ffi.Pointer<ImGuiLastItemData> self,
  ) {
    return _ImGuiLastItemData_destroy(
      self,
    );
  }

  late final _ImGuiLastItemData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiLastItemData>)>>(
      'ImGuiLastItemData_destroy');
  late final _ImGuiLastItemData_destroy = _ImGuiLastItemData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiLastItemData>)>();

  ffi.Pointer<ImGuiErrorRecoveryState>
      ImGuiErrorRecoveryState_ImGuiErrorRecoveryState() {
    return _ImGuiErrorRecoveryState_ImGuiErrorRecoveryState();
  }

  late final _ImGuiErrorRecoveryState_ImGuiErrorRecoveryStatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiErrorRecoveryState> Function()>>(
      'ImGuiErrorRecoveryState_ImGuiErrorRecoveryState');
  late final _ImGuiErrorRecoveryState_ImGuiErrorRecoveryState =
      _ImGuiErrorRecoveryState_ImGuiErrorRecoveryStatePtr.asFunction<
          ffi.Pointer<ImGuiErrorRecoveryState> Function()>();

  void ImGuiErrorRecoveryState_destroy(
    ffi.Pointer<ImGuiErrorRecoveryState> self,
  ) {
    return _ImGuiErrorRecoveryState_destroy(
      self,
    );
  }

  late final _ImGuiErrorRecoveryState_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>>(
      'ImGuiErrorRecoveryState_destroy');
  late final _ImGuiErrorRecoveryState_destroy =
      _ImGuiErrorRecoveryState_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>();

  ffi.Pointer<ImGuiPtrOrIndex> ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(
      ptr,
    );
  }

  late final _ImGuiPtrOrIndex_ImGuiPtrOrIndex_PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiPtrOrIndex> Function(
              ffi.Pointer<ffi.Void>)>>('ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr');
  late final _ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr =
      _ImGuiPtrOrIndex_ImGuiPtrOrIndex_PtrPtr.asFunction<
          ffi.Pointer<ImGuiPtrOrIndex> Function(ffi.Pointer<ffi.Void>)>();

  void ImGuiPtrOrIndex_destroy(
    ffi.Pointer<ImGuiPtrOrIndex> self,
  ) {
    return _ImGuiPtrOrIndex_destroy(
      self,
    );
  }

  late final _ImGuiPtrOrIndex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiPtrOrIndex>)>>(
      'ImGuiPtrOrIndex_destroy');
  late final _ImGuiPtrOrIndex_destroy = _ImGuiPtrOrIndex_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiPtrOrIndex>)>();

  ffi.Pointer<ImGuiPtrOrIndex> ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(
    int index,
  ) {
    return _ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(
      index,
    );
  }

  late final _ImGuiPtrOrIndex_ImGuiPtrOrIndex_IntPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiPtrOrIndex> Function(ffi.Int)>>(
      'ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int');
  late final _ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int =
      _ImGuiPtrOrIndex_ImGuiPtrOrIndex_IntPtr.asFunction<
          ffi.Pointer<ImGuiPtrOrIndex> Function(int)>();

  ffi.Pointer<ImGuiPopupData> ImGuiPopupData_ImGuiPopupData() {
    return _ImGuiPopupData_ImGuiPopupData();
  }

  late final _ImGuiPopupData_ImGuiPopupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiPopupData> Function()>>(
          'ImGuiPopupData_ImGuiPopupData');
  late final _ImGuiPopupData_ImGuiPopupData = _ImGuiPopupData_ImGuiPopupDataPtr
      .asFunction<ffi.Pointer<ImGuiPopupData> Function()>();

  void ImGuiPopupData_destroy(
    ffi.Pointer<ImGuiPopupData> self,
  ) {
    return _ImGuiPopupData_destroy(
      self,
    );
  }

  late final _ImGuiPopupData_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiPopupData>)>>(
      'ImGuiPopupData_destroy');
  late final _ImGuiPopupData_destroy = _ImGuiPopupData_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiPopupData>)>();

  ffi.Pointer<ImGuiInputEvent> ImGuiInputEvent_ImGuiInputEvent() {
    return _ImGuiInputEvent_ImGuiInputEvent();
  }

  late final _ImGuiInputEvent_ImGuiInputEventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiInputEvent> Function()>>(
          'ImGuiInputEvent_ImGuiInputEvent');
  late final _ImGuiInputEvent_ImGuiInputEvent =
      _ImGuiInputEvent_ImGuiInputEventPtr.asFunction<
          ffi.Pointer<ImGuiInputEvent> Function()>();

  void ImGuiInputEvent_destroy(
    ffi.Pointer<ImGuiInputEvent> self,
  ) {
    return _ImGuiInputEvent_destroy(
      self,
    );
  }

  late final _ImGuiInputEvent_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputEvent>)>>(
      'ImGuiInputEvent_destroy');
  late final _ImGuiInputEvent_destroy = _ImGuiInputEvent_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiInputEvent>)>();

  ffi.Pointer<ImGuiKeyRoutingData> ImGuiKeyRoutingData_ImGuiKeyRoutingData() {
    return _ImGuiKeyRoutingData_ImGuiKeyRoutingData();
  }

  late final _ImGuiKeyRoutingData_ImGuiKeyRoutingDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiKeyRoutingData> Function()>>(
          'ImGuiKeyRoutingData_ImGuiKeyRoutingData');
  late final _ImGuiKeyRoutingData_ImGuiKeyRoutingData =
      _ImGuiKeyRoutingData_ImGuiKeyRoutingDataPtr.asFunction<
          ffi.Pointer<ImGuiKeyRoutingData> Function()>();

  void ImGuiKeyRoutingData_destroy(
    ffi.Pointer<ImGuiKeyRoutingData> self,
  ) {
    return _ImGuiKeyRoutingData_destroy(
      self,
    );
  }

  late final _ImGuiKeyRoutingData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiKeyRoutingData>)>>(
      'ImGuiKeyRoutingData_destroy');
  late final _ImGuiKeyRoutingData_destroy = _ImGuiKeyRoutingData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiKeyRoutingData>)>();

  ffi.Pointer<ImGuiKeyRoutingTable>
      ImGuiKeyRoutingTable_ImGuiKeyRoutingTable() {
    return _ImGuiKeyRoutingTable_ImGuiKeyRoutingTable();
  }

  late final _ImGuiKeyRoutingTable_ImGuiKeyRoutingTablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiKeyRoutingTable> Function()>>(
          'ImGuiKeyRoutingTable_ImGuiKeyRoutingTable');
  late final _ImGuiKeyRoutingTable_ImGuiKeyRoutingTable =
      _ImGuiKeyRoutingTable_ImGuiKeyRoutingTablePtr.asFunction<
          ffi.Pointer<ImGuiKeyRoutingTable> Function()>();

  void ImGuiKeyRoutingTable_destroy(
    ffi.Pointer<ImGuiKeyRoutingTable> self,
  ) {
    return _ImGuiKeyRoutingTable_destroy(
      self,
    );
  }

  late final _ImGuiKeyRoutingTable_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiKeyRoutingTable>)>>(
      'ImGuiKeyRoutingTable_destroy');
  late final _ImGuiKeyRoutingTable_destroy = _ImGuiKeyRoutingTable_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiKeyRoutingTable>)>();

  void ImGuiKeyRoutingTable_Clear(
    ffi.Pointer<ImGuiKeyRoutingTable> self,
  ) {
    return _ImGuiKeyRoutingTable_Clear(
      self,
    );
  }

  late final _ImGuiKeyRoutingTable_ClearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiKeyRoutingTable>)>>(
      'ImGuiKeyRoutingTable_Clear');
  late final _ImGuiKeyRoutingTable_Clear = _ImGuiKeyRoutingTable_ClearPtr
      .asFunction<void Function(ffi.Pointer<ImGuiKeyRoutingTable>)>();

  ffi.Pointer<ImGuiKeyOwnerData> ImGuiKeyOwnerData_ImGuiKeyOwnerData() {
    return _ImGuiKeyOwnerData_ImGuiKeyOwnerData();
  }

  late final _ImGuiKeyOwnerData_ImGuiKeyOwnerDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiKeyOwnerData> Function()>>(
          'ImGuiKeyOwnerData_ImGuiKeyOwnerData');
  late final _ImGuiKeyOwnerData_ImGuiKeyOwnerData =
      _ImGuiKeyOwnerData_ImGuiKeyOwnerDataPtr.asFunction<
          ffi.Pointer<ImGuiKeyOwnerData> Function()>();

  void ImGuiKeyOwnerData_destroy(
    ffi.Pointer<ImGuiKeyOwnerData> self,
  ) {
    return _ImGuiKeyOwnerData_destroy(
      self,
    );
  }

  late final _ImGuiKeyOwnerData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiKeyOwnerData>)>>(
      'ImGuiKeyOwnerData_destroy');
  late final _ImGuiKeyOwnerData_destroy = _ImGuiKeyOwnerData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiKeyOwnerData>)>();

  ImGuiListClipperRange ImGuiListClipperRange_FromIndices(
    int min,
    int max,
  ) {
    return _ImGuiListClipperRange_FromIndices(
      min,
      max,
    );
  }

  late final _ImGuiListClipperRange_FromIndicesPtr = _lookup<
          ffi.NativeFunction<ImGuiListClipperRange Function(ffi.Int, ffi.Int)>>(
      'ImGuiListClipperRange_FromIndices');
  late final _ImGuiListClipperRange_FromIndices =
      _ImGuiListClipperRange_FromIndicesPtr.asFunction<
          ImGuiListClipperRange Function(int, int)>();

  ImGuiListClipperRange ImGuiListClipperRange_FromPositions(
    double y1,
    double y2,
    int off_min,
    int off_max,
  ) {
    return _ImGuiListClipperRange_FromPositions(
      y1,
      y2,
      off_min,
      off_max,
    );
  }

  late final _ImGuiListClipperRange_FromPositionsPtr = _lookup<
      ffi.NativeFunction<
          ImGuiListClipperRange Function(ffi.Float, ffi.Float, ffi.Int,
              ffi.Int)>>('ImGuiListClipperRange_FromPositions');
  late final _ImGuiListClipperRange_FromPositions =
      _ImGuiListClipperRange_FromPositionsPtr.asFunction<
          ImGuiListClipperRange Function(double, double, int, int)>();

  ffi.Pointer<ImGuiListClipperData>
      ImGuiListClipperData_ImGuiListClipperData() {
    return _ImGuiListClipperData_ImGuiListClipperData();
  }

  late final _ImGuiListClipperData_ImGuiListClipperDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiListClipperData> Function()>>(
          'ImGuiListClipperData_ImGuiListClipperData');
  late final _ImGuiListClipperData_ImGuiListClipperData =
      _ImGuiListClipperData_ImGuiListClipperDataPtr.asFunction<
          ffi.Pointer<ImGuiListClipperData> Function()>();

  void ImGuiListClipperData_destroy(
    ffi.Pointer<ImGuiListClipperData> self,
  ) {
    return _ImGuiListClipperData_destroy(
      self,
    );
  }

  late final _ImGuiListClipperData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiListClipperData>)>>(
      'ImGuiListClipperData_destroy');
  late final _ImGuiListClipperData_destroy = _ImGuiListClipperData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiListClipperData>)>();

  void ImGuiListClipperData_Reset(
    ffi.Pointer<ImGuiListClipperData> self,
    ffi.Pointer<ImGuiListClipper> clipper,
  ) {
    return _ImGuiListClipperData_Reset(
      self,
      clipper,
    );
  }

  late final _ImGuiListClipperData_ResetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiListClipperData>,
              ffi.Pointer<ImGuiListClipper>)>>('ImGuiListClipperData_Reset');
  late final _ImGuiListClipperData_Reset =
      _ImGuiListClipperData_ResetPtr.asFunction<
          void Function(ffi.Pointer<ImGuiListClipperData>,
              ffi.Pointer<ImGuiListClipper>)>();

  ffi.Pointer<ImGuiNavItemData> ImGuiNavItemData_ImGuiNavItemData() {
    return _ImGuiNavItemData_ImGuiNavItemData();
  }

  late final _ImGuiNavItemData_ImGuiNavItemDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiNavItemData> Function()>>(
          'ImGuiNavItemData_ImGuiNavItemData');
  late final _ImGuiNavItemData_ImGuiNavItemData =
      _ImGuiNavItemData_ImGuiNavItemDataPtr.asFunction<
          ffi.Pointer<ImGuiNavItemData> Function()>();

  void ImGuiNavItemData_destroy(
    ffi.Pointer<ImGuiNavItemData> self,
  ) {
    return _ImGuiNavItemData_destroy(
      self,
    );
  }

  late final _ImGuiNavItemData_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNavItemData>)>>(
      'ImGuiNavItemData_destroy');
  late final _ImGuiNavItemData_destroy = _ImGuiNavItemData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiNavItemData>)>();

  void ImGuiNavItemData_Clear(
    ffi.Pointer<ImGuiNavItemData> self,
  ) {
    return _ImGuiNavItemData_Clear(
      self,
    );
  }

  late final _ImGuiNavItemData_ClearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNavItemData>)>>(
      'ImGuiNavItemData_Clear');
  late final _ImGuiNavItemData_Clear = _ImGuiNavItemData_ClearPtr.asFunction<
      void Function(ffi.Pointer<ImGuiNavItemData>)>();

  ffi.Pointer<ImGuiTypingSelectState>
      ImGuiTypingSelectState_ImGuiTypingSelectState() {
    return _ImGuiTypingSelectState_ImGuiTypingSelectState();
  }

  late final _ImGuiTypingSelectState_ImGuiTypingSelectStatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiTypingSelectState> Function()>>(
      'ImGuiTypingSelectState_ImGuiTypingSelectState');
  late final _ImGuiTypingSelectState_ImGuiTypingSelectState =
      _ImGuiTypingSelectState_ImGuiTypingSelectStatePtr.asFunction<
          ffi.Pointer<ImGuiTypingSelectState> Function()>();

  void ImGuiTypingSelectState_destroy(
    ffi.Pointer<ImGuiTypingSelectState> self,
  ) {
    return _ImGuiTypingSelectState_destroy(
      self,
    );
  }

  late final _ImGuiTypingSelectState_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiTypingSelectState>)>>(
      'ImGuiTypingSelectState_destroy');
  late final _ImGuiTypingSelectState_destroy =
      _ImGuiTypingSelectState_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiTypingSelectState>)>();

  void ImGuiTypingSelectState_Clear(
    ffi.Pointer<ImGuiTypingSelectState> self,
  ) {
    return _ImGuiTypingSelectState_Clear(
      self,
    );
  }

  late final _ImGuiTypingSelectState_ClearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiTypingSelectState>)>>(
      'ImGuiTypingSelectState_Clear');
  late final _ImGuiTypingSelectState_Clear = _ImGuiTypingSelectState_ClearPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTypingSelectState>)>();

  ffi.Pointer<ImGuiOldColumnData> ImGuiOldColumnData_ImGuiOldColumnData() {
    return _ImGuiOldColumnData_ImGuiOldColumnData();
  }

  late final _ImGuiOldColumnData_ImGuiOldColumnDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiOldColumnData> Function()>>(
          'ImGuiOldColumnData_ImGuiOldColumnData');
  late final _ImGuiOldColumnData_ImGuiOldColumnData =
      _ImGuiOldColumnData_ImGuiOldColumnDataPtr.asFunction<
          ffi.Pointer<ImGuiOldColumnData> Function()>();

  void ImGuiOldColumnData_destroy(
    ffi.Pointer<ImGuiOldColumnData> self,
  ) {
    return _ImGuiOldColumnData_destroy(
      self,
    );
  }

  late final _ImGuiOldColumnData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiOldColumnData>)>>(
      'ImGuiOldColumnData_destroy');
  late final _ImGuiOldColumnData_destroy = _ImGuiOldColumnData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiOldColumnData>)>();

  ffi.Pointer<ImGuiOldColumns> ImGuiOldColumns_ImGuiOldColumns() {
    return _ImGuiOldColumns_ImGuiOldColumns();
  }

  late final _ImGuiOldColumns_ImGuiOldColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiOldColumns> Function()>>(
          'ImGuiOldColumns_ImGuiOldColumns');
  late final _ImGuiOldColumns_ImGuiOldColumns =
      _ImGuiOldColumns_ImGuiOldColumnsPtr.asFunction<
          ffi.Pointer<ImGuiOldColumns> Function()>();

  void ImGuiOldColumns_destroy(
    ffi.Pointer<ImGuiOldColumns> self,
  ) {
    return _ImGuiOldColumns_destroy(
      self,
    );
  }

  late final _ImGuiOldColumns_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiOldColumns>)>>(
      'ImGuiOldColumns_destroy');
  late final _ImGuiOldColumns_destroy = _ImGuiOldColumns_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiOldColumns>)>();

  ffi.Pointer<ImGuiBoxSelectState> ImGuiBoxSelectState_ImGuiBoxSelectState() {
    return _ImGuiBoxSelectState_ImGuiBoxSelectState();
  }

  late final _ImGuiBoxSelectState_ImGuiBoxSelectStatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiBoxSelectState> Function()>>(
          'ImGuiBoxSelectState_ImGuiBoxSelectState');
  late final _ImGuiBoxSelectState_ImGuiBoxSelectState =
      _ImGuiBoxSelectState_ImGuiBoxSelectStatePtr.asFunction<
          ffi.Pointer<ImGuiBoxSelectState> Function()>();

  void ImGuiBoxSelectState_destroy(
    ffi.Pointer<ImGuiBoxSelectState> self,
  ) {
    return _ImGuiBoxSelectState_destroy(
      self,
    );
  }

  late final _ImGuiBoxSelectState_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiBoxSelectState>)>>(
      'ImGuiBoxSelectState_destroy');
  late final _ImGuiBoxSelectState_destroy = _ImGuiBoxSelectState_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiBoxSelectState>)>();

  ffi.Pointer<ImGuiMultiSelectTempData>
      ImGuiMultiSelectTempData_ImGuiMultiSelectTempData() {
    return _ImGuiMultiSelectTempData_ImGuiMultiSelectTempData();
  }

  late final _ImGuiMultiSelectTempData_ImGuiMultiSelectTempDataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiMultiSelectTempData> Function()>>(
      'ImGuiMultiSelectTempData_ImGuiMultiSelectTempData');
  late final _ImGuiMultiSelectTempData_ImGuiMultiSelectTempData =
      _ImGuiMultiSelectTempData_ImGuiMultiSelectTempDataPtr.asFunction<
          ffi.Pointer<ImGuiMultiSelectTempData> Function()>();

  void ImGuiMultiSelectTempData_destroy(
    ffi.Pointer<ImGuiMultiSelectTempData> self,
  ) {
    return _ImGuiMultiSelectTempData_destroy(
      self,
    );
  }

  late final _ImGuiMultiSelectTempData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiMultiSelectTempData>)>>(
      'ImGuiMultiSelectTempData_destroy');
  late final _ImGuiMultiSelectTempData_destroy =
      _ImGuiMultiSelectTempData_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiMultiSelectTempData>)>();

  void ImGuiMultiSelectTempData_Clear(
    ffi.Pointer<ImGuiMultiSelectTempData> self,
  ) {
    return _ImGuiMultiSelectTempData_Clear(
      self,
    );
  }

  late final _ImGuiMultiSelectTempData_ClearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiMultiSelectTempData>)>>(
      'ImGuiMultiSelectTempData_Clear');
  late final _ImGuiMultiSelectTempData_Clear =
      _ImGuiMultiSelectTempData_ClearPtr.asFunction<
          void Function(ffi.Pointer<ImGuiMultiSelectTempData>)>();

  void ImGuiMultiSelectTempData_ClearIO(
    ffi.Pointer<ImGuiMultiSelectTempData> self,
  ) {
    return _ImGuiMultiSelectTempData_ClearIO(
      self,
    );
  }

  late final _ImGuiMultiSelectTempData_ClearIOPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiMultiSelectTempData>)>>(
      'ImGuiMultiSelectTempData_ClearIO');
  late final _ImGuiMultiSelectTempData_ClearIO =
      _ImGuiMultiSelectTempData_ClearIOPtr.asFunction<
          void Function(ffi.Pointer<ImGuiMultiSelectTempData>)>();

  ffi.Pointer<ImGuiMultiSelectState>
      ImGuiMultiSelectState_ImGuiMultiSelectState() {
    return _ImGuiMultiSelectState_ImGuiMultiSelectState();
  }

  late final _ImGuiMultiSelectState_ImGuiMultiSelectStatePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiMultiSelectState> Function()>>(
      'ImGuiMultiSelectState_ImGuiMultiSelectState');
  late final _ImGuiMultiSelectState_ImGuiMultiSelectState =
      _ImGuiMultiSelectState_ImGuiMultiSelectStatePtr.asFunction<
          ffi.Pointer<ImGuiMultiSelectState> Function()>();

  void ImGuiMultiSelectState_destroy(
    ffi.Pointer<ImGuiMultiSelectState> self,
  ) {
    return _ImGuiMultiSelectState_destroy(
      self,
    );
  }

  late final _ImGuiMultiSelectState_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiMultiSelectState>)>>(
      'ImGuiMultiSelectState_destroy');
  late final _ImGuiMultiSelectState_destroy = _ImGuiMultiSelectState_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiMultiSelectState>)>();

  ffi.Pointer<ImGuiDockNode> ImGuiDockNode_ImGuiDockNode(
    int id,
  ) {
    return _ImGuiDockNode_ImGuiDockNode(
      id,
    );
  }

  late final _ImGuiDockNode_ImGuiDockNodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiDockNode> Function(ImGuiID)>>(
          'ImGuiDockNode_ImGuiDockNode');
  late final _ImGuiDockNode_ImGuiDockNode = _ImGuiDockNode_ImGuiDockNodePtr
      .asFunction<ffi.Pointer<ImGuiDockNode> Function(int)>();

  void ImGuiDockNode_destroy(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_destroy(
      self,
    );
  }

  late final _ImGuiDockNode_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_destroy');
  late final _ImGuiDockNode_destroy = _ImGuiDockNode_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsRootNode(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsRootNode(
      self,
    );
  }

  late final _ImGuiDockNode_IsRootNodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsRootNode');
  late final _ImGuiDockNode_IsRootNode = _ImGuiDockNode_IsRootNodePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsDockSpace(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsDockSpace(
      self,
    );
  }

  late final _ImGuiDockNode_IsDockSpacePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsDockSpace');
  late final _ImGuiDockNode_IsDockSpace = _ImGuiDockNode_IsDockSpacePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsFloatingNode(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsFloatingNode(
      self,
    );
  }

  late final _ImGuiDockNode_IsFloatingNodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsFloatingNode');
  late final _ImGuiDockNode_IsFloatingNode = _ImGuiDockNode_IsFloatingNodePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsCentralNode(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsCentralNode(
      self,
    );
  }

  late final _ImGuiDockNode_IsCentralNodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsCentralNode');
  late final _ImGuiDockNode_IsCentralNode = _ImGuiDockNode_IsCentralNodePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsHiddenTabBar(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsHiddenTabBar(
      self,
    );
  }

  late final _ImGuiDockNode_IsHiddenTabBarPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsHiddenTabBar');
  late final _ImGuiDockNode_IsHiddenTabBar = _ImGuiDockNode_IsHiddenTabBarPtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsNoTabBar(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsNoTabBar(
      self,
    );
  }

  late final _ImGuiDockNode_IsNoTabBarPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsNoTabBar');
  late final _ImGuiDockNode_IsNoTabBar = _ImGuiDockNode_IsNoTabBarPtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsSplitNode(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsSplitNode(
      self,
    );
  }

  late final _ImGuiDockNode_IsSplitNodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsSplitNode');
  late final _ImGuiDockNode_IsSplitNode = _ImGuiDockNode_IsSplitNodePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsLeafNode(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsLeafNode(
      self,
    );
  }

  late final _ImGuiDockNode_IsLeafNodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsLeafNode');
  late final _ImGuiDockNode_IsLeafNode = _ImGuiDockNode_IsLeafNodePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  bool ImGuiDockNode_IsEmpty(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_IsEmpty(
      self,
    );
  }

  late final _ImGuiDockNode_IsEmptyPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_IsEmpty');
  late final _ImGuiDockNode_IsEmpty = _ImGuiDockNode_IsEmptyPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiDockNode>)>();

  void ImGuiDockNode_Rect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_Rect(
      pOut,
      self,
    );
  }

  late final _ImGuiDockNode_RectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiDockNode>)>>('ImGuiDockNode_Rect');
  late final _ImGuiDockNode_Rect = _ImGuiDockNode_RectPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiDockNode>)>();

  void ImGuiDockNode_SetLocalFlags(
    ffi.Pointer<ImGuiDockNode> self,
    int flags,
  ) {
    return _ImGuiDockNode_SetLocalFlags(
      self,
      flags,
    );
  }

  late final _ImGuiDockNode_SetLocalFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiDockNode>,
              ImGuiDockNodeFlags)>>('ImGuiDockNode_SetLocalFlags');
  late final _ImGuiDockNode_SetLocalFlags = _ImGuiDockNode_SetLocalFlagsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiDockNode>, int)>();

  void ImGuiDockNode_UpdateMergedFlags(
    ffi.Pointer<ImGuiDockNode> self,
  ) {
    return _ImGuiDockNode_UpdateMergedFlags(
      self,
    );
  }

  late final _ImGuiDockNode_UpdateMergedFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiDockNode>)>>(
      'ImGuiDockNode_UpdateMergedFlags');
  late final _ImGuiDockNode_UpdateMergedFlags =
      _ImGuiDockNode_UpdateMergedFlagsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiDockNode>)>();

  ffi.Pointer<ImGuiDockContext> ImGuiDockContext_ImGuiDockContext() {
    return _ImGuiDockContext_ImGuiDockContext();
  }

  late final _ImGuiDockContext_ImGuiDockContextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiDockContext> Function()>>(
          'ImGuiDockContext_ImGuiDockContext');
  late final _ImGuiDockContext_ImGuiDockContext =
      _ImGuiDockContext_ImGuiDockContextPtr.asFunction<
          ffi.Pointer<ImGuiDockContext> Function()>();

  void ImGuiDockContext_destroy(
    ffi.Pointer<ImGuiDockContext> self,
  ) {
    return _ImGuiDockContext_destroy(
      self,
    );
  }

  late final _ImGuiDockContext_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiDockContext>)>>(
      'ImGuiDockContext_destroy');
  late final _ImGuiDockContext_destroy = _ImGuiDockContext_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiDockContext>)>();

  ffi.Pointer<ImGuiViewportP> ImGuiViewportP_ImGuiViewportP() {
    return _ImGuiViewportP_ImGuiViewportP();
  }

  late final _ImGuiViewportP_ImGuiViewportPPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiViewportP> Function()>>(
          'ImGuiViewportP_ImGuiViewportP');
  late final _ImGuiViewportP_ImGuiViewportP = _ImGuiViewportP_ImGuiViewportPPtr
      .asFunction<ffi.Pointer<ImGuiViewportP> Function()>();

  void ImGuiViewportP_destroy(
    ffi.Pointer<ImGuiViewportP> self,
  ) {
    return _ImGuiViewportP_destroy(
      self,
    );
  }

  late final _ImGuiViewportP_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewportP>)>>(
      'ImGuiViewportP_destroy');
  late final _ImGuiViewportP_destroy = _ImGuiViewportP_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiViewportP>)>();

  void ImGuiViewportP_ClearRequestFlags(
    ffi.Pointer<ImGuiViewportP> self,
  ) {
    return _ImGuiViewportP_ClearRequestFlags(
      self,
    );
  }

  late final _ImGuiViewportP_ClearRequestFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewportP>)>>(
      'ImGuiViewportP_ClearRequestFlags');
  late final _ImGuiViewportP_ClearRequestFlags =
      _ImGuiViewportP_ClearRequestFlagsPtr.asFunction<
          void Function(ffi.Pointer<ImGuiViewportP>)>();

  void ImGuiViewportP_CalcWorkRectPos(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiViewportP> self,
    ImVec2 inset_min,
  ) {
    return _ImGuiViewportP_CalcWorkRectPos(
      pOut,
      self,
      inset_min,
    );
  }

  late final _ImGuiViewportP_CalcWorkRectPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiViewportP>,
              ImVec2)>>('ImGuiViewportP_CalcWorkRectPos');
  late final _ImGuiViewportP_CalcWorkRectPos =
      _ImGuiViewportP_CalcWorkRectPosPtr.asFunction<
          void Function(
              ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiViewportP>, ImVec2)>();

  void ImGuiViewportP_CalcWorkRectSize(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiViewportP> self,
    ImVec2 inset_min,
    ImVec2 inset_max,
  ) {
    return _ImGuiViewportP_CalcWorkRectSize(
      pOut,
      self,
      inset_min,
      inset_max,
    );
  }

  late final _ImGuiViewportP_CalcWorkRectSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiViewportP>,
              ImVec2, ImVec2)>>('ImGuiViewportP_CalcWorkRectSize');
  late final _ImGuiViewportP_CalcWorkRectSize =
      _ImGuiViewportP_CalcWorkRectSizePtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiViewportP>,
              ImVec2, ImVec2)>();

  void ImGuiViewportP_UpdateWorkRect(
    ffi.Pointer<ImGuiViewportP> self,
  ) {
    return _ImGuiViewportP_UpdateWorkRect(
      self,
    );
  }

  late final _ImGuiViewportP_UpdateWorkRectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewportP>)>>(
      'ImGuiViewportP_UpdateWorkRect');
  late final _ImGuiViewportP_UpdateWorkRect = _ImGuiViewportP_UpdateWorkRectPtr
      .asFunction<void Function(ffi.Pointer<ImGuiViewportP>)>();

  void ImGuiViewportP_GetMainRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiViewportP> self,
  ) {
    return _ImGuiViewportP_GetMainRect(
      pOut,
      self,
    );
  }

  late final _ImGuiViewportP_GetMainRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiViewportP>)>>('ImGuiViewportP_GetMainRect');
  late final _ImGuiViewportP_GetMainRect =
      _ImGuiViewportP_GetMainRectPtr.asFunction<
          void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiViewportP>)>();

  void ImGuiViewportP_GetWorkRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiViewportP> self,
  ) {
    return _ImGuiViewportP_GetWorkRect(
      pOut,
      self,
    );
  }

  late final _ImGuiViewportP_GetWorkRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiViewportP>)>>('ImGuiViewportP_GetWorkRect');
  late final _ImGuiViewportP_GetWorkRect =
      _ImGuiViewportP_GetWorkRectPtr.asFunction<
          void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiViewportP>)>();

  void ImGuiViewportP_GetBuildWorkRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiViewportP> self,
  ) {
    return _ImGuiViewportP_GetBuildWorkRect(
      pOut,
      self,
    );
  }

  late final _ImGuiViewportP_GetBuildWorkRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiViewportP>)>>('ImGuiViewportP_GetBuildWorkRect');
  late final _ImGuiViewportP_GetBuildWorkRect =
      _ImGuiViewportP_GetBuildWorkRectPtr.asFunction<
          void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiViewportP>)>();

  ffi.Pointer<ImGuiWindowSettings> ImGuiWindowSettings_ImGuiWindowSettings() {
    return _ImGuiWindowSettings_ImGuiWindowSettings();
  }

  late final _ImGuiWindowSettings_ImGuiWindowSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindowSettings> Function()>>(
          'ImGuiWindowSettings_ImGuiWindowSettings');
  late final _ImGuiWindowSettings_ImGuiWindowSettings =
      _ImGuiWindowSettings_ImGuiWindowSettingsPtr.asFunction<
          ffi.Pointer<ImGuiWindowSettings> Function()>();

  void ImGuiWindowSettings_destroy(
    ffi.Pointer<ImGuiWindowSettings> self,
  ) {
    return _ImGuiWindowSettings_destroy(
      self,
    );
  }

  late final _ImGuiWindowSettings_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindowSettings>)>>(
      'ImGuiWindowSettings_destroy');
  late final _ImGuiWindowSettings_destroy = _ImGuiWindowSettings_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindowSettings>)>();

  ffi.Pointer<ffi.Char> ImGuiWindowSettings_GetName(
    ffi.Pointer<ImGuiWindowSettings> self,
  ) {
    return _ImGuiWindowSettings_GetName(
      self,
    );
  }

  late final _ImGuiWindowSettings_GetNamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<ImGuiWindowSettings>)>>(
      'ImGuiWindowSettings_GetName');
  late final _ImGuiWindowSettings_GetName =
      _ImGuiWindowSettings_GetNamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiWindowSettings>)>();

  ffi.Pointer<ImGuiSettingsHandler>
      ImGuiSettingsHandler_ImGuiSettingsHandler() {
    return _ImGuiSettingsHandler_ImGuiSettingsHandler();
  }

  late final _ImGuiSettingsHandler_ImGuiSettingsHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiSettingsHandler> Function()>>(
          'ImGuiSettingsHandler_ImGuiSettingsHandler');
  late final _ImGuiSettingsHandler_ImGuiSettingsHandler =
      _ImGuiSettingsHandler_ImGuiSettingsHandlerPtr.asFunction<
          ffi.Pointer<ImGuiSettingsHandler> Function()>();

  void ImGuiSettingsHandler_destroy(
    ffi.Pointer<ImGuiSettingsHandler> self,
  ) {
    return _ImGuiSettingsHandler_destroy(
      self,
    );
  }

  late final _ImGuiSettingsHandler_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiSettingsHandler>)>>(
      'ImGuiSettingsHandler_destroy');
  late final _ImGuiSettingsHandler_destroy = _ImGuiSettingsHandler_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiSettingsHandler>)>();

  ffi.Pointer<ImGuiDebugAllocInfo> ImGuiDebugAllocInfo_ImGuiDebugAllocInfo() {
    return _ImGuiDebugAllocInfo_ImGuiDebugAllocInfo();
  }

  late final _ImGuiDebugAllocInfo_ImGuiDebugAllocInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiDebugAllocInfo> Function()>>(
          'ImGuiDebugAllocInfo_ImGuiDebugAllocInfo');
  late final _ImGuiDebugAllocInfo_ImGuiDebugAllocInfo =
      _ImGuiDebugAllocInfo_ImGuiDebugAllocInfoPtr.asFunction<
          ffi.Pointer<ImGuiDebugAllocInfo> Function()>();

  void ImGuiDebugAllocInfo_destroy(
    ffi.Pointer<ImGuiDebugAllocInfo> self,
  ) {
    return _ImGuiDebugAllocInfo_destroy(
      self,
    );
  }

  late final _ImGuiDebugAllocInfo_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiDebugAllocInfo>)>>(
      'ImGuiDebugAllocInfo_destroy');
  late final _ImGuiDebugAllocInfo_destroy = _ImGuiDebugAllocInfo_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiDebugAllocInfo>)>();

  ffi.Pointer<ImGuiStackLevelInfo> ImGuiStackLevelInfo_ImGuiStackLevelInfo() {
    return _ImGuiStackLevelInfo_ImGuiStackLevelInfo();
  }

  late final _ImGuiStackLevelInfo_ImGuiStackLevelInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiStackLevelInfo> Function()>>(
          'ImGuiStackLevelInfo_ImGuiStackLevelInfo');
  late final _ImGuiStackLevelInfo_ImGuiStackLevelInfo =
      _ImGuiStackLevelInfo_ImGuiStackLevelInfoPtr.asFunction<
          ffi.Pointer<ImGuiStackLevelInfo> Function()>();

  void ImGuiStackLevelInfo_destroy(
    ffi.Pointer<ImGuiStackLevelInfo> self,
  ) {
    return _ImGuiStackLevelInfo_destroy(
      self,
    );
  }

  late final _ImGuiStackLevelInfo_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiStackLevelInfo>)>>(
      'ImGuiStackLevelInfo_destroy');
  late final _ImGuiStackLevelInfo_destroy = _ImGuiStackLevelInfo_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiStackLevelInfo>)>();

  ffi.Pointer<ImGuiIDStackTool> ImGuiIDStackTool_ImGuiIDStackTool() {
    return _ImGuiIDStackTool_ImGuiIDStackTool();
  }

  late final _ImGuiIDStackTool_ImGuiIDStackToolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiIDStackTool> Function()>>(
          'ImGuiIDStackTool_ImGuiIDStackTool');
  late final _ImGuiIDStackTool_ImGuiIDStackTool =
      _ImGuiIDStackTool_ImGuiIDStackToolPtr.asFunction<
          ffi.Pointer<ImGuiIDStackTool> Function()>();

  void ImGuiIDStackTool_destroy(
    ffi.Pointer<ImGuiIDStackTool> self,
  ) {
    return _ImGuiIDStackTool_destroy(
      self,
    );
  }

  late final _ImGuiIDStackTool_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiIDStackTool>)>>(
      'ImGuiIDStackTool_destroy');
  late final _ImGuiIDStackTool_destroy = _ImGuiIDStackTool_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiIDStackTool>)>();

  ffi.Pointer<ImGuiContextHook> ImGuiContextHook_ImGuiContextHook() {
    return _ImGuiContextHook_ImGuiContextHook();
  }

  late final _ImGuiContextHook_ImGuiContextHookPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiContextHook> Function()>>(
          'ImGuiContextHook_ImGuiContextHook');
  late final _ImGuiContextHook_ImGuiContextHook =
      _ImGuiContextHook_ImGuiContextHookPtr.asFunction<
          ffi.Pointer<ImGuiContextHook> Function()>();

  void ImGuiContextHook_destroy(
    ffi.Pointer<ImGuiContextHook> self,
  ) {
    return _ImGuiContextHook_destroy(
      self,
    );
  }

  late final _ImGuiContextHook_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContextHook>)>>(
      'ImGuiContextHook_destroy');
  late final _ImGuiContextHook_destroy = _ImGuiContextHook_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContextHook>)>();

  ffi.Pointer<ImGuiContext> ImGuiContext_ImGuiContext(
    ffi.Pointer<ImFontAtlas> shared_font_atlas,
  ) {
    return _ImGuiContext_ImGuiContext(
      shared_font_atlas,
    );
  }

  late final _ImGuiContext_ImGuiContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiContext> Function(
              ffi.Pointer<ImFontAtlas>)>>('ImGuiContext_ImGuiContext');
  late final _ImGuiContext_ImGuiContext =
      _ImGuiContext_ImGuiContextPtr.asFunction<
          ffi.Pointer<ImGuiContext> Function(ffi.Pointer<ImFontAtlas>)>();

  void ImGuiContext_destroy(
    ffi.Pointer<ImGuiContext> self,
  ) {
    return _ImGuiContext_destroy(
      self,
    );
  }

  late final _ImGuiContext_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'ImGuiContext_destroy');
  late final _ImGuiContext_destroy = _ImGuiContext_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiContext>)>();

  ffi.Pointer<ImGuiWindow> ImGuiWindow_ImGuiWindow(
    ffi.Pointer<ImGuiContext> context,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ImGuiWindow_ImGuiWindow(
      context,
      name,
    );
  }

  late final _ImGuiWindow_ImGuiWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiWindow> Function(ffi.Pointer<ImGuiContext>,
              ffi.Pointer<ffi.Char>)>>('ImGuiWindow_ImGuiWindow');
  late final _ImGuiWindow_ImGuiWindow = _ImGuiWindow_ImGuiWindowPtr.asFunction<
      ffi.Pointer<ImGuiWindow> Function(
          ffi.Pointer<ImGuiContext>, ffi.Pointer<ffi.Char>)>();

  void ImGuiWindow_destroy(
    ffi.Pointer<ImGuiWindow> self,
  ) {
    return _ImGuiWindow_destroy(
      self,
    );
  }

  late final _ImGuiWindow_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'ImGuiWindow_destroy');
  late final _ImGuiWindow_destroy = _ImGuiWindow_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiWindow>)>();

  int ImGuiWindow_GetID_Str(
    ffi.Pointer<ImGuiWindow> self,
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> str_end,
  ) {
    return _ImGuiWindow_GetID_Str(
      self,
      str,
      str_end,
    );
  }

  late final _ImGuiWindow_GetID_StrPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ImGuiWindow_GetID_Str');
  late final _ImGuiWindow_GetID_Str = _ImGuiWindow_GetID_StrPtr.asFunction<
      int Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ImGuiWindow_GetID_Ptr(
    ffi.Pointer<ImGuiWindow> self,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ImGuiWindow_GetID_Ptr(
      self,
      ptr,
    );
  }

  late final _ImGuiWindow_GetID_PtrPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ffi.Void>)>>('ImGuiWindow_GetID_Ptr');
  late final _ImGuiWindow_GetID_Ptr = _ImGuiWindow_GetID_PtrPtr.asFunction<
      int Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ffi.Void>)>();

  int ImGuiWindow_GetID_Int(
    ffi.Pointer<ImGuiWindow> self,
    int n,
  ) {
    return _ImGuiWindow_GetID_Int(
      self,
      n,
    );
  }

  late final _ImGuiWindow_GetID_IntPtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiWindow>, ffi.Int)>>(
      'ImGuiWindow_GetID_Int');
  late final _ImGuiWindow_GetID_Int = _ImGuiWindow_GetID_IntPtr.asFunction<
      int Function(ffi.Pointer<ImGuiWindow>, int)>();

  int ImGuiWindow_GetIDFromPos(
    ffi.Pointer<ImGuiWindow> self,
    ImVec2 p_abs,
  ) {
    return _ImGuiWindow_GetIDFromPos(
      self,
      p_abs,
    );
  }

  late final _ImGuiWindow_GetIDFromPosPtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiWindow>, ImVec2)>>(
      'ImGuiWindow_GetIDFromPos');
  late final _ImGuiWindow_GetIDFromPos = _ImGuiWindow_GetIDFromPosPtr
      .asFunction<int Function(ffi.Pointer<ImGuiWindow>, ImVec2)>();

  int ImGuiWindow_GetIDFromRectangle(
    ffi.Pointer<ImGuiWindow> self,
    ImRect r_abs,
  ) {
    return _ImGuiWindow_GetIDFromRectangle(
      self,
      r_abs,
    );
  }

  late final _ImGuiWindow_GetIDFromRectanglePtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiWindow>, ImRect)>>(
      'ImGuiWindow_GetIDFromRectangle');
  late final _ImGuiWindow_GetIDFromRectangle =
      _ImGuiWindow_GetIDFromRectanglePtr.asFunction<
          int Function(ffi.Pointer<ImGuiWindow>, ImRect)>();

  void ImGuiWindow_Rect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> self,
  ) {
    return _ImGuiWindow_Rect(
      pOut,
      self,
    );
  }

  late final _ImGuiWindow_RectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiWindow>)>>('ImGuiWindow_Rect');
  late final _ImGuiWindow_Rect = _ImGuiWindow_RectPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>)>();

  double ImGuiWindow_CalcFontSize(
    ffi.Pointer<ImGuiWindow> self,
  ) {
    return _ImGuiWindow_CalcFontSize(
      self,
    );
  }

  late final _ImGuiWindow_CalcFontSizePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ImGuiWindow>)>>(
          'ImGuiWindow_CalcFontSize');
  late final _ImGuiWindow_CalcFontSize = _ImGuiWindow_CalcFontSizePtr
      .asFunction<double Function(ffi.Pointer<ImGuiWindow>)>();

  void ImGuiWindow_TitleBarRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> self,
  ) {
    return _ImGuiWindow_TitleBarRect(
      pOut,
      self,
    );
  }

  late final _ImGuiWindow_TitleBarRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiWindow>)>>('ImGuiWindow_TitleBarRect');
  late final _ImGuiWindow_TitleBarRect =
      _ImGuiWindow_TitleBarRectPtr.asFunction<
          void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>)>();

  void ImGuiWindow_MenuBarRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> self,
  ) {
    return _ImGuiWindow_MenuBarRect(
      pOut,
      self,
    );
  }

  late final _ImGuiWindow_MenuBarRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiWindow>)>>('ImGuiWindow_MenuBarRect');
  late final _ImGuiWindow_MenuBarRect = _ImGuiWindow_MenuBarRectPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>)>();

  ffi.Pointer<ImGuiTabItem> ImGuiTabItem_ImGuiTabItem() {
    return _ImGuiTabItem_ImGuiTabItem();
  }

  late final _ImGuiTabItem_ImGuiTabItemPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTabItem> Function()>>(
          'ImGuiTabItem_ImGuiTabItem');
  late final _ImGuiTabItem_ImGuiTabItem = _ImGuiTabItem_ImGuiTabItemPtr
      .asFunction<ffi.Pointer<ImGuiTabItem> Function()>();

  void ImGuiTabItem_destroy(
    ffi.Pointer<ImGuiTabItem> self,
  ) {
    return _ImGuiTabItem_destroy(
      self,
    );
  }

  late final _ImGuiTabItem_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTabItem>)>>(
          'ImGuiTabItem_destroy');
  late final _ImGuiTabItem_destroy = _ImGuiTabItem_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTabItem>)>();

  ffi.Pointer<ImGuiTabBar> ImGuiTabBar_ImGuiTabBar() {
    return _ImGuiTabBar_ImGuiTabBar();
  }

  late final _ImGuiTabBar_ImGuiTabBarPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTabBar> Function()>>(
          'ImGuiTabBar_ImGuiTabBar');
  late final _ImGuiTabBar_ImGuiTabBar = _ImGuiTabBar_ImGuiTabBarPtr.asFunction<
      ffi.Pointer<ImGuiTabBar> Function()>();

  void ImGuiTabBar_destroy(
    ffi.Pointer<ImGuiTabBar> self,
  ) {
    return _ImGuiTabBar_destroy(
      self,
    );
  }

  late final _ImGuiTabBar_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTabBar>)>>(
          'ImGuiTabBar_destroy');
  late final _ImGuiTabBar_destroy = _ImGuiTabBar_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTabBar>)>();

  ffi.Pointer<ImGuiTableColumn> ImGuiTableColumn_ImGuiTableColumn() {
    return _ImGuiTableColumn_ImGuiTableColumn();
  }

  late final _ImGuiTableColumn_ImGuiTableColumnPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTableColumn> Function()>>(
          'ImGuiTableColumn_ImGuiTableColumn');
  late final _ImGuiTableColumn_ImGuiTableColumn =
      _ImGuiTableColumn_ImGuiTableColumnPtr.asFunction<
          ffi.Pointer<ImGuiTableColumn> Function()>();

  void ImGuiTableColumn_destroy(
    ffi.Pointer<ImGuiTableColumn> self,
  ) {
    return _ImGuiTableColumn_destroy(
      self,
    );
  }

  late final _ImGuiTableColumn_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTableColumn>)>>(
      'ImGuiTableColumn_destroy');
  late final _ImGuiTableColumn_destroy = _ImGuiTableColumn_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTableColumn>)>();

  ffi.Pointer<ImGuiTableInstanceData>
      ImGuiTableInstanceData_ImGuiTableInstanceData() {
    return _ImGuiTableInstanceData_ImGuiTableInstanceData();
  }

  late final _ImGuiTableInstanceData_ImGuiTableInstanceDataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiTableInstanceData> Function()>>(
      'ImGuiTableInstanceData_ImGuiTableInstanceData');
  late final _ImGuiTableInstanceData_ImGuiTableInstanceData =
      _ImGuiTableInstanceData_ImGuiTableInstanceDataPtr.asFunction<
          ffi.Pointer<ImGuiTableInstanceData> Function()>();

  void ImGuiTableInstanceData_destroy(
    ffi.Pointer<ImGuiTableInstanceData> self,
  ) {
    return _ImGuiTableInstanceData_destroy(
      self,
    );
  }

  late final _ImGuiTableInstanceData_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiTableInstanceData>)>>(
      'ImGuiTableInstanceData_destroy');
  late final _ImGuiTableInstanceData_destroy =
      _ImGuiTableInstanceData_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiTableInstanceData>)>();

  ffi.Pointer<ImGuiTable> ImGuiTable_ImGuiTable() {
    return _ImGuiTable_ImGuiTable();
  }

  late final _ImGuiTable_ImGuiTablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTable> Function()>>(
          'ImGuiTable_ImGuiTable');
  late final _ImGuiTable_ImGuiTable = _ImGuiTable_ImGuiTablePtr.asFunction<
      ffi.Pointer<ImGuiTable> Function()>();

  void ImGuiTable_destroy(
    ffi.Pointer<ImGuiTable> self,
  ) {
    return _ImGuiTable_destroy(
      self,
    );
  }

  late final _ImGuiTable_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'ImGuiTable_destroy');
  late final _ImGuiTable_destroy = _ImGuiTable_destroyPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTable>)>();

  ffi.Pointer<ImGuiTableTempData> ImGuiTableTempData_ImGuiTableTempData() {
    return _ImGuiTableTempData_ImGuiTableTempData();
  }

  late final _ImGuiTableTempData_ImGuiTableTempDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTableTempData> Function()>>(
          'ImGuiTableTempData_ImGuiTableTempData');
  late final _ImGuiTableTempData_ImGuiTableTempData =
      _ImGuiTableTempData_ImGuiTableTempDataPtr.asFunction<
          ffi.Pointer<ImGuiTableTempData> Function()>();

  void ImGuiTableTempData_destroy(
    ffi.Pointer<ImGuiTableTempData> self,
  ) {
    return _ImGuiTableTempData_destroy(
      self,
    );
  }

  late final _ImGuiTableTempData_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTableTempData>)>>(
      'ImGuiTableTempData_destroy');
  late final _ImGuiTableTempData_destroy = _ImGuiTableTempData_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTableTempData>)>();

  ffi.Pointer<ImGuiTableColumnSettings>
      ImGuiTableColumnSettings_ImGuiTableColumnSettings() {
    return _ImGuiTableColumnSettings_ImGuiTableColumnSettings();
  }

  late final _ImGuiTableColumnSettings_ImGuiTableColumnSettingsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ImGuiTableColumnSettings> Function()>>(
      'ImGuiTableColumnSettings_ImGuiTableColumnSettings');
  late final _ImGuiTableColumnSettings_ImGuiTableColumnSettings =
      _ImGuiTableColumnSettings_ImGuiTableColumnSettingsPtr.asFunction<
          ffi.Pointer<ImGuiTableColumnSettings> Function()>();

  void ImGuiTableColumnSettings_destroy(
    ffi.Pointer<ImGuiTableColumnSettings> self,
  ) {
    return _ImGuiTableColumnSettings_destroy(
      self,
    );
  }

  late final _ImGuiTableColumnSettings_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiTableColumnSettings>)>>(
      'ImGuiTableColumnSettings_destroy');
  late final _ImGuiTableColumnSettings_destroy =
      _ImGuiTableColumnSettings_destroyPtr.asFunction<
          void Function(ffi.Pointer<ImGuiTableColumnSettings>)>();

  ffi.Pointer<ImGuiTableSettings> ImGuiTableSettings_ImGuiTableSettings() {
    return _ImGuiTableSettings_ImGuiTableSettings();
  }

  late final _ImGuiTableSettings_ImGuiTableSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTableSettings> Function()>>(
          'ImGuiTableSettings_ImGuiTableSettings');
  late final _ImGuiTableSettings_ImGuiTableSettings =
      _ImGuiTableSettings_ImGuiTableSettingsPtr.asFunction<
          ffi.Pointer<ImGuiTableSettings> Function()>();

  void ImGuiTableSettings_destroy(
    ffi.Pointer<ImGuiTableSettings> self,
  ) {
    return _ImGuiTableSettings_destroy(
      self,
    );
  }

  late final _ImGuiTableSettings_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTableSettings>)>>(
      'ImGuiTableSettings_destroy');
  late final _ImGuiTableSettings_destroy = _ImGuiTableSettings_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTableSettings>)>();

  ffi.Pointer<ImGuiTableColumnSettings> ImGuiTableSettings_GetColumnSettings(
    ffi.Pointer<ImGuiTableSettings> self,
  ) {
    return _ImGuiTableSettings_GetColumnSettings(
      self,
    );
  }

  late final _ImGuiTableSettings_GetColumnSettingsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImGuiTableColumnSettings> Function(
                  ffi.Pointer<ImGuiTableSettings>)>>(
      'ImGuiTableSettings_GetColumnSettings');
  late final _ImGuiTableSettings_GetColumnSettings =
      _ImGuiTableSettings_GetColumnSettingsPtr.asFunction<
          ffi.Pointer<ImGuiTableColumnSettings> Function(
              ffi.Pointer<ImGuiTableSettings>)>();

  ffi.Pointer<ImGuiIO> igGetIOEx(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igGetIOEx(
      ctx,
    );
  }

  late final _igGetIOExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiIO> Function(
              ffi.Pointer<ImGuiContext>)>>('igGetIOEx');
  late final _igGetIOEx = _igGetIOExPtr
      .asFunction<ffi.Pointer<ImGuiIO> Function(ffi.Pointer<ImGuiContext>)>();

  ffi.Pointer<ImGuiPlatformIO> igGetPlatformIOEx(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igGetPlatformIOEx(
      ctx,
    );
  }

  late final _igGetPlatformIOExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiPlatformIO> Function(
              ffi.Pointer<ImGuiContext>)>>('igGetPlatformIOEx');
  late final _igGetPlatformIOEx = _igGetPlatformIOExPtr.asFunction<
      ffi.Pointer<ImGuiPlatformIO> Function(ffi.Pointer<ImGuiContext>)>();

  ffi.Pointer<ImGuiWindow> igGetCurrentWindowRead() {
    return _igGetCurrentWindowRead();
  }

  late final _igGetCurrentWindowReadPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindow> Function()>>(
          'igGetCurrentWindowRead');
  late final _igGetCurrentWindowRead = _igGetCurrentWindowReadPtr
      .asFunction<ffi.Pointer<ImGuiWindow> Function()>();

  ffi.Pointer<ImGuiWindow> igGetCurrentWindow() {
    return _igGetCurrentWindow();
  }

  late final _igGetCurrentWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindow> Function()>>(
          'igGetCurrentWindow');
  late final _igGetCurrentWindow =
      _igGetCurrentWindowPtr.asFunction<ffi.Pointer<ImGuiWindow> Function()>();

  ffi.Pointer<ImGuiWindow> igFindWindowByID(
    int id,
  ) {
    return _igFindWindowByID(
      id,
    );
  }

  late final _igFindWindowByIDPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindow> Function(ImGuiID)>>(
          'igFindWindowByID');
  late final _igFindWindowByID =
      _igFindWindowByIDPtr.asFunction<ffi.Pointer<ImGuiWindow> Function(int)>();

  ffi.Pointer<ImGuiWindow> igFindWindowByName(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _igFindWindowByName(
      name,
    );
  }

  late final _igFindWindowByNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiWindow> Function(
              ffi.Pointer<ffi.Char>)>>('igFindWindowByName');
  late final _igFindWindowByName = _igFindWindowByNamePtr
      .asFunction<ffi.Pointer<ImGuiWindow> Function(ffi.Pointer<ffi.Char>)>();

  void igUpdateWindowParentAndRootLinks(
    ffi.Pointer<ImGuiWindow> window,
    int flags,
    ffi.Pointer<ImGuiWindow> parent_window,
  ) {
    return _igUpdateWindowParentAndRootLinks(
      window,
      flags,
      parent_window,
    );
  }

  late final _igUpdateWindowParentAndRootLinksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImGuiWindowFlags,
              ffi.Pointer<ImGuiWindow>)>>('igUpdateWindowParentAndRootLinks');
  late final _igUpdateWindowParentAndRootLinks =
      _igUpdateWindowParentAndRootLinksPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiWindow>, int, ffi.Pointer<ImGuiWindow>)>();

  void igUpdateWindowSkipRefresh(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igUpdateWindowSkipRefresh(
      window,
    );
  }

  late final _igUpdateWindowSkipRefreshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igUpdateWindowSkipRefresh');
  late final _igUpdateWindowSkipRefresh = _igUpdateWindowSkipRefreshPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igCalcWindowNextAutoFitSize(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igCalcWindowNextAutoFitSize(
      pOut,
      window,
    );
  }

  late final _igCalcWindowNextAutoFitSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImGuiWindow>)>>('igCalcWindowNextAutoFitSize');
  late final _igCalcWindowNextAutoFitSize =
      _igCalcWindowNextAutoFitSizePtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>)>();

  bool igIsWindowChildOf(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiWindow> potential_parent,
    bool popup_hierarchy,
    bool dock_hierarchy,
  ) {
    return _igIsWindowChildOf(
      window,
      potential_parent,
      popup_hierarchy,
      dock_hierarchy,
    );
  }

  late final _igIsWindowChildOfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>,
              ffi.Bool, ffi.Bool)>>('igIsWindowChildOf');
  late final _igIsWindowChildOf = _igIsWindowChildOfPtr.asFunction<
      bool Function(
          ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>, bool, bool)>();

  bool igIsWindowWithinBeginStackOf(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiWindow> potential_parent,
  ) {
    return _igIsWindowWithinBeginStackOf(
      window,
      potential_parent,
    );
  }

  late final _igIsWindowWithinBeginStackOfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiWindow>)>>('igIsWindowWithinBeginStackOf');
  late final _igIsWindowWithinBeginStackOf =
      _igIsWindowWithinBeginStackOfPtr.asFunction<
          bool Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>)>();

  bool igIsWindowAbove(
    ffi.Pointer<ImGuiWindow> potential_above,
    ffi.Pointer<ImGuiWindow> potential_below,
  ) {
    return _igIsWindowAbove(
      potential_above,
      potential_below,
    );
  }

  late final _igIsWindowAbovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiWindow>)>>('igIsWindowAbove');
  late final _igIsWindowAbove = _igIsWindowAbovePtr.asFunction<
      bool Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>)>();

  bool igIsWindowNavFocusable(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igIsWindowNavFocusable(
      window,
    );
  }

  late final _igIsWindowNavFocusablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiWindow>)>>(
          'igIsWindowNavFocusable');
  late final _igIsWindowNavFocusable = _igIsWindowNavFocusablePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiWindow>)>();

  void igSetWindowPos_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    ImVec2 pos,
    int cond,
  ) {
    return _igSetWindowPos_WindowPtr(
      window,
      pos,
      cond,
    );
  }

  late final _igSetWindowPos_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImVec2,
              ImGuiCond)>>('igSetWindowPos_WindowPtr');
  late final _igSetWindowPos_WindowPtr = _igSetWindowPos_WindowPtrPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, ImVec2, int)>();

  void igSetWindowSize_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    ImVec2 size,
    int cond,
  ) {
    return _igSetWindowSize_WindowPtr(
      window,
      size,
      cond,
    );
  }

  late final _igSetWindowSize_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImVec2,
              ImGuiCond)>>('igSetWindowSize_WindowPtr');
  late final _igSetWindowSize_WindowPtr = _igSetWindowSize_WindowPtrPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, ImVec2, int)>();

  void igSetWindowCollapsed_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    bool collapsed,
    int cond,
  ) {
    return _igSetWindowCollapsed_WindowPtr(
      window,
      collapsed,
      cond,
    );
  }

  late final _igSetWindowCollapsed_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ffi.Bool,
              ImGuiCond)>>('igSetWindowCollapsed_WindowPtr');
  late final _igSetWindowCollapsed_WindowPtr =
      _igSetWindowCollapsed_WindowPtrPtr
          .asFunction<void Function(ffi.Pointer<ImGuiWindow>, bool, int)>();

  void igSetWindowHitTestHole(
    ffi.Pointer<ImGuiWindow> window,
    ImVec2 pos,
    ImVec2 size,
  ) {
    return _igSetWindowHitTestHole(
      window,
      pos,
      size,
    );
  }

  late final _igSetWindowHitTestHolePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImVec2,
              ImVec2)>>('igSetWindowHitTestHole');
  late final _igSetWindowHitTestHole = _igSetWindowHitTestHolePtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, ImVec2, ImVec2)>();

  void igSetWindowHiddenAndSkipItemsForCurrentFrame(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igSetWindowHiddenAndSkipItemsForCurrentFrame(
      window,
    );
  }

  late final _igSetWindowHiddenAndSkipItemsForCurrentFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igSetWindowHiddenAndSkipItemsForCurrentFrame');
  late final _igSetWindowHiddenAndSkipItemsForCurrentFrame =
      _igSetWindowHiddenAndSkipItemsForCurrentFramePtr
          .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igSetWindowParentWindowForFocusRoute(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiWindow> parent_window,
  ) {
    return _igSetWindowParentWindowForFocusRoute(
      window,
      parent_window,
    );
  }

  late final _igSetWindowParentWindowForFocusRoutePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>)>>(
      'igSetWindowParentWindowForFocusRoute');
  late final _igSetWindowParentWindowForFocusRoute =
      _igSetWindowParentWindowForFocusRoutePtr.asFunction<
          void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>)>();

  void igWindowRectAbsToRel(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> window,
    ImRect r,
  ) {
    return _igWindowRectAbsToRel(
      pOut,
      window,
      r,
    );
  }

  late final _igWindowRectAbsToRelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>,
              ImRect)>>('igWindowRectAbsToRel');
  late final _igWindowRectAbsToRel = _igWindowRectAbsToRelPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>, ImRect)>();

  void igWindowRectRelToAbs(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> window,
    ImRect r,
  ) {
    return _igWindowRectRelToAbs(
      pOut,
      window,
      r,
    );
  }

  late final _igWindowRectRelToAbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>,
              ImRect)>>('igWindowRectRelToAbs');
  late final _igWindowRectRelToAbs = _igWindowRectRelToAbsPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>, ImRect)>();

  void igWindowPosAbsToRel(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiWindow> window,
    ImVec2 p,
  ) {
    return _igWindowPosAbsToRel(
      pOut,
      window,
      p,
    );
  }

  late final _igWindowPosAbsToRelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>,
              ImVec2)>>('igWindowPosAbsToRel');
  late final _igWindowPosAbsToRel = _igWindowPosAbsToRelPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>, ImVec2)>();

  void igWindowPosRelToAbs(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiWindow> window,
    ImVec2 p,
  ) {
    return _igWindowPosRelToAbs(
      pOut,
      window,
      p,
    );
  }

  late final _igWindowPosRelToAbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>,
              ImVec2)>>('igWindowPosRelToAbs');
  late final _igWindowPosRelToAbs = _igWindowPosRelToAbsPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>, ImVec2)>();

  void igFocusWindow(
    ffi.Pointer<ImGuiWindow> window,
    int flags,
  ) {
    return _igFocusWindow(
      window,
      flags,
    );
  }

  late final _igFocusWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ImGuiFocusRequestFlags)>>('igFocusWindow');
  late final _igFocusWindow = _igFocusWindowPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, int)>();

  void igFocusTopMostWindowUnderOne(
    ffi.Pointer<ImGuiWindow> under_this_window,
    ffi.Pointer<ImGuiWindow> ignore_window,
    ffi.Pointer<ImGuiViewport> filter_viewport,
    int flags,
  ) {
    return _igFocusTopMostWindowUnderOne(
      under_this_window,
      ignore_window,
      filter_viewport,
      flags,
    );
  }

  late final _igFocusTopMostWindowUnderOnePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiViewport>,
              ImGuiFocusRequestFlags)>>('igFocusTopMostWindowUnderOne');
  late final _igFocusTopMostWindowUnderOne =
      _igFocusTopMostWindowUnderOnePtr.asFunction<
          void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiViewport>, int)>();

  void igBringWindowToFocusFront(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igBringWindowToFocusFront(
      window,
    );
  }

  late final _igBringWindowToFocusFrontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igBringWindowToFocusFront');
  late final _igBringWindowToFocusFront = _igBringWindowToFocusFrontPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igBringWindowToDisplayFront(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igBringWindowToDisplayFront(
      window,
    );
  }

  late final _igBringWindowToDisplayFrontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igBringWindowToDisplayFront');
  late final _igBringWindowToDisplayFront = _igBringWindowToDisplayFrontPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igBringWindowToDisplayBack(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igBringWindowToDisplayBack(
      window,
    );
  }

  late final _igBringWindowToDisplayBackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igBringWindowToDisplayBack');
  late final _igBringWindowToDisplayBack = _igBringWindowToDisplayBackPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igBringWindowToDisplayBehind(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiWindow> above_window,
  ) {
    return _igBringWindowToDisplayBehind(
      window,
      above_window,
    );
  }

  late final _igBringWindowToDisplayBehindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiWindow>)>>('igBringWindowToDisplayBehind');
  late final _igBringWindowToDisplayBehind =
      _igBringWindowToDisplayBehindPtr.asFunction<
          void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiWindow>)>();

  int igFindWindowDisplayIndex(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igFindWindowDisplayIndex(
      window,
    );
  }

  late final _igFindWindowDisplayIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiWindow>)>>(
          'igFindWindowDisplayIndex');
  late final _igFindWindowDisplayIndex = _igFindWindowDisplayIndexPtr
      .asFunction<int Function(ffi.Pointer<ImGuiWindow>)>();

  ffi.Pointer<ImGuiWindow> igFindBottomMostVisibleWindowWithinBeginStack(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igFindBottomMostVisibleWindowWithinBeginStack(
      window,
    );
  }

  late final _igFindBottomMostVisibleWindowWithinBeginStackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImGuiWindow> Function(ffi.Pointer<ImGuiWindow>)>>(
      'igFindBottomMostVisibleWindowWithinBeginStack');
  late final _igFindBottomMostVisibleWindowWithinBeginStack =
      _igFindBottomMostVisibleWindowWithinBeginStackPtr.asFunction<
          ffi.Pointer<ImGuiWindow> Function(ffi.Pointer<ImGuiWindow>)>();

  void igSetNextWindowRefreshPolicy(
    int flags,
  ) {
    return _igSetNextWindowRefreshPolicy(
      flags,
    );
  }

  late final _igSetNextWindowRefreshPolicyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiWindowRefreshFlags)>>(
          'igSetNextWindowRefreshPolicy');
  late final _igSetNextWindowRefreshPolicy =
      _igSetNextWindowRefreshPolicyPtr.asFunction<void Function(int)>();

  void igSetCurrentFont(
    ffi.Pointer<ImFont> font,
  ) {
    return _igSetCurrentFont(
      font,
    );
  }

  late final _igSetCurrentFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>)>>(
          'igSetCurrentFont');
  late final _igSetCurrentFont =
      _igSetCurrentFontPtr.asFunction<void Function(ffi.Pointer<ImFont>)>();

  ffi.Pointer<ImFont> igGetDefaultFont() {
    return _igGetDefaultFont();
  }

  late final _igGetDefaultFontPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImFont> Function()>>(
          'igGetDefaultFont');
  late final _igGetDefaultFont =
      _igGetDefaultFontPtr.asFunction<ffi.Pointer<ImFont> Function()>();

  ffi.Pointer<ImDrawList> igGetForegroundDrawList_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igGetForegroundDrawList_WindowPtr(
      window,
    );
  }

  late final _igGetForegroundDrawList_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImDrawList> Function(
              ffi.Pointer<ImGuiWindow>)>>('igGetForegroundDrawList_WindowPtr');
  late final _igGetForegroundDrawList_WindowPtr =
      _igGetForegroundDrawList_WindowPtrPtr.asFunction<
          ffi.Pointer<ImDrawList> Function(ffi.Pointer<ImGuiWindow>)>();

  void igAddDrawListToDrawDataEx(
    ffi.Pointer<ImDrawData> draw_data,
    ffi.Pointer<ImVector_ImDrawListPtr> out_list,
    ffi.Pointer<ImDrawList> draw_list,
  ) {
    return _igAddDrawListToDrawDataEx(
      draw_data,
      out_list,
      draw_list,
    );
  }

  late final _igAddDrawListToDrawDataExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawData>,
              ffi.Pointer<ImVector_ImDrawListPtr>,
              ffi.Pointer<ImDrawList>)>>('igAddDrawListToDrawDataEx');
  late final _igAddDrawListToDrawDataEx =
      _igAddDrawListToDrawDataExPtr.asFunction<
          void Function(ffi.Pointer<ImDrawData>,
              ffi.Pointer<ImVector_ImDrawListPtr>, ffi.Pointer<ImDrawList>)>();

  void igInitialize() {
    return _igInitialize();
  }

  late final _igInitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igInitialize');
  late final _igInitialize = _igInitializePtr.asFunction<void Function()>();

  void igShutdown() {
    return _igShutdown();
  }

  late final _igShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igShutdown');
  late final _igShutdown = _igShutdownPtr.asFunction<void Function()>();

  void igUpdateInputEvents(
    bool trickle_fast_inputs,
  ) {
    return _igUpdateInputEvents(
      trickle_fast_inputs,
    );
  }

  late final _igUpdateInputEventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'igUpdateInputEvents');
  late final _igUpdateInputEvents =
      _igUpdateInputEventsPtr.asFunction<void Function(bool)>();

  void igUpdateHoveredWindowAndCaptureFlags() {
    return _igUpdateHoveredWindowAndCaptureFlags();
  }

  late final _igUpdateHoveredWindowAndCaptureFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igUpdateHoveredWindowAndCaptureFlags');
  late final _igUpdateHoveredWindowAndCaptureFlags =
      _igUpdateHoveredWindowAndCaptureFlagsPtr.asFunction<void Function()>();

  void igFindHoveredWindowEx(
    ImVec2 pos,
    bool find_first_and_in_any_viewport,
    ffi.Pointer<ffi.Pointer<ImGuiWindow>> out_hovered_window,
    ffi.Pointer<ffi.Pointer<ImGuiWindow>>
        out_hovered_window_under_moving_window,
  ) {
    return _igFindHoveredWindowEx(
      pos,
      find_first_and_in_any_viewport,
      out_hovered_window,
      out_hovered_window_under_moving_window,
    );
  }

  late final _igFindHoveredWindowExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImVec2,
              ffi.Bool,
              ffi.Pointer<ffi.Pointer<ImGuiWindow>>,
              ffi.Pointer<ffi.Pointer<ImGuiWindow>>)>>('igFindHoveredWindowEx');
  late final _igFindHoveredWindowEx = _igFindHoveredWindowExPtr.asFunction<
      void Function(ImVec2, bool, ffi.Pointer<ffi.Pointer<ImGuiWindow>>,
          ffi.Pointer<ffi.Pointer<ImGuiWindow>>)>();

  void igStartMouseMovingWindow(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igStartMouseMovingWindow(
      window,
    );
  }

  late final _igStartMouseMovingWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igStartMouseMovingWindow');
  late final _igStartMouseMovingWindow = _igStartMouseMovingWindowPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igStartMouseMovingWindowOrNode(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiDockNode> node,
    bool undock,
  ) {
    return _igStartMouseMovingWindowOrNode(
      window,
      node,
      undock,
    );
  }

  late final _igStartMouseMovingWindowOrNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiDockNode>,
              ffi.Bool)>>('igStartMouseMovingWindowOrNode');
  late final _igStartMouseMovingWindowOrNode =
      _igStartMouseMovingWindowOrNodePtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiDockNode>, bool)>();

  void igUpdateMouseMovingWindowNewFrame() {
    return _igUpdateMouseMovingWindowNewFrame();
  }

  late final _igUpdateMouseMovingWindowNewFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igUpdateMouseMovingWindowNewFrame');
  late final _igUpdateMouseMovingWindowNewFrame =
      _igUpdateMouseMovingWindowNewFramePtr.asFunction<void Function()>();

  void igUpdateMouseMovingWindowEndFrame() {
    return _igUpdateMouseMovingWindowEndFrame();
  }

  late final _igUpdateMouseMovingWindowEndFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igUpdateMouseMovingWindowEndFrame');
  late final _igUpdateMouseMovingWindowEndFrame =
      _igUpdateMouseMovingWindowEndFramePtr.asFunction<void Function()>();

  int igAddContextHook(
    ffi.Pointer<ImGuiContext> context,
    ffi.Pointer<ImGuiContextHook> hook,
  ) {
    return _igAddContextHook(
      context,
      hook,
    );
  }

  late final _igAddContextHookPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ffi.Pointer<ImGuiContext>,
              ffi.Pointer<ImGuiContextHook>)>>('igAddContextHook');
  late final _igAddContextHook = _igAddContextHookPtr.asFunction<
      int Function(ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiContextHook>)>();

  void igRemoveContextHook(
    ffi.Pointer<ImGuiContext> context,
    int hook_to_remove,
  ) {
    return _igRemoveContextHook(
      context,
      hook_to_remove,
    );
  }

  late final _igRemoveContextHookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiContext>, ImGuiID)>>('igRemoveContextHook');
  late final _igRemoveContextHook = _igRemoveContextHookPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>, int)>();

  void igCallContextHooks(
    ffi.Pointer<ImGuiContext> context,
    ImGuiContextHookType type,
  ) {
    return _igCallContextHooks(
      context,
      type.value,
    );
  }

  late final _igCallContextHooksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext>,
              ffi.UnsignedInt)>>('igCallContextHooks');
  late final _igCallContextHooks = _igCallContextHooksPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>, int)>();

  void igTranslateWindowsInViewport(
    ffi.Pointer<ImGuiViewportP> viewport,
    ImVec2 old_pos,
    ImVec2 new_pos,
    ImVec2 old_size,
    ImVec2 new_size,
  ) {
    return _igTranslateWindowsInViewport(
      viewport,
      old_pos,
      new_pos,
      old_size,
      new_size,
    );
  }

  late final _igTranslateWindowsInViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiViewportP>, ImVec2, ImVec2, ImVec2,
              ImVec2)>>('igTranslateWindowsInViewport');
  late final _igTranslateWindowsInViewport =
      _igTranslateWindowsInViewportPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiViewportP>, ImVec2, ImVec2, ImVec2, ImVec2)>();

  void igScaleWindowsInViewport(
    ffi.Pointer<ImGuiViewportP> viewport,
    double scale,
  ) {
    return _igScaleWindowsInViewport(
      viewport,
      scale,
    );
  }

  late final _igScaleWindowsInViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiViewportP>,
              ffi.Float)>>('igScaleWindowsInViewport');
  late final _igScaleWindowsInViewport = _igScaleWindowsInViewportPtr
      .asFunction<void Function(ffi.Pointer<ImGuiViewportP>, double)>();

  void igDestroyPlatformWindow(
    ffi.Pointer<ImGuiViewportP> viewport,
  ) {
    return _igDestroyPlatformWindow(
      viewport,
    );
  }

  late final _igDestroyPlatformWindowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewportP>)>>(
      'igDestroyPlatformWindow');
  late final _igDestroyPlatformWindow = _igDestroyPlatformWindowPtr
      .asFunction<void Function(ffi.Pointer<ImGuiViewportP>)>();

  void igSetWindowViewport(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiViewportP> viewport,
  ) {
    return _igSetWindowViewport(
      window,
      viewport,
    );
  }

  late final _igSetWindowViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiViewportP>)>>('igSetWindowViewport');
  late final _igSetWindowViewport = _igSetWindowViewportPtr.asFunction<
      void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiViewportP>)>();

  void igSetCurrentViewport(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiViewportP> viewport,
  ) {
    return _igSetCurrentViewport(
      window,
      viewport,
    );
  }

  late final _igSetCurrentViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiViewportP>)>>('igSetCurrentViewport');
  late final _igSetCurrentViewport = _igSetCurrentViewportPtr.asFunction<
      void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiViewportP>)>();

  ffi.Pointer<ImGuiPlatformMonitor> igGetViewportPlatformMonitor(
    ffi.Pointer<ImGuiViewport> viewport,
  ) {
    return _igGetViewportPlatformMonitor(
      viewport,
    );
  }

  late final _igGetViewportPlatformMonitorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiPlatformMonitor> Function(
              ffi.Pointer<ImGuiViewport>)>>('igGetViewportPlatformMonitor');
  late final _igGetViewportPlatformMonitor =
      _igGetViewportPlatformMonitorPtr.asFunction<
          ffi.Pointer<ImGuiPlatformMonitor> Function(
              ffi.Pointer<ImGuiViewport>)>();

  ffi.Pointer<ImGuiViewportP> igFindHoveredViewportFromPlatformWindowStack(
    ImVec2 mouse_platform_pos,
  ) {
    return _igFindHoveredViewportFromPlatformWindowStack(
      mouse_platform_pos,
    );
  }

  late final _igFindHoveredViewportFromPlatformWindowStackPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiViewportP> Function(ImVec2)>>(
          'igFindHoveredViewportFromPlatformWindowStack');
  late final _igFindHoveredViewportFromPlatformWindowStack =
      _igFindHoveredViewportFromPlatformWindowStackPtr
          .asFunction<ffi.Pointer<ImGuiViewportP> Function(ImVec2)>();

  void igMarkIniSettingsDirty_Nil() {
    return _igMarkIniSettingsDirty_Nil();
  }

  late final _igMarkIniSettingsDirty_NilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igMarkIniSettingsDirty_Nil');
  late final _igMarkIniSettingsDirty_Nil =
      _igMarkIniSettingsDirty_NilPtr.asFunction<void Function()>();

  void igMarkIniSettingsDirty_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igMarkIniSettingsDirty_WindowPtr(
      window,
    );
  }

  late final _igMarkIniSettingsDirty_WindowPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igMarkIniSettingsDirty_WindowPtr');
  late final _igMarkIniSettingsDirty_WindowPtr =
      _igMarkIniSettingsDirty_WindowPtrPtr
          .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igClearIniSettings() {
    return _igClearIniSettings();
  }

  late final _igClearIniSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igClearIniSettings');
  late final _igClearIniSettings =
      _igClearIniSettingsPtr.asFunction<void Function()>();

  void igAddSettingsHandler(
    ffi.Pointer<ImGuiSettingsHandler> handler,
  ) {
    return _igAddSettingsHandler(
      handler,
    );
  }

  late final _igAddSettingsHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiSettingsHandler>)>>('igAddSettingsHandler');
  late final _igAddSettingsHandler = _igAddSettingsHandlerPtr
      .asFunction<void Function(ffi.Pointer<ImGuiSettingsHandler>)>();

  void igRemoveSettingsHandler(
    ffi.Pointer<ffi.Char> type_name,
  ) {
    return _igRemoveSettingsHandler(
      type_name,
    );
  }

  late final _igRemoveSettingsHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igRemoveSettingsHandler');
  late final _igRemoveSettingsHandler = _igRemoveSettingsHandlerPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ImGuiSettingsHandler> igFindSettingsHandler(
    ffi.Pointer<ffi.Char> type_name,
  ) {
    return _igFindSettingsHandler(
      type_name,
    );
  }

  late final _igFindSettingsHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiSettingsHandler> Function(
              ffi.Pointer<ffi.Char>)>>('igFindSettingsHandler');
  late final _igFindSettingsHandler = _igFindSettingsHandlerPtr.asFunction<
      ffi.Pointer<ImGuiSettingsHandler> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ImGuiWindowSettings> igCreateNewWindowSettings(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _igCreateNewWindowSettings(
      name,
    );
  }

  late final _igCreateNewWindowSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiWindowSettings> Function(
              ffi.Pointer<ffi.Char>)>>('igCreateNewWindowSettings');
  late final _igCreateNewWindowSettings =
      _igCreateNewWindowSettingsPtr.asFunction<
          ffi.Pointer<ImGuiWindowSettings> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ImGuiWindowSettings> igFindWindowSettingsByID(
    int id,
  ) {
    return _igFindWindowSettingsByID(
      id,
    );
  }

  late final _igFindWindowSettingsByIDPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImGuiWindowSettings> Function(ImGuiID)>>(
      'igFindWindowSettingsByID');
  late final _igFindWindowSettingsByID = _igFindWindowSettingsByIDPtr
      .asFunction<ffi.Pointer<ImGuiWindowSettings> Function(int)>();

  ffi.Pointer<ImGuiWindowSettings> igFindWindowSettingsByWindow(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igFindWindowSettingsByWindow(
      window,
    );
  }

  late final _igFindWindowSettingsByWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiWindowSettings> Function(
              ffi.Pointer<ImGuiWindow>)>>('igFindWindowSettingsByWindow');
  late final _igFindWindowSettingsByWindow =
      _igFindWindowSettingsByWindowPtr.asFunction<
          ffi.Pointer<ImGuiWindowSettings> Function(
              ffi.Pointer<ImGuiWindow>)>();

  void igClearWindowSettings(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _igClearWindowSettings(
      name,
    );
  }

  late final _igClearWindowSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igClearWindowSettings');
  late final _igClearWindowSettings = _igClearWindowSettingsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void igLocalizeRegisterEntries(
    ffi.Pointer<ImGuiLocEntry> entries,
    int count,
  ) {
    return _igLocalizeRegisterEntries(
      entries,
      count,
    );
  }

  late final _igLocalizeRegisterEntriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiLocEntry>,
              ffi.Int)>>('igLocalizeRegisterEntries');
  late final _igLocalizeRegisterEntries = _igLocalizeRegisterEntriesPtr
      .asFunction<void Function(ffi.Pointer<ImGuiLocEntry>, int)>();

  ffi.Pointer<ffi.Char> igLocalizeGetMsg(
    ImGuiLocKey key,
  ) {
    return _igLocalizeGetMsg(
      key.value,
    );
  }

  late final _igLocalizeGetMsgPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'igLocalizeGetMsg');
  late final _igLocalizeGetMsg =
      _igLocalizeGetMsgPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void igSetScrollX_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    double scroll_x,
  ) {
    return _igSetScrollX_WindowPtr(
      window,
      scroll_x,
    );
  }

  late final _igSetScrollX_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>, ffi.Float)>>('igSetScrollX_WindowPtr');
  late final _igSetScrollX_WindowPtr = _igSetScrollX_WindowPtrPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, double)>();

  void igSetScrollY_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    double scroll_y,
  ) {
    return _igSetScrollY_WindowPtr(
      window,
      scroll_y,
    );
  }

  late final _igSetScrollY_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>, ffi.Float)>>('igSetScrollY_WindowPtr');
  late final _igSetScrollY_WindowPtr = _igSetScrollY_WindowPtrPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, double)>();

  void igSetScrollFromPosX_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    double local_x,
    double center_x_ratio,
  ) {
    return _igSetScrollFromPosX_WindowPtr(
      window,
      local_x,
      center_x_ratio,
    );
  }

  late final _igSetScrollFromPosX_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ffi.Float,
              ffi.Float)>>('igSetScrollFromPosX_WindowPtr');
  late final _igSetScrollFromPosX_WindowPtr = _igSetScrollFromPosX_WindowPtrPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, double, double)>();

  void igSetScrollFromPosY_WindowPtr(
    ffi.Pointer<ImGuiWindow> window,
    double local_y,
    double center_y_ratio,
  ) {
    return _igSetScrollFromPosY_WindowPtr(
      window,
      local_y,
      center_y_ratio,
    );
  }

  late final _igSetScrollFromPosY_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ffi.Float,
              ffi.Float)>>('igSetScrollFromPosY_WindowPtr');
  late final _igSetScrollFromPosY_WindowPtr = _igSetScrollFromPosY_WindowPtrPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, double, double)>();

  void igScrollToItem(
    int flags,
  ) {
    return _igScrollToItem(
      flags,
    );
  }

  late final _igScrollToItemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiScrollFlags)>>(
          'igScrollToItem');
  late final _igScrollToItem =
      _igScrollToItemPtr.asFunction<void Function(int)>();

  void igScrollToRect(
    ffi.Pointer<ImGuiWindow> window,
    ImRect rect,
    int flags,
  ) {
    return _igScrollToRect(
      window,
      rect,
      flags,
    );
  }

  late final _igScrollToRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImRect,
              ImGuiScrollFlags)>>('igScrollToRect');
  late final _igScrollToRect = _igScrollToRectPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, ImRect, int)>();

  void igScrollToRectEx(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiWindow> window,
    ImRect rect,
    int flags,
  ) {
    return _igScrollToRectEx(
      pOut,
      window,
      rect,
      flags,
    );
  }

  late final _igScrollToRectExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>,
              ImRect, ImGuiScrollFlags)>>('igScrollToRectEx');
  late final _igScrollToRectEx = _igScrollToRectExPtr.asFunction<
      void Function(
          ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>, ImRect, int)>();

  void igScrollToBringRectIntoView(
    ffi.Pointer<ImGuiWindow> window,
    ImRect rect,
  ) {
    return _igScrollToBringRectIntoView(
      window,
      rect,
    );
  }

  late final _igScrollToBringRectIntoViewPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImRect)>>(
      'igScrollToBringRectIntoView');
  late final _igScrollToBringRectIntoView = _igScrollToBringRectIntoViewPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, ImRect)>();

  int igGetItemStatusFlags() {
    return _igGetItemStatusFlags();
  }

  late final _igGetItemStatusFlagsPtr =
      _lookup<ffi.NativeFunction<ImGuiItemStatusFlags Function()>>(
          'igGetItemStatusFlags');
  late final _igGetItemStatusFlags =
      _igGetItemStatusFlagsPtr.asFunction<int Function()>();

  int igGetItemFlags() {
    return _igGetItemFlags();
  }

  late final _igGetItemFlagsPtr =
      _lookup<ffi.NativeFunction<ImGuiItemFlags Function()>>('igGetItemFlags');
  late final _igGetItemFlags = _igGetItemFlagsPtr.asFunction<int Function()>();

  int igGetActiveID() {
    return _igGetActiveID();
  }

  late final _igGetActiveIDPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function()>>('igGetActiveID');
  late final _igGetActiveID = _igGetActiveIDPtr.asFunction<int Function()>();

  int igGetFocusID() {
    return _igGetFocusID();
  }

  late final _igGetFocusIDPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function()>>('igGetFocusID');
  late final _igGetFocusID = _igGetFocusIDPtr.asFunction<int Function()>();

  void igSetActiveID(
    int id,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igSetActiveID(
      id,
      window,
    );
  }

  late final _igSetActiveIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiID, ffi.Pointer<ImGuiWindow>)>>('igSetActiveID');
  late final _igSetActiveID = _igSetActiveIDPtr
      .asFunction<void Function(int, ffi.Pointer<ImGuiWindow>)>();

  void igSetFocusID(
    int id,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igSetFocusID(
      id,
      window,
    );
  }

  late final _igSetFocusIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiID, ffi.Pointer<ImGuiWindow>)>>('igSetFocusID');
  late final _igSetFocusID = _igSetFocusIDPtr
      .asFunction<void Function(int, ffi.Pointer<ImGuiWindow>)>();

  void igClearActiveID() {
    return _igClearActiveID();
  }

  late final _igClearActiveIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igClearActiveID');
  late final _igClearActiveID =
      _igClearActiveIDPtr.asFunction<void Function()>();

  int igGetHoveredID() {
    return _igGetHoveredID();
  }

  late final _igGetHoveredIDPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function()>>('igGetHoveredID');
  late final _igGetHoveredID = _igGetHoveredIDPtr.asFunction<int Function()>();

  void igSetHoveredID(
    int id,
  ) {
    return _igSetHoveredID(
      id,
    );
  }

  late final _igSetHoveredIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>('igSetHoveredID');
  late final _igSetHoveredID =
      _igSetHoveredIDPtr.asFunction<void Function(int)>();

  void igKeepAliveID(
    int id,
  ) {
    return _igKeepAliveID(
      id,
    );
  }

  late final _igKeepAliveIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>('igKeepAliveID');
  late final _igKeepAliveID =
      _igKeepAliveIDPtr.asFunction<void Function(int)>();

  void igMarkItemEdited(
    int id,
  ) {
    return _igMarkItemEdited(
      id,
    );
  }

  late final _igMarkItemEditedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igMarkItemEdited');
  late final _igMarkItemEdited =
      _igMarkItemEditedPtr.asFunction<void Function(int)>();

  void igPushOverrideID(
    int id,
  ) {
    return _igPushOverrideID(
      id,
    );
  }

  late final _igPushOverrideIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igPushOverrideID');
  late final _igPushOverrideID =
      _igPushOverrideIDPtr.asFunction<void Function(int)>();

  int igGetIDWithSeed_Str(
    ffi.Pointer<ffi.Char> str_id_begin,
    ffi.Pointer<ffi.Char> str_id_end,
    int seed,
  ) {
    return _igGetIDWithSeed_Str(
      str_id_begin,
      str_id_end,
      seed,
    );
  }

  late final _igGetIDWithSeed_StrPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ImGuiID)>>('igGetIDWithSeed_Str');
  late final _igGetIDWithSeed_Str = _igGetIDWithSeed_StrPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int igGetIDWithSeed_Int(
    int n,
    int seed,
  ) {
    return _igGetIDWithSeed_Int(
      n,
      seed,
    );
  }

  late final _igGetIDWithSeed_IntPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.Int, ImGuiID)>>(
          'igGetIDWithSeed_Int');
  late final _igGetIDWithSeed_Int =
      _igGetIDWithSeed_IntPtr.asFunction<int Function(int, int)>();

  void igItemSize_Vec2(
    ImVec2 size,
    double text_baseline_y,
  ) {
    return _igItemSize_Vec2(
      size,
      text_baseline_y,
    );
  }

  late final _igItemSize_Vec2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ffi.Float)>>(
          'igItemSize_Vec2');
  late final _igItemSize_Vec2 =
      _igItemSize_Vec2Ptr.asFunction<void Function(ImVec2, double)>();

  void igItemSize_Rect(
    ImRect bb,
    double text_baseline_y,
  ) {
    return _igItemSize_Rect(
      bb,
      text_baseline_y,
    );
  }

  late final _igItemSize_RectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImRect, ffi.Float)>>(
          'igItemSize_Rect');
  late final _igItemSize_Rect =
      _igItemSize_RectPtr.asFunction<void Function(ImRect, double)>();

  bool igItemAdd(
    ImRect bb,
    int id,
    ffi.Pointer<ImRect> nav_bb,
    int extra_flags,
  ) {
    return _igItemAdd(
      bb,
      id,
      nav_bb,
      extra_flags,
    );
  }

  late final _igItemAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImRect, ImGuiID, ffi.Pointer<ImRect>,
              ImGuiItemFlags)>>('igItemAdd');
  late final _igItemAdd = _igItemAddPtr
      .asFunction<bool Function(ImRect, int, ffi.Pointer<ImRect>, int)>();

  bool igItemHoverable(
    ImRect bb,
    int id,
    int item_flags,
  ) {
    return _igItemHoverable(
      bb,
      id,
      item_flags,
    );
  }

  late final _igItemHoverablePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ImRect, ImGuiID, ImGuiItemFlags)>>(
      'igItemHoverable');
  late final _igItemHoverable =
      _igItemHoverablePtr.asFunction<bool Function(ImRect, int, int)>();

  bool igIsWindowContentHoverable(
    ffi.Pointer<ImGuiWindow> window,
    int flags,
  ) {
    return _igIsWindowContentHoverable(
      window,
      flags,
    );
  }

  late final _igIsWindowContentHoverablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiWindow>,
              ImGuiHoveredFlags)>>('igIsWindowContentHoverable');
  late final _igIsWindowContentHoverable = _igIsWindowContentHoverablePtr
      .asFunction<bool Function(ffi.Pointer<ImGuiWindow>, int)>();

  bool igIsClippedEx(
    ImRect bb,
    int id,
  ) {
    return _igIsClippedEx(
      bb,
      id,
    );
  }

  late final _igIsClippedExPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImRect, ImGuiID)>>(
          'igIsClippedEx');
  late final _igIsClippedEx =
      _igIsClippedExPtr.asFunction<bool Function(ImRect, int)>();

  void igSetLastItemData(
    int item_id,
    int in_flags,
    int status_flags,
    ImRect item_rect,
  ) {
    return _igSetLastItemData(
      item_id,
      in_flags,
      status_flags,
      item_rect,
    );
  }

  late final _igSetLastItemDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiID, ImGuiItemFlags, ImGuiItemStatusFlags,
              ImRect)>>('igSetLastItemData');
  late final _igSetLastItemData =
      _igSetLastItemDataPtr.asFunction<void Function(int, int, int, ImRect)>();

  void igCalcItemSize(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 size,
    double default_w,
    double default_h,
  ) {
    return _igCalcItemSize(
      pOut,
      size,
      default_w,
      default_h,
    );
  }

  late final _igCalcItemSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ImVec2, ffi.Float,
              ffi.Float)>>('igCalcItemSize');
  late final _igCalcItemSize = _igCalcItemSizePtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, ImVec2, double, double)>();

  double igCalcWrapWidthForPos(
    ImVec2 pos,
    double wrap_pos_x,
  ) {
    return _igCalcWrapWidthForPos(
      pos,
      wrap_pos_x,
    );
  }

  late final _igCalcWrapWidthForPosPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ImVec2, ffi.Float)>>(
          'igCalcWrapWidthForPos');
  late final _igCalcWrapWidthForPos =
      _igCalcWrapWidthForPosPtr.asFunction<double Function(ImVec2, double)>();

  void igPushMultiItemsWidths(
    int components,
    double width_full,
  ) {
    return _igPushMultiItemsWidths(
      components,
      width_full,
    );
  }

  late final _igPushMultiItemsWidthsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'igPushMultiItemsWidths');
  late final _igPushMultiItemsWidths =
      _igPushMultiItemsWidthsPtr.asFunction<void Function(int, double)>();

  void igShrinkWidths(
    ffi.Pointer<ImGuiShrinkWidthItem> items,
    int count,
    double width_excess,
  ) {
    return _igShrinkWidths(
      items,
      count,
      width_excess,
    );
  }

  late final _igShrinkWidthsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiShrinkWidthItem>, ffi.Int,
              ffi.Float)>>('igShrinkWidths');
  late final _igShrinkWidths = _igShrinkWidthsPtr.asFunction<
      void Function(ffi.Pointer<ImGuiShrinkWidthItem>, int, double)>();

  ffi.Pointer<ImGuiDataVarInfo> igGetStyleVarInfo(
    int idx,
  ) {
    return _igGetStyleVarInfo(
      idx,
    );
  }

  late final _igGetStyleVarInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiDataVarInfo> Function(
              ImGuiStyleVar)>>('igGetStyleVarInfo');
  late final _igGetStyleVarInfo = _igGetStyleVarInfoPtr
      .asFunction<ffi.Pointer<ImGuiDataVarInfo> Function(int)>();

  void igBeginDisabledOverrideReenable() {
    return _igBeginDisabledOverrideReenable();
  }

  late final _igBeginDisabledOverrideReenablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igBeginDisabledOverrideReenable');
  late final _igBeginDisabledOverrideReenable =
      _igBeginDisabledOverrideReenablePtr.asFunction<void Function()>();

  void igEndDisabledOverrideReenable() {
    return _igEndDisabledOverrideReenable();
  }

  late final _igEndDisabledOverrideReenablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igEndDisabledOverrideReenable');
  late final _igEndDisabledOverrideReenable =
      _igEndDisabledOverrideReenablePtr.asFunction<void Function()>();

  void igLogBegin(
    int flags,
    int auto_open_depth,
  ) {
    return _igLogBegin(
      flags,
      auto_open_depth,
    );
  }

  late final _igLogBeginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiLogFlags, ffi.Int)>>(
          'igLogBegin');
  late final _igLogBegin = _igLogBeginPtr.asFunction<void Function(int, int)>();

  void igLogToBuffer(
    int auto_open_depth,
  ) {
    return _igLogToBuffer(
      auto_open_depth,
    );
  }

  late final _igLogToBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('igLogToBuffer');
  late final _igLogToBuffer =
      _igLogToBufferPtr.asFunction<void Function(int)>();

  void igLogRenderedText(
    ffi.Pointer<ImVec2> ref_pos,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _igLogRenderedText(
      ref_pos,
      text,
      text_end,
    );
  }

  late final _igLogRenderedTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igLogRenderedText');
  late final _igLogRenderedText = _igLogRenderedTextPtr.asFunction<
      void Function(
          ffi.Pointer<ImVec2>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igLogSetNextTextDecoration(
    ffi.Pointer<ffi.Char> prefix,
    ffi.Pointer<ffi.Char> suffix,
  ) {
    return _igLogSetNextTextDecoration(
      prefix,
      suffix,
    );
  }

  late final _igLogSetNextTextDecorationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igLogSetNextTextDecoration');
  late final _igLogSetNextTextDecoration =
      _igLogSetNextTextDecorationPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool igBeginChildEx(
    ffi.Pointer<ffi.Char> name,
    int id,
    ImVec2 size_arg,
    int child_flags,
    int window_flags,
  ) {
    return _igBeginChildEx(
      name,
      id,
      size_arg,
      child_flags,
      window_flags,
    );
  }

  late final _igBeginChildExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImGuiID, ImVec2,
              ImGuiChildFlags, ImGuiWindowFlags)>>('igBeginChildEx');
  late final _igBeginChildEx = _igBeginChildExPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, ImVec2, int, int)>();

  bool igBeginPopupEx(
    int id,
    int extra_window_flags,
  ) {
    return _igBeginPopupEx(
      id,
      extra_window_flags,
    );
  }

  late final _igBeginPopupExPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiID, ImGuiWindowFlags)>>(
          'igBeginPopupEx');
  late final _igBeginPopupEx =
      _igBeginPopupExPtr.asFunction<bool Function(int, int)>();

  void igOpenPopupEx(
    int id,
    int popup_flags,
  ) {
    return _igOpenPopupEx(
      id,
      popup_flags,
    );
  }

  late final _igOpenPopupExPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ImGuiPopupFlags)>>(
          'igOpenPopupEx');
  late final _igOpenPopupEx =
      _igOpenPopupExPtr.asFunction<void Function(int, int)>();

  void igClosePopupToLevel(
    int remaining,
    bool restore_focus_to_window_under_popup,
  ) {
    return _igClosePopupToLevel(
      remaining,
      restore_focus_to_window_under_popup,
    );
  }

  late final _igClosePopupToLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Bool)>>(
          'igClosePopupToLevel');
  late final _igClosePopupToLevel =
      _igClosePopupToLevelPtr.asFunction<void Function(int, bool)>();

  void igClosePopupsOverWindow(
    ffi.Pointer<ImGuiWindow> ref_window,
    bool restore_focus_to_window_under_popup,
  ) {
    return _igClosePopupsOverWindow(
      ref_window,
      restore_focus_to_window_under_popup,
    );
  }

  late final _igClosePopupsOverWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>, ffi.Bool)>>('igClosePopupsOverWindow');
  late final _igClosePopupsOverWindow = _igClosePopupsOverWindowPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, bool)>();

  void igClosePopupsExceptModals() {
    return _igClosePopupsExceptModals();
  }

  late final _igClosePopupsExceptModalsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igClosePopupsExceptModals');
  late final _igClosePopupsExceptModals =
      _igClosePopupsExceptModalsPtr.asFunction<void Function()>();

  bool igIsPopupOpen_ID(
    int id,
    int popup_flags,
  ) {
    return _igIsPopupOpen_ID(
      id,
      popup_flags,
    );
  }

  late final _igIsPopupOpen_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiID, ImGuiPopupFlags)>>(
          'igIsPopupOpen_ID');
  late final _igIsPopupOpen_ID =
      _igIsPopupOpen_IDPtr.asFunction<bool Function(int, int)>();

  void igGetPopupAllowedExtentRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igGetPopupAllowedExtentRect(
      pOut,
      window,
    );
  }

  late final _igGetPopupAllowedExtentRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>,
              ffi.Pointer<ImGuiWindow>)>>('igGetPopupAllowedExtentRect');
  late final _igGetPopupAllowedExtentRect =
      _igGetPopupAllowedExtentRectPtr.asFunction<
          void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>)>();

  ffi.Pointer<ImGuiWindow> igGetTopMostPopupModal() {
    return _igGetTopMostPopupModal();
  }

  late final _igGetTopMostPopupModalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindow> Function()>>(
          'igGetTopMostPopupModal');
  late final _igGetTopMostPopupModal = _igGetTopMostPopupModalPtr
      .asFunction<ffi.Pointer<ImGuiWindow> Function()>();

  ffi.Pointer<ImGuiWindow> igGetTopMostAndVisiblePopupModal() {
    return _igGetTopMostAndVisiblePopupModal();
  }

  late final _igGetTopMostAndVisiblePopupModalPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiWindow> Function()>>(
          'igGetTopMostAndVisiblePopupModal');
  late final _igGetTopMostAndVisiblePopupModal =
      _igGetTopMostAndVisiblePopupModalPtr
          .asFunction<ffi.Pointer<ImGuiWindow> Function()>();

  ffi.Pointer<ImGuiWindow> igFindBlockingModal(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igFindBlockingModal(
      window,
    );
  }

  late final _igFindBlockingModalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiWindow> Function(
              ffi.Pointer<ImGuiWindow>)>>('igFindBlockingModal');
  late final _igFindBlockingModal = _igFindBlockingModalPtr.asFunction<
      ffi.Pointer<ImGuiWindow> Function(ffi.Pointer<ImGuiWindow>)>();

  void igFindBestWindowPosForPopup(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igFindBestWindowPosForPopup(
      pOut,
      window,
    );
  }

  late final _igFindBestWindowPosForPopupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImGuiWindow>)>>('igFindBestWindowPosForPopup');
  late final _igFindBestWindowPosForPopup =
      _igFindBestWindowPosForPopupPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>)>();

  void igFindBestWindowPosForPopupEx(
    ffi.Pointer<ImVec2> pOut,
    ImVec2 ref_pos,
    ImVec2 size,
    ffi.Pointer<ffi.Int> last_dir,
    ImRect r_outer,
    ImRect r_avoid,
    ImGuiPopupPositionPolicy policy,
  ) {
    return _igFindBestWindowPosForPopupEx(
      pOut,
      ref_pos,
      size,
      last_dir,
      r_outer,
      r_avoid,
      policy.value,
    );
  }

  late final _igFindBestWindowPosForPopupExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>,
              ImVec2,
              ImVec2,
              ffi.Pointer<ffi.Int>,
              ImRect,
              ImRect,
              ffi.UnsignedInt)>>('igFindBestWindowPosForPopupEx');
  late final _igFindBestWindowPosForPopupEx =
      _igFindBestWindowPosForPopupExPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ImVec2, ImVec2,
              ffi.Pointer<ffi.Int>, ImRect, ImRect, int)>();

  bool igBeginTooltipEx(
    int tooltip_flags,
    int extra_window_flags,
  ) {
    return _igBeginTooltipEx(
      tooltip_flags,
      extra_window_flags,
    );
  }

  late final _igBeginTooltipExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImGuiTooltipFlags, ImGuiWindowFlags)>>('igBeginTooltipEx');
  late final _igBeginTooltipEx =
      _igBeginTooltipExPtr.asFunction<bool Function(int, int)>();

  bool igBeginTooltipHidden() {
    return _igBeginTooltipHidden();
  }

  late final _igBeginTooltipHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginTooltipHidden');
  late final _igBeginTooltipHidden =
      _igBeginTooltipHiddenPtr.asFunction<bool Function()>();

  bool igBeginViewportSideBar(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ImGuiViewport> viewport,
    ImGuiDir dir,
    double size,
    DartImGuiWindowFlags window_flags,
  ) {
    return _igBeginViewportSideBar(
      name,
      viewport,
      dir.value,
      size,
      window_flags,
    );
  }

  late final _igBeginViewportSideBarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ImGuiViewport>,
              ffi.Int, ffi.Float, ImGuiWindowFlags)>>('igBeginViewportSideBar');
  late final _igBeginViewportSideBar = _igBeginViewportSideBarPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ImGuiViewport>, int,
          double, int)>();

  bool igBeginMenuEx(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> icon,
    bool enabled,
  ) {
    return _igBeginMenuEx(
      label,
      icon,
      enabled,
    );
  }

  late final _igBeginMenuExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('igBeginMenuEx');
  late final _igBeginMenuEx = _igBeginMenuExPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  bool igMenuItemEx(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> icon,
    ffi.Pointer<ffi.Char> shortcut,
    bool selected,
    bool enabled,
  ) {
    return _igMenuItemEx(
      label,
      icon,
      shortcut,
      selected,
      enabled,
    );
  }

  late final _igMenuItemExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Bool, ffi.Bool)>>('igMenuItemEx');
  late final _igMenuItemEx = _igMenuItemExPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, bool, bool)>();

  bool igBeginComboPopup(
    int popup_id,
    ImRect bb,
    int flags,
  ) {
    return _igBeginComboPopup(
      popup_id,
      bb,
      flags,
    );
  }

  late final _igBeginComboPopupPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ImGuiID, ImRect, ImGuiComboFlags)>>(
      'igBeginComboPopup');
  late final _igBeginComboPopup =
      _igBeginComboPopupPtr.asFunction<bool Function(int, ImRect, int)>();

  bool igBeginComboPreview() {
    return _igBeginComboPreview();
  }

  late final _igBeginComboPreviewPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginComboPreview');
  late final _igBeginComboPreview =
      _igBeginComboPreviewPtr.asFunction<bool Function()>();

  void igEndComboPreview() {
    return _igEndComboPreview();
  }

  late final _igEndComboPreviewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndComboPreview');
  late final _igEndComboPreview =
      _igEndComboPreviewPtr.asFunction<void Function()>();

  void igNavInitWindow(
    ffi.Pointer<ImGuiWindow> window,
    bool force_reinit,
  ) {
    return _igNavInitWindow(
      window,
      force_reinit,
    );
  }

  late final _igNavInitWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>, ffi.Bool)>>('igNavInitWindow');
  late final _igNavInitWindow = _igNavInitWindowPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, bool)>();

  void igNavInitRequestApplyResult() {
    return _igNavInitRequestApplyResult();
  }

  late final _igNavInitRequestApplyResultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igNavInitRequestApplyResult');
  late final _igNavInitRequestApplyResult =
      _igNavInitRequestApplyResultPtr.asFunction<void Function()>();

  bool igNavMoveRequestButNoResultYet() {
    return _igNavMoveRequestButNoResultYet();
  }

  late final _igNavMoveRequestButNoResultYetPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'igNavMoveRequestButNoResultYet');
  late final _igNavMoveRequestButNoResultYet =
      _igNavMoveRequestButNoResultYetPtr.asFunction<bool Function()>();

  void igNavMoveRequestSubmit(
    ImGuiDir move_dir,
    ImGuiDir clip_dir,
    DartImGuiNavMoveFlags move_flags,
    DartImGuiScrollFlags scroll_flags,
  ) {
    return _igNavMoveRequestSubmit(
      move_dir.value,
      clip_dir.value,
      move_flags,
      scroll_flags,
    );
  }

  late final _igNavMoveRequestSubmitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ImGuiNavMoveFlags,
              ImGuiScrollFlags)>>('igNavMoveRequestSubmit');
  late final _igNavMoveRequestSubmit = _igNavMoveRequestSubmitPtr
      .asFunction<void Function(int, int, int, int)>();

  void igNavMoveRequestForward(
    ImGuiDir move_dir,
    ImGuiDir clip_dir,
    DartImGuiNavMoveFlags move_flags,
    DartImGuiScrollFlags scroll_flags,
  ) {
    return _igNavMoveRequestForward(
      move_dir.value,
      clip_dir.value,
      move_flags,
      scroll_flags,
    );
  }

  late final _igNavMoveRequestForwardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ImGuiNavMoveFlags,
              ImGuiScrollFlags)>>('igNavMoveRequestForward');
  late final _igNavMoveRequestForward = _igNavMoveRequestForwardPtr
      .asFunction<void Function(int, int, int, int)>();

  void igNavMoveRequestResolveWithLastItem(
    ffi.Pointer<ImGuiNavItemData> result,
  ) {
    return _igNavMoveRequestResolveWithLastItem(
      result,
    );
  }

  late final _igNavMoveRequestResolveWithLastItemPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiNavItemData>)>>(
      'igNavMoveRequestResolveWithLastItem');
  late final _igNavMoveRequestResolveWithLastItem =
      _igNavMoveRequestResolveWithLastItemPtr
          .asFunction<void Function(ffi.Pointer<ImGuiNavItemData>)>();

  void igNavMoveRequestResolveWithPastTreeNode(
    ffi.Pointer<ImGuiNavItemData> result,
    ffi.Pointer<ImGuiTreeNodeStackData> tree_node_data,
  ) {
    return _igNavMoveRequestResolveWithPastTreeNode(
      result,
      tree_node_data,
    );
  }

  late final _igNavMoveRequestResolveWithPastTreeNodePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiNavItemData>,
                  ffi.Pointer<ImGuiTreeNodeStackData>)>>(
      'igNavMoveRequestResolveWithPastTreeNode');
  late final _igNavMoveRequestResolveWithPastTreeNode =
      _igNavMoveRequestResolveWithPastTreeNodePtr.asFunction<
          void Function(ffi.Pointer<ImGuiNavItemData>,
              ffi.Pointer<ImGuiTreeNodeStackData>)>();

  void igNavMoveRequestCancel() {
    return _igNavMoveRequestCancel();
  }

  late final _igNavMoveRequestCancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igNavMoveRequestCancel');
  late final _igNavMoveRequestCancel =
      _igNavMoveRequestCancelPtr.asFunction<void Function()>();

  void igNavMoveRequestApplyResult() {
    return _igNavMoveRequestApplyResult();
  }

  late final _igNavMoveRequestApplyResultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igNavMoveRequestApplyResult');
  late final _igNavMoveRequestApplyResult =
      _igNavMoveRequestApplyResultPtr.asFunction<void Function()>();

  void igNavMoveRequestTryWrapping(
    ffi.Pointer<ImGuiWindow> window,
    int move_flags,
  ) {
    return _igNavMoveRequestTryWrapping(
      window,
      move_flags,
    );
  }

  late final _igNavMoveRequestTryWrappingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ImGuiNavMoveFlags)>>('igNavMoveRequestTryWrapping');
  late final _igNavMoveRequestTryWrapping = _igNavMoveRequestTryWrappingPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, int)>();

  void igNavHighlightActivated(
    int id,
  ) {
    return _igNavHighlightActivated(
      id,
    );
  }

  late final _igNavHighlightActivatedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igNavHighlightActivated');
  late final _igNavHighlightActivated =
      _igNavHighlightActivatedPtr.asFunction<void Function(int)>();

  void igNavClearPreferredPosForAxis(
    ImGuiAxis axis,
  ) {
    return _igNavClearPreferredPosForAxis(
      axis.value,
    );
  }

  late final _igNavClearPreferredPosForAxisPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'igNavClearPreferredPosForAxis');
  late final _igNavClearPreferredPosForAxis =
      _igNavClearPreferredPosForAxisPtr.asFunction<void Function(int)>();

  void igSetNavCursorVisibleAfterMove() {
    return _igSetNavCursorVisibleAfterMove();
  }

  late final _igSetNavCursorVisibleAfterMovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igSetNavCursorVisibleAfterMove');
  late final _igSetNavCursorVisibleAfterMove =
      _igSetNavCursorVisibleAfterMovePtr.asFunction<void Function()>();

  void igNavUpdateCurrentWindowIsScrollPushableX() {
    return _igNavUpdateCurrentWindowIsScrollPushableX();
  }

  late final _igNavUpdateCurrentWindowIsScrollPushableXPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igNavUpdateCurrentWindowIsScrollPushableX');
  late final _igNavUpdateCurrentWindowIsScrollPushableX =
      _igNavUpdateCurrentWindowIsScrollPushableXPtr
          .asFunction<void Function()>();

  void igSetNavWindow(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igSetNavWindow(
      window,
    );
  }

  late final _igSetNavWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igSetNavWindow');
  late final _igSetNavWindow =
      _igSetNavWindowPtr.asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igSetNavID(
    DartImGuiID id,
    ImGuiNavLayer nav_layer,
    DartImGuiID focus_scope_id,
    ImRect rect_rel,
  ) {
    return _igSetNavID(
      id,
      nav_layer.value,
      focus_scope_id,
      rect_rel,
    );
  }

  late final _igSetNavIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiID, ffi.UnsignedInt, ImGuiID, ImRect)>>('igSetNavID');
  late final _igSetNavID =
      _igSetNavIDPtr.asFunction<void Function(int, int, int, ImRect)>();

  void igSetNavFocusScope(
    int focus_scope_id,
  ) {
    return _igSetNavFocusScope(
      focus_scope_id,
    );
  }

  late final _igSetNavFocusScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igSetNavFocusScope');
  late final _igSetNavFocusScope =
      _igSetNavFocusScopePtr.asFunction<void Function(int)>();

  void igFocusItem() {
    return _igFocusItem();
  }

  late final _igFocusItemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igFocusItem');
  late final _igFocusItem = _igFocusItemPtr.asFunction<void Function()>();

  void igActivateItemByID(
    int id,
  ) {
    return _igActivateItemByID(
      id,
    );
  }

  late final _igActivateItemByIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igActivateItemByID');
  late final _igActivateItemByID =
      _igActivateItemByIDPtr.asFunction<void Function(int)>();

  bool igIsNamedKey(
    ImGuiKey key,
  ) {
    return _igIsNamedKey(
      key.value,
    );
  }

  late final _igIsNamedKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsNamedKey');
  late final _igIsNamedKey = _igIsNamedKeyPtr.asFunction<bool Function(int)>();

  bool igIsNamedKeyOrMod(
    ImGuiKey key,
  ) {
    return _igIsNamedKeyOrMod(
      key.value,
    );
  }

  late final _igIsNamedKeyOrModPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsNamedKeyOrMod');
  late final _igIsNamedKeyOrMod =
      _igIsNamedKeyOrModPtr.asFunction<bool Function(int)>();

  bool igIsLegacyKey(
    ImGuiKey key,
  ) {
    return _igIsLegacyKey(
      key.value,
    );
  }

  late final _igIsLegacyKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsLegacyKey');
  late final _igIsLegacyKey =
      _igIsLegacyKeyPtr.asFunction<bool Function(int)>();

  bool igIsKeyboardKey(
    ImGuiKey key,
  ) {
    return _igIsKeyboardKey(
      key.value,
    );
  }

  late final _igIsKeyboardKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsKeyboardKey');
  late final _igIsKeyboardKey =
      _igIsKeyboardKeyPtr.asFunction<bool Function(int)>();

  bool igIsGamepadKey(
    ImGuiKey key,
  ) {
    return _igIsGamepadKey(
      key.value,
    );
  }

  late final _igIsGamepadKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsGamepadKey');
  late final _igIsGamepadKey =
      _igIsGamepadKeyPtr.asFunction<bool Function(int)>();

  bool igIsMouseKey(
    ImGuiKey key,
  ) {
    return _igIsMouseKey(
      key.value,
    );
  }

  late final _igIsMouseKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsMouseKey');
  late final _igIsMouseKey = _igIsMouseKeyPtr.asFunction<bool Function(int)>();

  bool igIsAliasKey(
    ImGuiKey key,
  ) {
    return _igIsAliasKey(
      key.value,
    );
  }

  late final _igIsAliasKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsAliasKey');
  late final _igIsAliasKey = _igIsAliasKeyPtr.asFunction<bool Function(int)>();

  bool igIsLRModKey(
    ImGuiKey key,
  ) {
    return _igIsLRModKey(
      key.value,
    );
  }

  late final _igIsLRModKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'igIsLRModKey');
  late final _igIsLRModKey = _igIsLRModKeyPtr.asFunction<bool Function(int)>();

  int igFixupKeyChord(
    int key_chord,
  ) {
    return _igFixupKeyChord(
      key_chord,
    );
  }

  late final _igFixupKeyChordPtr =
      _lookup<ffi.NativeFunction<ImGuiKeyChord Function(ImGuiKeyChord)>>(
          'igFixupKeyChord');
  late final _igFixupKeyChord =
      _igFixupKeyChordPtr.asFunction<int Function(int)>();

  ImGuiKey igConvertSingleModFlagToKey(
    ImGuiKey key,
  ) {
    return ImGuiKey.fromValue(_igConvertSingleModFlagToKey(
      key.value,
    ));
  }

  late final _igConvertSingleModFlagToKeyPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'igConvertSingleModFlagToKey');
  late final _igConvertSingleModFlagToKey =
      _igConvertSingleModFlagToKeyPtr.asFunction<int Function(int)>();

  ffi.Pointer<ImGuiKeyData> igGetKeyData_ContextPtr(
    ffi.Pointer<ImGuiContext> ctx,
    ImGuiKey key,
  ) {
    return _igGetKeyData_ContextPtr(
      ctx,
      key.value,
    );
  }

  late final _igGetKeyData_ContextPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiKeyData> Function(ffi.Pointer<ImGuiContext>,
              ffi.UnsignedInt)>>('igGetKeyData_ContextPtr');
  late final _igGetKeyData_ContextPtr = _igGetKeyData_ContextPtrPtr.asFunction<
      ffi.Pointer<ImGuiKeyData> Function(ffi.Pointer<ImGuiContext>, int)>();

  ffi.Pointer<ImGuiKeyData> igGetKeyData_Key(
    ImGuiKey key,
  ) {
    return _igGetKeyData_Key(
      key.value,
    );
  }

  late final _igGetKeyData_KeyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImGuiKeyData> Function(ffi.UnsignedInt)>>(
      'igGetKeyData_Key');
  late final _igGetKeyData_Key = _igGetKeyData_KeyPtr
      .asFunction<ffi.Pointer<ImGuiKeyData> Function(int)>();

  ffi.Pointer<ffi.Char> igGetKeyChordName(
    int key_chord,
  ) {
    return _igGetKeyChordName(
      key_chord,
    );
  }

  late final _igGetKeyChordNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ImGuiKeyChord)>>(
      'igGetKeyChordName');
  late final _igGetKeyChordName =
      _igGetKeyChordNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ImGuiKey igMouseButtonToKey(
    DartImGuiMouseButton button,
  ) {
    return ImGuiKey.fromValue(_igMouseButtonToKey(
      button,
    ));
  }

  late final _igMouseButtonToKeyPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ImGuiMouseButton)>>(
          'igMouseButtonToKey');
  late final _igMouseButtonToKey =
      _igMouseButtonToKeyPtr.asFunction<int Function(int)>();

  bool igIsMouseDragPastThreshold(
    int button,
    double lock_threshold,
  ) {
    return _igIsMouseDragPastThreshold(
      button,
      lock_threshold,
    );
  }

  late final _igIsMouseDragPastThresholdPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton, ffi.Float)>>(
      'igIsMouseDragPastThreshold');
  late final _igIsMouseDragPastThreshold =
      _igIsMouseDragPastThresholdPtr.asFunction<bool Function(int, double)>();

  void igGetKeyMagnitude2d(
    ffi.Pointer<ImVec2> pOut,
    ImGuiKey key_left,
    ImGuiKey key_right,
    ImGuiKey key_up,
    ImGuiKey key_down,
  ) {
    return _igGetKeyMagnitude2d(
      pOut,
      key_left.value,
      key_right.value,
      key_up.value,
      key_down.value,
    );
  }

  late final _igGetKeyMagnitude2dPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImVec2>,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('igGetKeyMagnitude2d');
  late final _igGetKeyMagnitude2d = _igGetKeyMagnitude2dPtr
      .asFunction<void Function(ffi.Pointer<ImVec2>, int, int, int, int)>();

  double igGetNavTweakPressedAmount(
    ImGuiAxis axis,
  ) {
    return _igGetNavTweakPressedAmount(
      axis.value,
    );
  }

  late final _igGetNavTweakPressedAmountPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int)>>(
          'igGetNavTweakPressedAmount');
  late final _igGetNavTweakPressedAmount =
      _igGetNavTweakPressedAmountPtr.asFunction<double Function(int)>();

  int igCalcTypematicRepeatAmount(
    double t0,
    double t1,
    double repeat_delay,
    double repeat_rate,
  ) {
    return _igCalcTypematicRepeatAmount(
      t0,
      t1,
      repeat_delay,
      repeat_rate,
    );
  }

  late final _igCalcTypematicRepeatAmountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Float, ffi.Float, ffi.Float,
              ffi.Float)>>('igCalcTypematicRepeatAmount');
  late final _igCalcTypematicRepeatAmount = _igCalcTypematicRepeatAmountPtr
      .asFunction<int Function(double, double, double, double)>();

  void igGetTypematicRepeatRate(
    int flags,
    ffi.Pointer<ffi.Float> repeat_delay,
    ffi.Pointer<ffi.Float> repeat_rate,
  ) {
    return _igGetTypematicRepeatRate(
      flags,
      repeat_delay,
      repeat_rate,
    );
  }

  late final _igGetTypematicRepeatRatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiInputFlags, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('igGetTypematicRepeatRate');
  late final _igGetTypematicRepeatRate =
      _igGetTypematicRepeatRatePtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Float>)>();

  void igTeleportMousePos(
    ImVec2 pos,
  ) {
    return _igTeleportMousePos(
      pos,
    );
  }

  late final _igTeleportMousePosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2)>>(
          'igTeleportMousePos');
  late final _igTeleportMousePos =
      _igTeleportMousePosPtr.asFunction<void Function(ImVec2)>();

  void igSetActiveIdUsingAllKeyboardKeys() {
    return _igSetActiveIdUsingAllKeyboardKeys();
  }

  late final _igSetActiveIdUsingAllKeyboardKeysPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igSetActiveIdUsingAllKeyboardKeys');
  late final _igSetActiveIdUsingAllKeyboardKeys =
      _igSetActiveIdUsingAllKeyboardKeysPtr.asFunction<void Function()>();

  bool igIsActiveIdUsingNavDir(
    ImGuiDir dir,
  ) {
    return _igIsActiveIdUsingNavDir(
      dir.value,
    );
  }

  late final _igIsActiveIdUsingNavDirPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'igIsActiveIdUsingNavDir');
  late final _igIsActiveIdUsingNavDir =
      _igIsActiveIdUsingNavDirPtr.asFunction<bool Function(int)>();

  DartImGuiID igGetKeyOwner(
    ImGuiKey key,
  ) {
    return _igGetKeyOwner(
      key.value,
    );
  }

  late final _igGetKeyOwnerPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.UnsignedInt)>>(
          'igGetKeyOwner');
  late final _igGetKeyOwner = _igGetKeyOwnerPtr.asFunction<int Function(int)>();

  void igSetKeyOwner(
    ImGuiKey key,
    DartImGuiID owner_id,
    DartImGuiInputFlags flags,
  ) {
    return _igSetKeyOwner(
      key.value,
      owner_id,
      flags,
    );
  }

  late final _igSetKeyOwnerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ImGuiID, ImGuiInputFlags)>>('igSetKeyOwner');
  late final _igSetKeyOwner =
      _igSetKeyOwnerPtr.asFunction<void Function(int, int, int)>();

  void igSetKeyOwnersForKeyChord(
    int key,
    int owner_id,
    int flags,
  ) {
    return _igSetKeyOwnersForKeyChord(
      key,
      owner_id,
      flags,
    );
  }

  late final _igSetKeyOwnersForKeyChordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiKeyChord, ImGuiID,
              ImGuiInputFlags)>>('igSetKeyOwnersForKeyChord');
  late final _igSetKeyOwnersForKeyChord =
      _igSetKeyOwnersForKeyChordPtr.asFunction<void Function(int, int, int)>();

  void igSetItemKeyOwner_InputFlags(
    ImGuiKey key,
    DartImGuiInputFlags flags,
  ) {
    return _igSetItemKeyOwner_InputFlags(
      key.value,
      flags,
    );
  }

  late final _igSetItemKeyOwner_InputFlagsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.UnsignedInt, ImGuiInputFlags)>>(
      'igSetItemKeyOwner_InputFlags');
  late final _igSetItemKeyOwner_InputFlags =
      _igSetItemKeyOwner_InputFlagsPtr.asFunction<void Function(int, int)>();

  bool igTestKeyOwner(
    ImGuiKey key,
    DartImGuiID owner_id,
  ) {
    return _igTestKeyOwner(
      key.value,
      owner_id,
    );
  }

  late final _igTestKeyOwnerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt, ImGuiID)>>(
          'igTestKeyOwner');
  late final _igTestKeyOwner =
      _igTestKeyOwnerPtr.asFunction<bool Function(int, int)>();

  ffi.Pointer<ImGuiKeyOwnerData> igGetKeyOwnerData(
    ffi.Pointer<ImGuiContext> ctx,
    ImGuiKey key,
  ) {
    return _igGetKeyOwnerData(
      ctx,
      key.value,
    );
  }

  late final _igGetKeyOwnerDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiKeyOwnerData> Function(ffi.Pointer<ImGuiContext>,
              ffi.UnsignedInt)>>('igGetKeyOwnerData');
  late final _igGetKeyOwnerData = _igGetKeyOwnerDataPtr.asFunction<
      ffi.Pointer<ImGuiKeyOwnerData> Function(
          ffi.Pointer<ImGuiContext>, int)>();

  bool igIsKeyDown_ID(
    ImGuiKey key,
    DartImGuiID owner_id,
  ) {
    return _igIsKeyDown_ID(
      key.value,
      owner_id,
    );
  }

  late final _igIsKeyDown_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt, ImGuiID)>>(
          'igIsKeyDown_ID');
  late final _igIsKeyDown_ID =
      _igIsKeyDown_IDPtr.asFunction<bool Function(int, int)>();

  bool igIsKeyPressed_InputFlags(
    ImGuiKey key,
    DartImGuiInputFlags flags,
    DartImGuiID owner_id,
  ) {
    return _igIsKeyPressed_InputFlags(
      key.value,
      flags,
      owner_id,
    );
  }

  late final _igIsKeyPressed_InputFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.UnsignedInt, ImGuiInputFlags,
              ImGuiID)>>('igIsKeyPressed_InputFlags');
  late final _igIsKeyPressed_InputFlags =
      _igIsKeyPressed_InputFlagsPtr.asFunction<bool Function(int, int, int)>();

  bool igIsKeyReleased_ID(
    ImGuiKey key,
    DartImGuiID owner_id,
  ) {
    return _igIsKeyReleased_ID(
      key.value,
      owner_id,
    );
  }

  late final _igIsKeyReleased_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt, ImGuiID)>>(
          'igIsKeyReleased_ID');
  late final _igIsKeyReleased_ID =
      _igIsKeyReleased_IDPtr.asFunction<bool Function(int, int)>();

  bool igIsKeyChordPressed_InputFlags(
    int key_chord,
    int flags,
    int owner_id,
  ) {
    return _igIsKeyChordPressed_InputFlags(
      key_chord,
      flags,
      owner_id,
    );
  }

  late final _igIsKeyChordPressed_InputFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiKeyChord, ImGuiInputFlags,
              ImGuiID)>>('igIsKeyChordPressed_InputFlags');
  late final _igIsKeyChordPressed_InputFlags =
      _igIsKeyChordPressed_InputFlagsPtr
          .asFunction<bool Function(int, int, int)>();

  bool igIsMouseDown_ID(
    int button,
    int owner_id,
  ) {
    return _igIsMouseDown_ID(
      button,
      owner_id,
    );
  }

  late final _igIsMouseDown_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton, ImGuiID)>>(
          'igIsMouseDown_ID');
  late final _igIsMouseDown_ID =
      _igIsMouseDown_IDPtr.asFunction<bool Function(int, int)>();

  bool igIsMouseClicked_InputFlags(
    int button,
    int flags,
    int owner_id,
  ) {
    return _igIsMouseClicked_InputFlags(
      button,
      flags,
      owner_id,
    );
  }

  late final _igIsMouseClicked_InputFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiMouseButton, ImGuiInputFlags,
              ImGuiID)>>('igIsMouseClicked_InputFlags');
  late final _igIsMouseClicked_InputFlags = _igIsMouseClicked_InputFlagsPtr
      .asFunction<bool Function(int, int, int)>();

  bool igIsMouseReleased_ID(
    int button,
    int owner_id,
  ) {
    return _igIsMouseReleased_ID(
      button,
      owner_id,
    );
  }

  late final _igIsMouseReleased_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton, ImGuiID)>>(
          'igIsMouseReleased_ID');
  late final _igIsMouseReleased_ID =
      _igIsMouseReleased_IDPtr.asFunction<bool Function(int, int)>();

  bool igIsMouseDoubleClicked_ID(
    int button,
    int owner_id,
  ) {
    return _igIsMouseDoubleClicked_ID(
      button,
      owner_id,
    );
  }

  late final _igIsMouseDoubleClicked_IDPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiMouseButton, ImGuiID)>>(
          'igIsMouseDoubleClicked_ID');
  late final _igIsMouseDoubleClicked_ID =
      _igIsMouseDoubleClicked_IDPtr.asFunction<bool Function(int, int)>();

  bool igShortcut_ID(
    int key_chord,
    int flags,
    int owner_id,
  ) {
    return _igShortcut_ID(
      key_chord,
      flags,
      owner_id,
    );
  }

  late final _igShortcut_IDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImGuiKeyChord, ImGuiInputFlags, ImGuiID)>>('igShortcut_ID');
  late final _igShortcut_ID =
      _igShortcut_IDPtr.asFunction<bool Function(int, int, int)>();

  bool igSetShortcutRouting(
    int key_chord,
    int flags,
    int owner_id,
  ) {
    return _igSetShortcutRouting(
      key_chord,
      flags,
      owner_id,
    );
  }

  late final _igSetShortcutRoutingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiKeyChord, ImGuiInputFlags,
              ImGuiID)>>('igSetShortcutRouting');
  late final _igSetShortcutRouting =
      _igSetShortcutRoutingPtr.asFunction<bool Function(int, int, int)>();

  bool igTestShortcutRouting(
    int key_chord,
    int owner_id,
  ) {
    return _igTestShortcutRouting(
      key_chord,
      owner_id,
    );
  }

  late final _igTestShortcutRoutingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiKeyChord, ImGuiID)>>(
          'igTestShortcutRouting');
  late final _igTestShortcutRouting =
      _igTestShortcutRoutingPtr.asFunction<bool Function(int, int)>();

  ffi.Pointer<ImGuiKeyRoutingData> igGetShortcutRoutingData(
    int key_chord,
  ) {
    return _igGetShortcutRoutingData(
      key_chord,
    );
  }

  late final _igGetShortcutRoutingDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiKeyRoutingData> Function(
              ImGuiKeyChord)>>('igGetShortcutRoutingData');
  late final _igGetShortcutRoutingData = _igGetShortcutRoutingDataPtr
      .asFunction<ffi.Pointer<ImGuiKeyRoutingData> Function(int)>();

  void igDockContextInitialize(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextInitialize(
      ctx,
    );
  }

  late final _igDockContextInitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextInitialize');
  late final _igDockContextInitialize = _igDockContextInitializePtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  void igDockContextShutdown(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextShutdown(
      ctx,
    );
  }

  late final _igDockContextShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextShutdown');
  late final _igDockContextShutdown = _igDockContextShutdownPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  void igDockContextClearNodes(
    ffi.Pointer<ImGuiContext> ctx,
    int root_id,
    bool clear_settings_refs,
  ) {
    return _igDockContextClearNodes(
      ctx,
      root_id,
      clear_settings_refs,
    );
  }

  late final _igDockContextClearNodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext>, ImGuiID,
              ffi.Bool)>>('igDockContextClearNodes');
  late final _igDockContextClearNodes = _igDockContextClearNodesPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>, int, bool)>();

  void igDockContextRebuildNodes(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextRebuildNodes(
      ctx,
    );
  }

  late final _igDockContextRebuildNodesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextRebuildNodes');
  late final _igDockContextRebuildNodes = _igDockContextRebuildNodesPtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  void igDockContextNewFrameUpdateUndocking(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextNewFrameUpdateUndocking(
      ctx,
    );
  }

  late final _igDockContextNewFrameUpdateUndockingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextNewFrameUpdateUndocking');
  late final _igDockContextNewFrameUpdateUndocking =
      _igDockContextNewFrameUpdateUndockingPtr
          .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  void igDockContextNewFrameUpdateDocking(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextNewFrameUpdateDocking(
      ctx,
    );
  }

  late final _igDockContextNewFrameUpdateDockingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextNewFrameUpdateDocking');
  late final _igDockContextNewFrameUpdateDocking =
      _igDockContextNewFrameUpdateDockingPtr
          .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  void igDockContextEndFrame(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextEndFrame(
      ctx,
    );
  }

  late final _igDockContextEndFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextEndFrame');
  late final _igDockContextEndFrame = _igDockContextEndFramePtr
      .asFunction<void Function(ffi.Pointer<ImGuiContext>)>();

  int igDockContextGenNodeID(
    ffi.Pointer<ImGuiContext> ctx,
  ) {
    return _igDockContextGenNodeID(
      ctx,
    );
  }

  late final _igDockContextGenNodeIDPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiContext>)>>(
          'igDockContextGenNodeID');
  late final _igDockContextGenNodeID = _igDockContextGenNodeIDPtr
      .asFunction<int Function(ffi.Pointer<ImGuiContext>)>();

  void igDockContextQueueDock(
    ffi.Pointer<ImGuiContext> ctx,
    ffi.Pointer<ImGuiWindow> target,
    ffi.Pointer<ImGuiDockNode> target_node,
    ffi.Pointer<ImGuiWindow> payload,
    ImGuiDir split_dir,
    double split_ratio,
    bool split_outer,
  ) {
    return _igDockContextQueueDock(
      ctx,
      target,
      target_node,
      payload,
      split_dir.value,
      split_ratio,
      split_outer,
    );
  }

  late final _igDockContextQueueDockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiContext>,
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiDockNode>,
              ffi.Pointer<ImGuiWindow>,
              ffi.Int,
              ffi.Float,
              ffi.Bool)>>('igDockContextQueueDock');
  late final _igDockContextQueueDock = _igDockContextQueueDockPtr.asFunction<
      void Function(
          ffi.Pointer<ImGuiContext>,
          ffi.Pointer<ImGuiWindow>,
          ffi.Pointer<ImGuiDockNode>,
          ffi.Pointer<ImGuiWindow>,
          int,
          double,
          bool)>();

  void igDockContextQueueUndockWindow(
    ffi.Pointer<ImGuiContext> ctx,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igDockContextQueueUndockWindow(
      ctx,
      window,
    );
  }

  late final _igDockContextQueueUndockWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext>,
              ffi.Pointer<ImGuiWindow>)>>('igDockContextQueueUndockWindow');
  late final _igDockContextQueueUndockWindow =
      _igDockContextQueueUndockWindowPtr.asFunction<
          void Function(ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiWindow>)>();

  void igDockContextQueueUndockNode(
    ffi.Pointer<ImGuiContext> ctx,
    ffi.Pointer<ImGuiDockNode> node,
  ) {
    return _igDockContextQueueUndockNode(
      ctx,
      node,
    );
  }

  late final _igDockContextQueueUndockNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext>,
              ffi.Pointer<ImGuiDockNode>)>>('igDockContextQueueUndockNode');
  late final _igDockContextQueueUndockNode =
      _igDockContextQueueUndockNodePtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiDockNode>)>();

  void igDockContextProcessUndockWindow(
    ffi.Pointer<ImGuiContext> ctx,
    ffi.Pointer<ImGuiWindow> window,
    bool clear_persistent_docking_ref,
  ) {
    return _igDockContextProcessUndockWindow(
      ctx,
      window,
      clear_persistent_docking_ref,
    );
  }

  late final _igDockContextProcessUndockWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiWindow>,
              ffi.Bool)>>('igDockContextProcessUndockWindow');
  late final _igDockContextProcessUndockWindow =
      _igDockContextProcessUndockWindowPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiWindow>, bool)>();

  void igDockContextProcessUndockNode(
    ffi.Pointer<ImGuiContext> ctx,
    ffi.Pointer<ImGuiDockNode> node,
  ) {
    return _igDockContextProcessUndockNode(
      ctx,
      node,
    );
  }

  late final _igDockContextProcessUndockNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext>,
              ffi.Pointer<ImGuiDockNode>)>>('igDockContextProcessUndockNode');
  late final _igDockContextProcessUndockNode =
      _igDockContextProcessUndockNodePtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiDockNode>)>();

  bool igDockContextCalcDropPosForDocking(
    ffi.Pointer<ImGuiWindow> target,
    ffi.Pointer<ImGuiDockNode> target_node,
    ffi.Pointer<ImGuiWindow> payload_window,
    ffi.Pointer<ImGuiDockNode> payload_node,
    ImGuiDir split_dir,
    bool split_outer,
    ffi.Pointer<ImVec2> out_pos,
  ) {
    return _igDockContextCalcDropPosForDocking(
      target,
      target_node,
      payload_window,
      payload_node,
      split_dir.value,
      split_outer,
      out_pos,
    );
  }

  late final _igDockContextCalcDropPosForDockingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiDockNode>,
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiDockNode>,
              ffi.Int,
              ffi.Bool,
              ffi.Pointer<ImVec2>)>>('igDockContextCalcDropPosForDocking');
  late final _igDockContextCalcDropPosForDocking =
      _igDockContextCalcDropPosForDockingPtr.asFunction<
          bool Function(
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiDockNode>,
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiDockNode>,
              int,
              bool,
              ffi.Pointer<ImVec2>)>();

  ffi.Pointer<ImGuiDockNode> igDockContextFindNodeByID(
    ffi.Pointer<ImGuiContext> ctx,
    int id,
  ) {
    return _igDockContextFindNodeByID(
      ctx,
      id,
    );
  }

  late final _igDockContextFindNodeByIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiDockNode> Function(ffi.Pointer<ImGuiContext>,
              ImGuiID)>>('igDockContextFindNodeByID');
  late final _igDockContextFindNodeByID =
      _igDockContextFindNodeByIDPtr.asFunction<
          ffi.Pointer<ImGuiDockNode> Function(
              ffi.Pointer<ImGuiContext>, int)>();

  void igDockNodeWindowMenuHandler_Default(
    ffi.Pointer<ImGuiContext> ctx,
    ffi.Pointer<ImGuiDockNode> node,
    ffi.Pointer<ImGuiTabBar> tab_bar,
  ) {
    return _igDockNodeWindowMenuHandler_Default(
      ctx,
      node,
      tab_bar,
    );
  }

  late final _igDockNodeWindowMenuHandler_DefaultPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiContext>,
                  ffi.Pointer<ImGuiDockNode>, ffi.Pointer<ImGuiTabBar>)>>(
      'igDockNodeWindowMenuHandler_Default');
  late final _igDockNodeWindowMenuHandler_Default =
      _igDockNodeWindowMenuHandler_DefaultPtr.asFunction<
          void Function(ffi.Pointer<ImGuiContext>, ffi.Pointer<ImGuiDockNode>,
              ffi.Pointer<ImGuiTabBar>)>();

  bool igDockNodeBeginAmendTabBar(
    ffi.Pointer<ImGuiDockNode> node,
  ) {
    return _igDockNodeBeginAmendTabBar(
      node,
    );
  }

  late final _igDockNodeBeginAmendTabBarPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiDockNode>)>>(
      'igDockNodeBeginAmendTabBar');
  late final _igDockNodeBeginAmendTabBar = _igDockNodeBeginAmendTabBarPtr
      .asFunction<bool Function(ffi.Pointer<ImGuiDockNode>)>();

  void igDockNodeEndAmendTabBar() {
    return _igDockNodeEndAmendTabBar();
  }

  late final _igDockNodeEndAmendTabBarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igDockNodeEndAmendTabBar');
  late final _igDockNodeEndAmendTabBar =
      _igDockNodeEndAmendTabBarPtr.asFunction<void Function()>();

  ffi.Pointer<ImGuiDockNode> igDockNodeGetRootNode(
    ffi.Pointer<ImGuiDockNode> node,
  ) {
    return _igDockNodeGetRootNode(
      node,
    );
  }

  late final _igDockNodeGetRootNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiDockNode> Function(
              ffi.Pointer<ImGuiDockNode>)>>('igDockNodeGetRootNode');
  late final _igDockNodeGetRootNode = _igDockNodeGetRootNodePtr.asFunction<
      ffi.Pointer<ImGuiDockNode> Function(ffi.Pointer<ImGuiDockNode>)>();

  bool igDockNodeIsInHierarchyOf(
    ffi.Pointer<ImGuiDockNode> node,
    ffi.Pointer<ImGuiDockNode> parent,
  ) {
    return _igDockNodeIsInHierarchyOf(
      node,
      parent,
    );
  }

  late final _igDockNodeIsInHierarchyOfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiDockNode>,
              ffi.Pointer<ImGuiDockNode>)>>('igDockNodeIsInHierarchyOf');
  late final _igDockNodeIsInHierarchyOf =
      _igDockNodeIsInHierarchyOfPtr.asFunction<
          bool Function(
              ffi.Pointer<ImGuiDockNode>, ffi.Pointer<ImGuiDockNode>)>();

  int igDockNodeGetDepth(
    ffi.Pointer<ImGuiDockNode> node,
  ) {
    return _igDockNodeGetDepth(
      node,
    );
  }

  late final _igDockNodeGetDepthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ImGuiDockNode>)>>(
          'igDockNodeGetDepth');
  late final _igDockNodeGetDepth = _igDockNodeGetDepthPtr
      .asFunction<int Function(ffi.Pointer<ImGuiDockNode>)>();

  int igDockNodeGetWindowMenuButtonId(
    ffi.Pointer<ImGuiDockNode> node,
  ) {
    return _igDockNodeGetWindowMenuButtonId(
      node,
    );
  }

  late final _igDockNodeGetWindowMenuButtonIdPtr =
      _lookup<ffi.NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiDockNode>)>>(
          'igDockNodeGetWindowMenuButtonId');
  late final _igDockNodeGetWindowMenuButtonId =
      _igDockNodeGetWindowMenuButtonIdPtr
          .asFunction<int Function(ffi.Pointer<ImGuiDockNode>)>();

  ffi.Pointer<ImGuiDockNode> igGetWindowDockNode() {
    return _igGetWindowDockNode();
  }

  late final _igGetWindowDockNodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiDockNode> Function()>>(
          'igGetWindowDockNode');
  late final _igGetWindowDockNode = _igGetWindowDockNodePtr
      .asFunction<ffi.Pointer<ImGuiDockNode> Function()>();

  bool igGetWindowAlwaysWantOwnTabBar(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igGetWindowAlwaysWantOwnTabBar(
      window,
    );
  }

  late final _igGetWindowAlwaysWantOwnTabBarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiWindow>)>>(
          'igGetWindowAlwaysWantOwnTabBar');
  late final _igGetWindowAlwaysWantOwnTabBar =
      _igGetWindowAlwaysWantOwnTabBarPtr
          .asFunction<bool Function(ffi.Pointer<ImGuiWindow>)>();

  void igBeginDocked(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ffi.Bool> p_open,
  ) {
    return _igBeginDocked(
      window,
      p_open,
    );
  }

  late final _igBeginDockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ffi.Bool>)>>('igBeginDocked');
  late final _igBeginDocked = _igBeginDockedPtr.asFunction<
      void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ffi.Bool>)>();

  void igBeginDockableDragDropSource(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igBeginDockableDragDropSource(
      window,
    );
  }

  late final _igBeginDockableDragDropSourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igBeginDockableDragDropSource');
  late final _igBeginDockableDragDropSource = _igBeginDockableDragDropSourcePtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igBeginDockableDragDropTarget(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igBeginDockableDragDropTarget(
      window,
    );
  }

  late final _igBeginDockableDragDropTargetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igBeginDockableDragDropTarget');
  late final _igBeginDockableDragDropTarget = _igBeginDockableDragDropTargetPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igSetWindowDock(
    ffi.Pointer<ImGuiWindow> window,
    int dock_id,
    int cond,
  ) {
    return _igSetWindowDock(
      window,
      dock_id,
      cond,
    );
  }

  late final _igSetWindowDockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImGuiID,
              ImGuiCond)>>('igSetWindowDock');
  late final _igSetWindowDock = _igSetWindowDockPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindow>, int, int)>();

  void igDockBuilderDockWindow(
    ffi.Pointer<ffi.Char> window_name,
    int node_id,
  ) {
    return _igDockBuilderDockWindow(
      window_name,
      node_id,
    );
  }

  late final _igDockBuilderDockWindowPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>, ImGuiID)>>(
      'igDockBuilderDockWindow');
  late final _igDockBuilderDockWindow = _igDockBuilderDockWindowPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ImGuiDockNode> igDockBuilderGetNode(
    int node_id,
  ) {
    return _igDockBuilderGetNode(
      node_id,
    );
  }

  late final _igDockBuilderGetNodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiDockNode> Function(ImGuiID)>>(
          'igDockBuilderGetNode');
  late final _igDockBuilderGetNode = _igDockBuilderGetNodePtr
      .asFunction<ffi.Pointer<ImGuiDockNode> Function(int)>();

  ffi.Pointer<ImGuiDockNode> igDockBuilderGetCentralNode(
    int node_id,
  ) {
    return _igDockBuilderGetCentralNode(
      node_id,
    );
  }

  late final _igDockBuilderGetCentralNodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiDockNode> Function(ImGuiID)>>(
          'igDockBuilderGetCentralNode');
  late final _igDockBuilderGetCentralNode = _igDockBuilderGetCentralNodePtr
      .asFunction<ffi.Pointer<ImGuiDockNode> Function(int)>();

  int igDockBuilderAddNode(
    int node_id,
    int flags,
  ) {
    return _igDockBuilderAddNode(
      node_id,
      flags,
    );
  }

  late final _igDockBuilderAddNodePtr = _lookup<
          ffi.NativeFunction<ImGuiID Function(ImGuiID, ImGuiDockNodeFlags)>>(
      'igDockBuilderAddNode');
  late final _igDockBuilderAddNode =
      _igDockBuilderAddNodePtr.asFunction<int Function(int, int)>();

  void igDockBuilderRemoveNode(
    int node_id,
  ) {
    return _igDockBuilderRemoveNode(
      node_id,
    );
  }

  late final _igDockBuilderRemoveNodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igDockBuilderRemoveNode');
  late final _igDockBuilderRemoveNode =
      _igDockBuilderRemoveNodePtr.asFunction<void Function(int)>();

  void igDockBuilderRemoveNodeDockedWindows(
    int node_id,
    bool clear_settings_refs,
  ) {
    return _igDockBuilderRemoveNodeDockedWindows(
      node_id,
      clear_settings_refs,
    );
  }

  late final _igDockBuilderRemoveNodeDockedWindowsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ffi.Bool)>>(
          'igDockBuilderRemoveNodeDockedWindows');
  late final _igDockBuilderRemoveNodeDockedWindows =
      _igDockBuilderRemoveNodeDockedWindowsPtr
          .asFunction<void Function(int, bool)>();

  void igDockBuilderRemoveNodeChildNodes(
    int node_id,
  ) {
    return _igDockBuilderRemoveNodeChildNodes(
      node_id,
    );
  }

  late final _igDockBuilderRemoveNodeChildNodesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igDockBuilderRemoveNodeChildNodes');
  late final _igDockBuilderRemoveNodeChildNodes =
      _igDockBuilderRemoveNodeChildNodesPtr.asFunction<void Function(int)>();

  void igDockBuilderSetNodePos(
    int node_id,
    ImVec2 pos,
  ) {
    return _igDockBuilderSetNodePos(
      node_id,
      pos,
    );
  }

  late final _igDockBuilderSetNodePosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ImVec2)>>(
          'igDockBuilderSetNodePos');
  late final _igDockBuilderSetNodePos =
      _igDockBuilderSetNodePosPtr.asFunction<void Function(int, ImVec2)>();

  void igDockBuilderSetNodeSize(
    int node_id,
    ImVec2 size,
  ) {
    return _igDockBuilderSetNodeSize(
      node_id,
      size,
    );
  }

  late final _igDockBuilderSetNodeSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ImVec2)>>(
          'igDockBuilderSetNodeSize');
  late final _igDockBuilderSetNodeSize =
      _igDockBuilderSetNodeSizePtr.asFunction<void Function(int, ImVec2)>();

  DartImGuiID igDockBuilderSplitNode(
    DartImGuiID node_id,
    ImGuiDir split_dir,
    double size_ratio_for_node_at_dir,
    ffi.Pointer<ImGuiID> out_id_at_dir,
    ffi.Pointer<ImGuiID> out_id_at_opposite_dir,
  ) {
    return _igDockBuilderSplitNode(
      node_id,
      split_dir.value,
      size_ratio_for_node_at_dir,
      out_id_at_dir,
      out_id_at_opposite_dir,
    );
  }

  late final _igDockBuilderSplitNodePtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ImGuiID, ffi.Int, ffi.Float, ffi.Pointer<ImGuiID>,
              ffi.Pointer<ImGuiID>)>>('igDockBuilderSplitNode');
  late final _igDockBuilderSplitNode = _igDockBuilderSplitNodePtr.asFunction<
      int Function(
          int, int, double, ffi.Pointer<ImGuiID>, ffi.Pointer<ImGuiID>)>();

  void igDockBuilderCopyDockSpace(
    int src_dockspace_id,
    int dst_dockspace_id,
    ffi.Pointer<ImVector_const_charPtr> in_window_remap_pairs,
  ) {
    return _igDockBuilderCopyDockSpace(
      src_dockspace_id,
      dst_dockspace_id,
      in_window_remap_pairs,
    );
  }

  late final _igDockBuilderCopyDockSpacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ImGuiID, ImGuiID, ffi.Pointer<ImVector_const_charPtr>)>>(
      'igDockBuilderCopyDockSpace');
  late final _igDockBuilderCopyDockSpace =
      _igDockBuilderCopyDockSpacePtr.asFunction<
          void Function(int, int, ffi.Pointer<ImVector_const_charPtr>)>();

  void igDockBuilderCopyNode(
    int src_node_id,
    int dst_node_id,
    ffi.Pointer<ImVector_ImGuiID> out_node_remap_pairs,
  ) {
    return _igDockBuilderCopyNode(
      src_node_id,
      dst_node_id,
      out_node_remap_pairs,
    );
  }

  late final _igDockBuilderCopyNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiID, ImGuiID,
              ffi.Pointer<ImVector_ImGuiID>)>>('igDockBuilderCopyNode');
  late final _igDockBuilderCopyNode = _igDockBuilderCopyNodePtr
      .asFunction<void Function(int, int, ffi.Pointer<ImVector_ImGuiID>)>();

  void igDockBuilderCopyWindowSettings(
    ffi.Pointer<ffi.Char> src_name,
    ffi.Pointer<ffi.Char> dst_name,
  ) {
    return _igDockBuilderCopyWindowSettings(
      src_name,
      dst_name,
    );
  }

  late final _igDockBuilderCopyWindowSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igDockBuilderCopyWindowSettings');
  late final _igDockBuilderCopyWindowSettings =
      _igDockBuilderCopyWindowSettingsPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igDockBuilderFinish(
    int node_id,
  ) {
    return _igDockBuilderFinish(
      node_id,
    );
  }

  late final _igDockBuilderFinishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igDockBuilderFinish');
  late final _igDockBuilderFinish =
      _igDockBuilderFinishPtr.asFunction<void Function(int)>();

  void igPushFocusScope(
    int id,
  ) {
    return _igPushFocusScope(
      id,
    );
  }

  late final _igPushFocusScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igPushFocusScope');
  late final _igPushFocusScope =
      _igPushFocusScopePtr.asFunction<void Function(int)>();

  void igPopFocusScope() {
    return _igPopFocusScope();
  }

  late final _igPopFocusScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igPopFocusScope');
  late final _igPopFocusScope =
      _igPopFocusScopePtr.asFunction<void Function()>();

  int igGetCurrentFocusScope() {
    return _igGetCurrentFocusScope();
  }

  late final _igGetCurrentFocusScopePtr =
      _lookup<ffi.NativeFunction<ImGuiID Function()>>('igGetCurrentFocusScope');
  late final _igGetCurrentFocusScope =
      _igGetCurrentFocusScopePtr.asFunction<int Function()>();

  bool igIsDragDropActive() {
    return _igIsDragDropActive();
  }

  late final _igIsDragDropActivePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igIsDragDropActive');
  late final _igIsDragDropActive =
      _igIsDragDropActivePtr.asFunction<bool Function()>();

  bool igBeginDragDropTargetCustom(
    ImRect bb,
    int id,
  ) {
    return _igBeginDragDropTargetCustom(
      bb,
      id,
    );
  }

  late final _igBeginDragDropTargetCustomPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImRect, ImGuiID)>>(
          'igBeginDragDropTargetCustom');
  late final _igBeginDragDropTargetCustom =
      _igBeginDragDropTargetCustomPtr.asFunction<bool Function(ImRect, int)>();

  void igClearDragDrop() {
    return _igClearDragDrop();
  }

  late final _igClearDragDropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igClearDragDrop');
  late final _igClearDragDrop =
      _igClearDragDropPtr.asFunction<void Function()>();

  bool igIsDragDropPayloadBeingAccepted() {
    return _igIsDragDropPayloadBeingAccepted();
  }

  late final _igIsDragDropPayloadBeingAcceptedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'igIsDragDropPayloadBeingAccepted');
  late final _igIsDragDropPayloadBeingAccepted =
      _igIsDragDropPayloadBeingAcceptedPtr.asFunction<bool Function()>();

  void igRenderDragDropTargetRect(
    ImRect bb,
    ImRect item_clip_rect,
  ) {
    return _igRenderDragDropTargetRect(
      bb,
      item_clip_rect,
    );
  }

  late final _igRenderDragDropTargetRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImRect, ImRect)>>(
          'igRenderDragDropTargetRect');
  late final _igRenderDragDropTargetRect = _igRenderDragDropTargetRectPtr
      .asFunction<void Function(ImRect, ImRect)>();

  ffi.Pointer<ImGuiTypingSelectRequest> igGetTypingSelectRequest(
    int flags,
  ) {
    return _igGetTypingSelectRequest(
      flags,
    );
  }

  late final _igGetTypingSelectRequestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTypingSelectRequest> Function(
              ImGuiTypingSelectFlags)>>('igGetTypingSelectRequest');
  late final _igGetTypingSelectRequest = _igGetTypingSelectRequestPtr
      .asFunction<ffi.Pointer<ImGuiTypingSelectRequest> Function(int)>();

  int igTypingSelectFindMatch(
    ffi.Pointer<ImGuiTypingSelectRequest> req,
    int items_count,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
        get_item_name_func,
    ffi.Pointer<ffi.Void> user_data,
    int nav_item_idx,
  ) {
    return _igTypingSelectFindMatch(
      req,
      items_count,
      get_item_name_func,
      user_data,
      nav_item_idx,
    );
  }

  late final _igTypingSelectFindMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ImGuiTypingSelectRequest>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('igTypingSelectFindMatch');
  late final _igTypingSelectFindMatch = _igTypingSelectFindMatchPtr.asFunction<
      int Function(
          ffi.Pointer<ImGuiTypingSelectRequest>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Char> Function(
                      ffi.Pointer<ffi.Void>, ffi.Int)>>,
          ffi.Pointer<ffi.Void>,
          int)>();

  int igTypingSelectFindNextSingleCharMatch(
    ffi.Pointer<ImGuiTypingSelectRequest> req,
    int items_count,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
        get_item_name_func,
    ffi.Pointer<ffi.Void> user_data,
    int nav_item_idx,
  ) {
    return _igTypingSelectFindNextSingleCharMatch(
      req,
      items_count,
      get_item_name_func,
      user_data,
      nav_item_idx,
    );
  }

  late final _igTypingSelectFindNextSingleCharMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ImGuiTypingSelectRequest>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int)>>('igTypingSelectFindNextSingleCharMatch');
  late final _igTypingSelectFindNextSingleCharMatch =
      _igTypingSelectFindNextSingleCharMatchPtr.asFunction<
          int Function(
              ffi.Pointer<ImGuiTypingSelectRequest>,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>,
              int)>();

  int igTypingSelectFindBestLeadingMatch(
    ffi.Pointer<ImGuiTypingSelectRequest> req,
    int items_count,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>, ffi.Int)>>
        get_item_name_func,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _igTypingSelectFindBestLeadingMatch(
      req,
      items_count,
      get_item_name_func,
      user_data,
    );
  }

  late final _igTypingSelectFindBestLeadingMatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ImGuiTypingSelectRequest>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>)>>('igTypingSelectFindBestLeadingMatch');
  late final _igTypingSelectFindBestLeadingMatch =
      _igTypingSelectFindBestLeadingMatchPtr.asFunction<
          int Function(
              ffi.Pointer<ImGuiTypingSelectRequest>,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Char> Function(
                          ffi.Pointer<ffi.Void>, ffi.Int)>>,
              ffi.Pointer<ffi.Void>)>();

  bool igBeginBoxSelect(
    ImRect scope_rect,
    ffi.Pointer<ImGuiWindow> window,
    int box_select_id,
    int ms_flags,
  ) {
    return _igBeginBoxSelect(
      scope_rect,
      window,
      box_select_id,
      ms_flags,
    );
  }

  late final _igBeginBoxSelectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImRect, ffi.Pointer<ImGuiWindow>, ImGuiID,
              ImGuiMultiSelectFlags)>>('igBeginBoxSelect');
  late final _igBeginBoxSelect = _igBeginBoxSelectPtr
      .asFunction<bool Function(ImRect, ffi.Pointer<ImGuiWindow>, int, int)>();

  void igEndBoxSelect(
    ImRect scope_rect,
    int ms_flags,
  ) {
    return _igEndBoxSelect(
      scope_rect,
      ms_flags,
    );
  }

  late final _igEndBoxSelectPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ImRect, ImGuiMultiSelectFlags)>>(
      'igEndBoxSelect');
  late final _igEndBoxSelect =
      _igEndBoxSelectPtr.asFunction<void Function(ImRect, int)>();

  void igMultiSelectItemHeader(
    int id,
    ffi.Pointer<ffi.Bool> p_selected,
    ffi.Pointer<ImGuiButtonFlags> p_button_flags,
  ) {
    return _igMultiSelectItemHeader(
      id,
      p_selected,
      p_button_flags,
    );
  }

  late final _igMultiSelectItemHeaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiID, ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ImGuiButtonFlags>)>>('igMultiSelectItemHeader');
  late final _igMultiSelectItemHeader = _igMultiSelectItemHeaderPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Bool>, ffi.Pointer<ImGuiButtonFlags>)>();

  void igMultiSelectItemFooter(
    int id,
    ffi.Pointer<ffi.Bool> p_selected,
    ffi.Pointer<ffi.Bool> p_pressed,
  ) {
    return _igMultiSelectItemFooter(
      id,
      p_selected,
      p_pressed,
    );
  }

  late final _igMultiSelectItemFooterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiID, ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('igMultiSelectItemFooter');
  late final _igMultiSelectItemFooter = _igMultiSelectItemFooterPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>();

  void igMultiSelectAddSetAll(
    ffi.Pointer<ImGuiMultiSelectTempData> ms,
    bool selected,
  ) {
    return _igMultiSelectAddSetAll(
      ms,
      selected,
    );
  }

  late final _igMultiSelectAddSetAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiMultiSelectTempData>,
              ffi.Bool)>>('igMultiSelectAddSetAll');
  late final _igMultiSelectAddSetAll = _igMultiSelectAddSetAllPtr
      .asFunction<void Function(ffi.Pointer<ImGuiMultiSelectTempData>, bool)>();

  void igMultiSelectAddSetRange(
    ffi.Pointer<ImGuiMultiSelectTempData> ms,
    bool selected,
    int range_dir,
    int first_item,
    int last_item,
  ) {
    return _igMultiSelectAddSetRange(
      ms,
      selected,
      range_dir,
      first_item,
      last_item,
    );
  }

  late final _igMultiSelectAddSetRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiMultiSelectTempData>,
              ffi.Bool,
              ffi.Int,
              ImGuiSelectionUserData,
              ImGuiSelectionUserData)>>('igMultiSelectAddSetRange');
  late final _igMultiSelectAddSetRange =
      _igMultiSelectAddSetRangePtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiMultiSelectTempData>, bool, int, int, int)>();

  ffi.Pointer<ImGuiBoxSelectState> igGetBoxSelectState(
    int id,
  ) {
    return _igGetBoxSelectState(
      id,
    );
  }

  late final _igGetBoxSelectStatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImGuiBoxSelectState> Function(ImGuiID)>>(
      'igGetBoxSelectState');
  late final _igGetBoxSelectState = _igGetBoxSelectStatePtr
      .asFunction<ffi.Pointer<ImGuiBoxSelectState> Function(int)>();

  ffi.Pointer<ImGuiMultiSelectState> igGetMultiSelectState(
    int id,
  ) {
    return _igGetMultiSelectState(
      id,
    );
  }

  late final _igGetMultiSelectStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiMultiSelectState> Function(
              ImGuiID)>>('igGetMultiSelectState');
  late final _igGetMultiSelectState = _igGetMultiSelectStatePtr
      .asFunction<ffi.Pointer<ImGuiMultiSelectState> Function(int)>();

  void igSetWindowClipRectBeforeSetChannel(
    ffi.Pointer<ImGuiWindow> window,
    ImRect clip_rect,
  ) {
    return _igSetWindowClipRectBeforeSetChannel(
      window,
      clip_rect,
    );
  }

  late final _igSetWindowClipRectBeforeSetChannelPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>, ImRect)>>(
      'igSetWindowClipRectBeforeSetChannel');
  late final _igSetWindowClipRectBeforeSetChannel =
      _igSetWindowClipRectBeforeSetChannelPtr
          .asFunction<void Function(ffi.Pointer<ImGuiWindow>, ImRect)>();

  void igBeginColumns(
    ffi.Pointer<ffi.Char> str_id,
    int count,
    int flags,
  ) {
    return _igBeginColumns(
      str_id,
      count,
      flags,
    );
  }

  late final _igBeginColumnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ImGuiOldColumnFlags)>>('igBeginColumns');
  late final _igBeginColumns = _igBeginColumnsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int, int)>();

  void igEndColumns() {
    return _igEndColumns();
  }

  late final _igEndColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndColumns');
  late final _igEndColumns = _igEndColumnsPtr.asFunction<void Function()>();

  void igPushColumnClipRect(
    int column_index,
  ) {
    return _igPushColumnClipRect(
      column_index,
    );
  }

  late final _igPushColumnClipRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'igPushColumnClipRect');
  late final _igPushColumnClipRect =
      _igPushColumnClipRectPtr.asFunction<void Function(int)>();

  void igPushColumnsBackground() {
    return _igPushColumnsBackground();
  }

  late final _igPushColumnsBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igPushColumnsBackground');
  late final _igPushColumnsBackground =
      _igPushColumnsBackgroundPtr.asFunction<void Function()>();

  void igPopColumnsBackground() {
    return _igPopColumnsBackground();
  }

  late final _igPopColumnsBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igPopColumnsBackground');
  late final _igPopColumnsBackground =
      _igPopColumnsBackgroundPtr.asFunction<void Function()>();

  int igGetColumnsID(
    ffi.Pointer<ffi.Char> str_id,
    int count,
  ) {
    return _igGetColumnsID(
      str_id,
      count,
    );
  }

  late final _igGetColumnsIDPtr = _lookup<
          ffi.NativeFunction<ImGuiID Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'igGetColumnsID');
  late final _igGetColumnsID =
      _igGetColumnsIDPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ImGuiOldColumns> igFindOrCreateColumns(
    ffi.Pointer<ImGuiWindow> window,
    int id,
  ) {
    return _igFindOrCreateColumns(
      window,
      id,
    );
  }

  late final _igFindOrCreateColumnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiOldColumns> Function(
              ffi.Pointer<ImGuiWindow>, ImGuiID)>>('igFindOrCreateColumns');
  late final _igFindOrCreateColumns = _igFindOrCreateColumnsPtr.asFunction<
      ffi.Pointer<ImGuiOldColumns> Function(ffi.Pointer<ImGuiWindow>, int)>();

  double igGetColumnOffsetFromNorm(
    ffi.Pointer<ImGuiOldColumns> columns,
    double offset_norm,
  ) {
    return _igGetColumnOffsetFromNorm(
      columns,
      offset_norm,
    );
  }

  late final _igGetColumnOffsetFromNormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ImGuiOldColumns>,
              ffi.Float)>>('igGetColumnOffsetFromNorm');
  late final _igGetColumnOffsetFromNorm = _igGetColumnOffsetFromNormPtr
      .asFunction<double Function(ffi.Pointer<ImGuiOldColumns>, double)>();

  double igGetColumnNormFromOffset(
    ffi.Pointer<ImGuiOldColumns> columns,
    double offset,
  ) {
    return _igGetColumnNormFromOffset(
      columns,
      offset,
    );
  }

  late final _igGetColumnNormFromOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ImGuiOldColumns>,
              ffi.Float)>>('igGetColumnNormFromOffset');
  late final _igGetColumnNormFromOffset = _igGetColumnNormFromOffsetPtr
      .asFunction<double Function(ffi.Pointer<ImGuiOldColumns>, double)>();

  void igTableOpenContextMenu(
    int column_n,
  ) {
    return _igTableOpenContextMenu(
      column_n,
    );
  }

  late final _igTableOpenContextMenuPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'igTableOpenContextMenu');
  late final _igTableOpenContextMenu =
      _igTableOpenContextMenuPtr.asFunction<void Function(int)>();

  void igTableSetColumnWidth(
    int column_n,
    double width,
  ) {
    return _igTableSetColumnWidth(
      column_n,
      width,
    );
  }

  late final _igTableSetColumnWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'igTableSetColumnWidth');
  late final _igTableSetColumnWidth =
      _igTableSetColumnWidthPtr.asFunction<void Function(int, double)>();

  void igTableSetColumnSortDirection(
    int column_n,
    ImGuiSortDirection sort_direction,
    bool append_to_sort_specs,
  ) {
    return _igTableSetColumnSortDirection(
      column_n,
      sort_direction.value,
      append_to_sort_specs,
    );
  }

  late final _igTableSetColumnSortDirectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.UnsignedInt,
              ffi.Bool)>>('igTableSetColumnSortDirection');
  late final _igTableSetColumnSortDirection = _igTableSetColumnSortDirectionPtr
      .asFunction<void Function(int, int, bool)>();

  int igTableGetHoveredRow() {
    return _igTableGetHoveredRow();
  }

  late final _igTableGetHoveredRowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('igTableGetHoveredRow');
  late final _igTableGetHoveredRow =
      _igTableGetHoveredRowPtr.asFunction<int Function()>();

  double igTableGetHeaderRowHeight() {
    return _igTableGetHeaderRowHeight();
  }

  late final _igTableGetHeaderRowHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'igTableGetHeaderRowHeight');
  late final _igTableGetHeaderRowHeight =
      _igTableGetHeaderRowHeightPtr.asFunction<double Function()>();

  double igTableGetHeaderAngledMaxLabelWidth() {
    return _igTableGetHeaderAngledMaxLabelWidth();
  }

  late final _igTableGetHeaderAngledMaxLabelWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'igTableGetHeaderAngledMaxLabelWidth');
  late final _igTableGetHeaderAngledMaxLabelWidth =
      _igTableGetHeaderAngledMaxLabelWidthPtr.asFunction<double Function()>();

  void igTablePushBackgroundChannel() {
    return _igTablePushBackgroundChannel();
  }

  late final _igTablePushBackgroundChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igTablePushBackgroundChannel');
  late final _igTablePushBackgroundChannel =
      _igTablePushBackgroundChannelPtr.asFunction<void Function()>();

  void igTablePopBackgroundChannel() {
    return _igTablePopBackgroundChannel();
  }

  late final _igTablePopBackgroundChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igTablePopBackgroundChannel');
  late final _igTablePopBackgroundChannel =
      _igTablePopBackgroundChannelPtr.asFunction<void Function()>();

  void igTableAngledHeadersRowEx(
    int row_id,
    double angle,
    double max_label_width,
    ffi.Pointer<ImGuiTableHeaderData> data,
    int data_count,
  ) {
    return _igTableAngledHeadersRowEx(
      row_id,
      angle,
      max_label_width,
      data,
      data_count,
    );
  }

  late final _igTableAngledHeadersRowExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiID,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ImGuiTableHeaderData>,
              ffi.Int)>>('igTableAngledHeadersRowEx');
  late final _igTableAngledHeadersRowEx =
      _igTableAngledHeadersRowExPtr.asFunction<
          void Function(
              int, double, double, ffi.Pointer<ImGuiTableHeaderData>, int)>();

  ffi.Pointer<ImGuiTable> igGetCurrentTable() {
    return _igGetCurrentTable();
  }

  late final _igGetCurrentTablePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTable> Function()>>(
          'igGetCurrentTable');
  late final _igGetCurrentTable =
      _igGetCurrentTablePtr.asFunction<ffi.Pointer<ImGuiTable> Function()>();

  ffi.Pointer<ImGuiTable> igTableFindByID(
    int id,
  ) {
    return _igTableFindByID(
      id,
    );
  }

  late final _igTableFindByIDPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTable> Function(ImGuiID)>>(
          'igTableFindByID');
  late final _igTableFindByID =
      _igTableFindByIDPtr.asFunction<ffi.Pointer<ImGuiTable> Function(int)>();

  bool igBeginTableEx(
    ffi.Pointer<ffi.Char> name,
    int id,
    int columns_count,
    int flags,
    ImVec2 outer_size,
    double inner_width,
  ) {
    return _igBeginTableEx(
      name,
      id,
      columns_count,
      flags,
      outer_size,
      inner_width,
    );
  }

  late final _igBeginTableExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ImGuiID, ffi.Int,
              ImGuiTableFlags, ImVec2, ffi.Float)>>('igBeginTableEx');
  late final _igBeginTableEx = _igBeginTableExPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, int, int, ImVec2, double)>();

  void igTableBeginInitMemory(
    ffi.Pointer<ImGuiTable> table,
    int columns_count,
  ) {
    return _igTableBeginInitMemory(
      table,
      columns_count,
    );
  }

  late final _igTableBeginInitMemoryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>, ffi.Int)>>(
      'igTableBeginInitMemory');
  late final _igTableBeginInitMemory = _igTableBeginInitMemoryPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>, int)>();

  void igTableBeginApplyRequests(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableBeginApplyRequests(
      table,
    );
  }

  late final _igTableBeginApplyRequestsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableBeginApplyRequests');
  late final _igTableBeginApplyRequests = _igTableBeginApplyRequestsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableSetupDrawChannels(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableSetupDrawChannels(
      table,
    );
  }

  late final _igTableSetupDrawChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableSetupDrawChannels');
  late final _igTableSetupDrawChannels = _igTableSetupDrawChannelsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableUpdateLayout(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableUpdateLayout(
      table,
    );
  }

  late final _igTableUpdateLayoutPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableUpdateLayout');
  late final _igTableUpdateLayout = _igTableUpdateLayoutPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableUpdateBorders(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableUpdateBorders(
      table,
    );
  }

  late final _igTableUpdateBordersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableUpdateBorders');
  late final _igTableUpdateBorders = _igTableUpdateBordersPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableUpdateColumnsWeightFromWidth(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableUpdateColumnsWeightFromWidth(
      table,
    );
  }

  late final _igTableUpdateColumnsWeightFromWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableUpdateColumnsWeightFromWidth');
  late final _igTableUpdateColumnsWeightFromWidth =
      _igTableUpdateColumnsWeightFromWidthPtr
          .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableDrawBorders(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableDrawBorders(
      table,
    );
  }

  late final _igTableDrawBordersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableDrawBorders');
  late final _igTableDrawBorders = _igTableDrawBordersPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableDrawDefaultContextMenu(
    ffi.Pointer<ImGuiTable> table,
    int flags_for_section_to_display,
  ) {
    return _igTableDrawDefaultContextMenu(
      table,
      flags_for_section_to_display,
    );
  }

  late final _igTableDrawDefaultContextMenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTable>,
              ImGuiTableFlags)>>('igTableDrawDefaultContextMenu');
  late final _igTableDrawDefaultContextMenu = _igTableDrawDefaultContextMenuPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>, int)>();

  bool igTableBeginContextMenuPopup(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableBeginContextMenuPopup(
      table,
    );
  }

  late final _igTableBeginContextMenuPopupPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableBeginContextMenuPopup');
  late final _igTableBeginContextMenuPopup = _igTableBeginContextMenuPopupPtr
      .asFunction<bool Function(ffi.Pointer<ImGuiTable>)>();

  void igTableMergeDrawChannels(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableMergeDrawChannels(
      table,
    );
  }

  late final _igTableMergeDrawChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableMergeDrawChannels');
  late final _igTableMergeDrawChannels = _igTableMergeDrawChannelsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  ffi.Pointer<ImGuiTableInstanceData> igTableGetInstanceData(
    ffi.Pointer<ImGuiTable> table,
    int instance_no,
  ) {
    return _igTableGetInstanceData(
      table,
      instance_no,
    );
  }

  late final _igTableGetInstanceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTableInstanceData> Function(
              ffi.Pointer<ImGuiTable>, ffi.Int)>>('igTableGetInstanceData');
  late final _igTableGetInstanceData = _igTableGetInstanceDataPtr.asFunction<
      ffi.Pointer<ImGuiTableInstanceData> Function(
          ffi.Pointer<ImGuiTable>, int)>();

  int igTableGetInstanceID(
    ffi.Pointer<ImGuiTable> table,
    int instance_no,
  ) {
    return _igTableGetInstanceID(
      table,
      instance_no,
    );
  }

  late final _igTableGetInstanceIDPtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiTable>, ffi.Int)>>(
      'igTableGetInstanceID');
  late final _igTableGetInstanceID = _igTableGetInstanceIDPtr
      .asFunction<int Function(ffi.Pointer<ImGuiTable>, int)>();

  void igTableSortSpecsSanitize(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableSortSpecsSanitize(
      table,
    );
  }

  late final _igTableSortSpecsSanitizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableSortSpecsSanitize');
  late final _igTableSortSpecsSanitize = _igTableSortSpecsSanitizePtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableSortSpecsBuild(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableSortSpecsBuild(
      table,
    );
  }

  late final _igTableSortSpecsBuildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableSortSpecsBuild');
  late final _igTableSortSpecsBuild = _igTableSortSpecsBuildPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  ImGuiSortDirection igTableGetColumnNextSortDirection(
    ffi.Pointer<ImGuiTableColumn> column,
  ) {
    return ImGuiSortDirection.fromValue(_igTableGetColumnNextSortDirection(
      column,
    ));
  }

  late final _igTableGetColumnNextSortDirectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<ImGuiTableColumn>)>>(
      'igTableGetColumnNextSortDirection');
  late final _igTableGetColumnNextSortDirection =
      _igTableGetColumnNextSortDirectionPtr
          .asFunction<int Function(ffi.Pointer<ImGuiTableColumn>)>();

  void igTableFixColumnSortDirection(
    ffi.Pointer<ImGuiTable> table,
    ffi.Pointer<ImGuiTableColumn> column,
  ) {
    return _igTableFixColumnSortDirection(
      table,
      column,
    );
  }

  late final _igTableFixColumnSortDirectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTable>,
              ffi.Pointer<ImGuiTableColumn>)>>('igTableFixColumnSortDirection');
  late final _igTableFixColumnSortDirection =
      _igTableFixColumnSortDirectionPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiTable>, ffi.Pointer<ImGuiTableColumn>)>();

  double igTableGetColumnWidthAuto(
    ffi.Pointer<ImGuiTable> table,
    ffi.Pointer<ImGuiTableColumn> column,
  ) {
    return _igTableGetColumnWidthAuto(
      table,
      column,
    );
  }

  late final _igTableGetColumnWidthAutoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ImGuiTable>,
              ffi.Pointer<ImGuiTableColumn>)>>('igTableGetColumnWidthAuto');
  late final _igTableGetColumnWidthAuto =
      _igTableGetColumnWidthAutoPtr.asFunction<
          double Function(
              ffi.Pointer<ImGuiTable>, ffi.Pointer<ImGuiTableColumn>)>();

  void igTableBeginRow(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableBeginRow(
      table,
    );
  }

  late final _igTableBeginRowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableBeginRow');
  late final _igTableBeginRow =
      _igTableBeginRowPtr.asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableEndRow(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableEndRow(
      table,
    );
  }

  late final _igTableEndRowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableEndRow');
  late final _igTableEndRow =
      _igTableEndRowPtr.asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableBeginCell(
    ffi.Pointer<ImGuiTable> table,
    int column_n,
  ) {
    return _igTableBeginCell(
      table,
      column_n,
    );
  }

  late final _igTableBeginCellPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>, ffi.Int)>>(
      'igTableBeginCell');
  late final _igTableBeginCell = _igTableBeginCellPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>, int)>();

  void igTableEndCell(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableEndCell(
      table,
    );
  }

  late final _igTableEndCellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableEndCell');
  late final _igTableEndCell =
      _igTableEndCellPtr.asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableGetCellBgRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiTable> table,
    int column_n,
  ) {
    return _igTableGetCellBgRect(
      pOut,
      table,
      column_n,
    );
  }

  late final _igTableGetCellBgRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiTable>,
              ffi.Int)>>('igTableGetCellBgRect');
  late final _igTableGetCellBgRect = _igTableGetCellBgRectPtr.asFunction<
      void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiTable>, int)>();

  ffi.Pointer<ffi.Char> igTableGetColumnName_TablePtr(
    ffi.Pointer<ImGuiTable> table,
    int column_n,
  ) {
    return _igTableGetColumnName_TablePtr(
      table,
      column_n,
    );
  }

  late final _igTableGetColumnName_TablePtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTable>,
              ffi.Int)>>('igTableGetColumnName_TablePtr');
  late final _igTableGetColumnName_TablePtr =
      _igTableGetColumnName_TablePtrPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTable>, int)>();

  int igTableGetColumnResizeID(
    ffi.Pointer<ImGuiTable> table,
    int column_n,
    int instance_no,
  ) {
    return _igTableGetColumnResizeID(
      table,
      column_n,
      instance_no,
    );
  }

  late final _igTableGetColumnResizeIDPtr = _lookup<
      ffi.NativeFunction<
          ImGuiID Function(ffi.Pointer<ImGuiTable>, ffi.Int,
              ffi.Int)>>('igTableGetColumnResizeID');
  late final _igTableGetColumnResizeID = _igTableGetColumnResizeIDPtr
      .asFunction<int Function(ffi.Pointer<ImGuiTable>, int, int)>();

  double igTableCalcMaxColumnWidth(
    ffi.Pointer<ImGuiTable> table,
    int column_n,
  ) {
    return _igTableCalcMaxColumnWidth(
      table,
      column_n,
    );
  }

  late final _igTableCalcMaxColumnWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ImGuiTable>, ffi.Int)>>('igTableCalcMaxColumnWidth');
  late final _igTableCalcMaxColumnWidth = _igTableCalcMaxColumnWidthPtr
      .asFunction<double Function(ffi.Pointer<ImGuiTable>, int)>();

  void igTableSetColumnWidthAutoSingle(
    ffi.Pointer<ImGuiTable> table,
    int column_n,
  ) {
    return _igTableSetColumnWidthAutoSingle(
      table,
      column_n,
    );
  }

  late final _igTableSetColumnWidthAutoSinglePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>, ffi.Int)>>(
      'igTableSetColumnWidthAutoSingle');
  late final _igTableSetColumnWidthAutoSingle =
      _igTableSetColumnWidthAutoSinglePtr
          .asFunction<void Function(ffi.Pointer<ImGuiTable>, int)>();

  void igTableSetColumnWidthAutoAll(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableSetColumnWidthAutoAll(
      table,
    );
  }

  late final _igTableSetColumnWidthAutoAllPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableSetColumnWidthAutoAll');
  late final _igTableSetColumnWidthAutoAll = _igTableSetColumnWidthAutoAllPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableRemove(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableRemove(
      table,
    );
  }

  late final _igTableRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableRemove');
  late final _igTableRemove =
      _igTableRemovePtr.asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableGcCompactTransientBuffers_TablePtr(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableGcCompactTransientBuffers_TablePtr(
      table,
    );
  }

  late final _igTableGcCompactTransientBuffers_TablePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableGcCompactTransientBuffers_TablePtr');
  late final _igTableGcCompactTransientBuffers_TablePtr =
      _igTableGcCompactTransientBuffers_TablePtrPtr
          .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableGcCompactTransientBuffers_TableTempDataPtr(
    ffi.Pointer<ImGuiTableTempData> table,
  ) {
    return _igTableGcCompactTransientBuffers_TableTempDataPtr(
      table,
    );
  }

  late final _igTableGcCompactTransientBuffers_TableTempDataPtrPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTableTempData>)>>(
      'igTableGcCompactTransientBuffers_TableTempDataPtr');
  late final _igTableGcCompactTransientBuffers_TableTempDataPtr =
      _igTableGcCompactTransientBuffers_TableTempDataPtrPtr
          .asFunction<void Function(ffi.Pointer<ImGuiTableTempData>)>();

  void igTableGcCompactSettings() {
    return _igTableGcCompactSettings();
  }

  late final _igTableGcCompactSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igTableGcCompactSettings');
  late final _igTableGcCompactSettings =
      _igTableGcCompactSettingsPtr.asFunction<void Function()>();

  void igTableLoadSettings(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableLoadSettings(
      table,
    );
  }

  late final _igTableLoadSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableLoadSettings');
  late final _igTableLoadSettings = _igTableLoadSettingsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableSaveSettings(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableSaveSettings(
      table,
    );
  }

  late final _igTableSaveSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableSaveSettings');
  late final _igTableSaveSettings = _igTableSaveSettingsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igTableResetSettings(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableResetSettings(
      table,
    );
  }

  late final _igTableResetSettingsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igTableResetSettings');
  late final _igTableResetSettings = _igTableResetSettingsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  ffi.Pointer<ImGuiTableSettings> igTableGetBoundSettings(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igTableGetBoundSettings(
      table,
    );
  }

  late final _igTableGetBoundSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTableSettings> Function(
              ffi.Pointer<ImGuiTable>)>>('igTableGetBoundSettings');
  late final _igTableGetBoundSettings = _igTableGetBoundSettingsPtr.asFunction<
      ffi.Pointer<ImGuiTableSettings> Function(ffi.Pointer<ImGuiTable>)>();

  void igTableSettingsAddSettingsHandler() {
    return _igTableSettingsAddSettingsHandler();
  }

  late final _igTableSettingsAddSettingsHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igTableSettingsAddSettingsHandler');
  late final _igTableSettingsAddSettingsHandler =
      _igTableSettingsAddSettingsHandlerPtr.asFunction<void Function()>();

  ffi.Pointer<ImGuiTableSettings> igTableSettingsCreate(
    int id,
    int columns_count,
  ) {
    return _igTableSettingsCreate(
      id,
      columns_count,
    );
  }

  late final _igTableSettingsCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTableSettings> Function(
              ImGuiID, ffi.Int)>>('igTableSettingsCreate');
  late final _igTableSettingsCreate = _igTableSettingsCreatePtr
      .asFunction<ffi.Pointer<ImGuiTableSettings> Function(int, int)>();

  ffi.Pointer<ImGuiTableSettings> igTableSettingsFindByID(
    int id,
  ) {
    return _igTableSettingsFindByID(
      id,
    );
  }

  late final _igTableSettingsFindByIDPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImGuiTableSettings> Function(ImGuiID)>>(
      'igTableSettingsFindByID');
  late final _igTableSettingsFindByID = _igTableSettingsFindByIDPtr
      .asFunction<ffi.Pointer<ImGuiTableSettings> Function(int)>();

  ffi.Pointer<ImGuiTabBar> igGetCurrentTabBar() {
    return _igGetCurrentTabBar();
  }

  late final _igGetCurrentTabBarPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImGuiTabBar> Function()>>(
          'igGetCurrentTabBar');
  late final _igGetCurrentTabBar =
      _igGetCurrentTabBarPtr.asFunction<ffi.Pointer<ImGuiTabBar> Function()>();

  bool igBeginTabBarEx(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ImRect bb,
    int flags,
  ) {
    return _igBeginTabBarEx(
      tab_bar,
      bb,
      flags,
    );
  }

  late final _igBeginTabBarExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ImGuiTabBar>, ImRect,
              ImGuiTabBarFlags)>>('igBeginTabBarEx');
  late final _igBeginTabBarEx = _igBeginTabBarExPtr
      .asFunction<bool Function(ffi.Pointer<ImGuiTabBar>, ImRect, int)>();

  ffi.Pointer<ImGuiTabItem> igTabBarFindTabByID(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    int tab_id,
  ) {
    return _igTabBarFindTabByID(
      tab_bar,
      tab_id,
    );
  }

  late final _igTabBarFindTabByIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTabItem> Function(
              ffi.Pointer<ImGuiTabBar>, ImGuiID)>>('igTabBarFindTabByID');
  late final _igTabBarFindTabByID = _igTabBarFindTabByIDPtr.asFunction<
      ffi.Pointer<ImGuiTabItem> Function(ffi.Pointer<ImGuiTabBar>, int)>();

  ffi.Pointer<ImGuiTabItem> igTabBarFindTabByOrder(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    int order,
  ) {
    return _igTabBarFindTabByOrder(
      tab_bar,
      order,
    );
  }

  late final _igTabBarFindTabByOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTabItem> Function(
              ffi.Pointer<ImGuiTabBar>, ffi.Int)>>('igTabBarFindTabByOrder');
  late final _igTabBarFindTabByOrder = _igTabBarFindTabByOrderPtr.asFunction<
      ffi.Pointer<ImGuiTabItem> Function(ffi.Pointer<ImGuiTabBar>, int)>();

  ffi.Pointer<ImGuiTabItem> igTabBarFindMostRecentlySelectedTabForActiveWindow(
    ffi.Pointer<ImGuiTabBar> tab_bar,
  ) {
    return _igTabBarFindMostRecentlySelectedTabForActiveWindow(
      tab_bar,
    );
  }

  late final _igTabBarFindMostRecentlySelectedTabForActiveWindowPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ImGuiTabItem> Function(ffi.Pointer<ImGuiTabBar>)>>(
      'igTabBarFindMostRecentlySelectedTabForActiveWindow');
  late final _igTabBarFindMostRecentlySelectedTabForActiveWindow =
      _igTabBarFindMostRecentlySelectedTabForActiveWindowPtr.asFunction<
          ffi.Pointer<ImGuiTabItem> Function(ffi.Pointer<ImGuiTabBar>)>();

  ffi.Pointer<ImGuiTabItem> igTabBarGetCurrentTab(
    ffi.Pointer<ImGuiTabBar> tab_bar,
  ) {
    return _igTabBarGetCurrentTab(
      tab_bar,
    );
  }

  late final _igTabBarGetCurrentTabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiTabItem> Function(
              ffi.Pointer<ImGuiTabBar>)>>('igTabBarGetCurrentTab');
  late final _igTabBarGetCurrentTab = _igTabBarGetCurrentTabPtr.asFunction<
      ffi.Pointer<ImGuiTabItem> Function(ffi.Pointer<ImGuiTabBar>)>();

  int igTabBarGetTabOrder(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ImGuiTabItem> tab,
  ) {
    return _igTabBarGetTabOrder(
      tab_bar,
      tab,
    );
  }

  late final _igTabBarGetTabOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ImGuiTabItem>)>>('igTabBarGetTabOrder');
  late final _igTabBarGetTabOrder = _igTabBarGetTabOrderPtr.asFunction<
      int Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>)>();

  ffi.Pointer<ffi.Char> igTabBarGetTabName(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ImGuiTabItem> tab,
  ) {
    return _igTabBarGetTabName(
      tab_bar,
      tab,
    );
  }

  late final _igTabBarGetTabNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ImGuiTabItem>)>>('igTabBarGetTabName');
  late final _igTabBarGetTabName = _igTabBarGetTabNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>)>();

  void igTabBarAddTab(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    int tab_flags,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igTabBarAddTab(
      tab_bar,
      tab_flags,
      window,
    );
  }

  late final _igTabBarAddTabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>, ImGuiTabItemFlags,
              ffi.Pointer<ImGuiWindow>)>>('igTabBarAddTab');
  late final _igTabBarAddTab = _igTabBarAddTabPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTabBar>, int, ffi.Pointer<ImGuiWindow>)>();

  void igTabBarRemoveTab(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    int tab_id,
  ) {
    return _igTabBarRemoveTab(
      tab_bar,
      tab_id,
    );
  }

  late final _igTabBarRemoveTabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiTabBar>, ImGuiID)>>('igTabBarRemoveTab');
  late final _igTabBarRemoveTab = _igTabBarRemoveTabPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTabBar>, int)>();

  void igTabBarCloseTab(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ImGuiTabItem> tab,
  ) {
    return _igTabBarCloseTab(
      tab_bar,
      tab,
    );
  }

  late final _igTabBarCloseTabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ImGuiTabItem>)>>('igTabBarCloseTab');
  late final _igTabBarCloseTab = _igTabBarCloseTabPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>)>();

  void igTabBarQueueFocus_TabItemPtr(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ImGuiTabItem> tab,
  ) {
    return _igTabBarQueueFocus_TabItemPtr(
      tab_bar,
      tab,
    );
  }

  late final _igTabBarQueueFocus_TabItemPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ImGuiTabItem>)>>('igTabBarQueueFocus_TabItemPtr');
  late final _igTabBarQueueFocus_TabItemPtr =
      _igTabBarQueueFocus_TabItemPtrPtr.asFunction<
          void Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>)>();

  void igTabBarQueueFocus_Str(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ffi.Char> tab_name,
  ) {
    return _igTabBarQueueFocus_Str(
      tab_bar,
      tab_name,
    );
  }

  late final _igTabBarQueueFocus_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ffi.Char>)>>('igTabBarQueueFocus_Str');
  late final _igTabBarQueueFocus_Str = _igTabBarQueueFocus_StrPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ffi.Char>)>();

  void igTabBarQueueReorder(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ImGuiTabItem> tab,
    int offset,
  ) {
    return _igTabBarQueueReorder(
      tab_bar,
      tab,
      offset,
    );
  }

  late final _igTabBarQueueReorderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>,
              ffi.Int)>>('igTabBarQueueReorder');
  late final _igTabBarQueueReorder = _igTabBarQueueReorderPtr.asFunction<
      void Function(
          ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>, int)>();

  void igTabBarQueueReorderFromMousePos(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ImGuiTabItem> tab,
    ImVec2 mouse_pos,
  ) {
    return _igTabBarQueueReorderFromMousePos(
      tab_bar,
      tab,
      mouse_pos,
    );
  }

  late final _igTabBarQueueReorderFromMousePosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>,
              ImVec2)>>('igTabBarQueueReorderFromMousePos');
  late final _igTabBarQueueReorderFromMousePos =
      _igTabBarQueueReorderFromMousePosPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ImGuiTabItem>, ImVec2)>();

  bool igTabBarProcessReorder(
    ffi.Pointer<ImGuiTabBar> tab_bar,
  ) {
    return _igTabBarProcessReorder(
      tab_bar,
    );
  }

  late final _igTabBarProcessReorderPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiTabBar>)>>(
          'igTabBarProcessReorder');
  late final _igTabBarProcessReorder = _igTabBarProcessReorderPtr
      .asFunction<bool Function(ffi.Pointer<ImGuiTabBar>)>();

  bool igTabItemEx(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Bool> p_open,
    int flags,
    ffi.Pointer<ImGuiWindow> docked_window,
  ) {
    return _igTabItemEx(
      tab_bar,
      label,
      p_open,
      flags,
      docked_window,
    );
  }

  late final _igTabItemExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Bool>,
              ImGuiTabItemFlags,
              ffi.Pointer<ImGuiWindow>)>>('igTabItemEx');
  late final _igTabItemEx = _igTabItemExPtr.asFunction<
      bool Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Bool>, int, ffi.Pointer<ImGuiWindow>)>();

  void igTabItemCalcSize_Str(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ffi.Char> label,
    bool has_close_button_or_unsaved_marker,
  ) {
    return _igTabItemCalcSize_Str(
      pOut,
      label,
      has_close_button_or_unsaved_marker,
    );
  }

  late final _igTabItemCalcSize_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('igTabItemCalcSize_Str');
  late final _igTabItemCalcSize_Str = _igTabItemCalcSize_StrPtr.asFunction<
      void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ffi.Char>, bool)>();

  void igTabItemCalcSize_WindowPtr(
    ffi.Pointer<ImVec2> pOut,
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igTabItemCalcSize_WindowPtr(
      pOut,
      window,
    );
  }

  late final _igTabItemCalcSize_WindowPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVec2>,
              ffi.Pointer<ImGuiWindow>)>>('igTabItemCalcSize_WindowPtr');
  late final _igTabItemCalcSize_WindowPtr =
      _igTabItemCalcSize_WindowPtrPtr.asFunction<
          void Function(ffi.Pointer<ImVec2>, ffi.Pointer<ImGuiWindow>)>();

  void igTabItemBackground(
    ffi.Pointer<ImDrawList> draw_list,
    ImRect bb,
    int flags,
    int col,
  ) {
    return _igTabItemBackground(
      draw_list,
      bb,
      flags,
      col,
    );
  }

  late final _igTabItemBackgroundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImRect, ImGuiTabItemFlags,
              ImU32)>>('igTabItemBackground');
  late final _igTabItemBackground = _igTabItemBackgroundPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, ImRect, int, int)>();

  void igTabItemLabelAndCloseButton(
    ffi.Pointer<ImDrawList> draw_list,
    ImRect bb,
    int flags,
    ImVec2 frame_padding,
    ffi.Pointer<ffi.Char> label,
    int tab_id,
    int close_button_id,
    bool is_contents_visible,
    ffi.Pointer<ffi.Bool> out_just_closed,
    ffi.Pointer<ffi.Bool> out_text_clipped,
  ) {
    return _igTabItemLabelAndCloseButton(
      draw_list,
      bb,
      flags,
      frame_padding,
      label,
      tab_id,
      close_button_id,
      is_contents_visible,
      out_just_closed,
      out_text_clipped,
    );
  }

  late final _igTabItemLabelAndCloseButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImRect,
              ImGuiTabItemFlags,
              ImVec2,
              ffi.Pointer<ffi.Char>,
              ImGuiID,
              ImGuiID,
              ffi.Bool,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('igTabItemLabelAndCloseButton');
  late final _igTabItemLabelAndCloseButton =
      _igTabItemLabelAndCloseButtonPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>,
              ImRect,
              int,
              ImVec2,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              bool,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>();

  void igRenderText(
    ImVec2 pos,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    bool hide_text_after_hash,
  ) {
    return _igRenderText(
      pos,
      text,
      text_end,
      hide_text_after_hash,
    );
  }

  late final _igRenderTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImVec2, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Bool)>>('igRenderText');
  late final _igRenderText = _igRenderTextPtr.asFunction<
      void Function(
          ImVec2, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  void igRenderTextWrapped(
    ImVec2 pos,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    double wrap_width,
  ) {
    return _igRenderTextWrapped(
      pos,
      text,
      text_end,
      wrap_width,
    );
  }

  late final _igRenderTextWrappedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImVec2, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Float)>>('igRenderTextWrapped');
  late final _igRenderTextWrapped = _igRenderTextWrappedPtr.asFunction<
      void Function(
          ImVec2, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, double)>();

  void igRenderTextClipped(
    ImVec2 pos_min,
    ImVec2 pos_max,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    ffi.Pointer<ImVec2> text_size_if_known,
    ImVec2 align,
    ffi.Pointer<ImRect> clip_rect,
  ) {
    return _igRenderTextClipped(
      pos_min,
      pos_max,
      text,
      text_end,
      text_size_if_known,
      align,
      clip_rect,
    );
  }

  late final _igRenderTextClippedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImVec2,
              ImVec2,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ImVec2>,
              ImVec2,
              ffi.Pointer<ImRect>)>>('igRenderTextClipped');
  late final _igRenderTextClipped = _igRenderTextClippedPtr.asFunction<
      void Function(
          ImVec2,
          ImVec2,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ImVec2>,
          ImVec2,
          ffi.Pointer<ImRect>)>();

  void igRenderTextClippedEx(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 pos_min,
    ImVec2 pos_max,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    ffi.Pointer<ImVec2> text_size_if_known,
    ImVec2 align,
    ffi.Pointer<ImRect> clip_rect,
  ) {
    return _igRenderTextClippedEx(
      draw_list,
      pos_min,
      pos_max,
      text,
      text_end,
      text_size_if_known,
      align,
      clip_rect,
    );
  }

  late final _igRenderTextClippedExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImVec2,
              ImVec2,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ImVec2>,
              ImVec2,
              ffi.Pointer<ImRect>)>>('igRenderTextClippedEx');
  late final _igRenderTextClippedEx = _igRenderTextClippedExPtr.asFunction<
      void Function(
          ffi.Pointer<ImDrawList>,
          ImVec2,
          ImVec2,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ImVec2>,
          ImVec2,
          ffi.Pointer<ImRect>)>();

  void igRenderTextEllipsis(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 pos_min,
    ImVec2 pos_max,
    double clip_max_x,
    double ellipsis_max_x,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    ffi.Pointer<ImVec2> text_size_if_known,
  ) {
    return _igRenderTextEllipsis(
      draw_list,
      pos_min,
      pos_max,
      clip_max_x,
      ellipsis_max_x,
      text,
      text_end,
      text_size_if_known,
    );
  }

  late final _igRenderTextEllipsisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImVec2,
              ImVec2,
              ffi.Float,
              ffi.Float,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ImVec2>)>>('igRenderTextEllipsis');
  late final _igRenderTextEllipsis = _igRenderTextEllipsisPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, double, double,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ImVec2>)>();

  void igRenderFrame(
    ImVec2 p_min,
    ImVec2 p_max,
    int fill_col,
    bool borders,
    double rounding,
  ) {
    return _igRenderFrame(
      p_min,
      p_max,
      fill_col,
      borders,
      rounding,
    );
  }

  late final _igRenderFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImVec2, ImVec2, ImU32, ffi.Bool, ffi.Float)>>('igRenderFrame');
  late final _igRenderFrame = _igRenderFramePtr
      .asFunction<void Function(ImVec2, ImVec2, int, bool, double)>();

  void igRenderFrameBorder(
    ImVec2 p_min,
    ImVec2 p_max,
    double rounding,
  ) {
    return _igRenderFrameBorder(
      p_min,
      p_max,
      rounding,
    );
  }

  late final _igRenderFrameBorderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImVec2, ImVec2, ffi.Float)>>(
          'igRenderFrameBorder');
  late final _igRenderFrameBorder = _igRenderFrameBorderPtr
      .asFunction<void Function(ImVec2, ImVec2, double)>();

  void igRenderColorRectWithAlphaCheckerboard(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 p_min,
    ImVec2 p_max,
    int fill_col,
    double grid_step,
    ImVec2 grid_off,
    double rounding,
    int flags,
  ) {
    return _igRenderColorRectWithAlphaCheckerboard(
      draw_list,
      p_min,
      p_max,
      fill_col,
      grid_step,
      grid_off,
      rounding,
      flags,
    );
  }

  late final _igRenderColorRectWithAlphaCheckerboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ImVec2,
              ImVec2,
              ImU32,
              ffi.Float,
              ImVec2,
              ffi.Float,
              ImDrawFlags)>>('igRenderColorRectWithAlphaCheckerboard');
  late final _igRenderColorRectWithAlphaCheckerboard =
      _igRenderColorRectWithAlphaCheckerboardPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, double,
              ImVec2, double, int)>();

  void igRenderNavCursor(
    ImRect bb,
    int id,
    int flags,
  ) {
    return _igRenderNavCursor(
      bb,
      id,
      flags,
    );
  }

  late final _igRenderNavCursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImRect, ImGuiID,
              ImGuiNavRenderCursorFlags)>>('igRenderNavCursor');
  late final _igRenderNavCursor =
      _igRenderNavCursorPtr.asFunction<void Function(ImRect, int, int)>();

  ffi.Pointer<ffi.Char> igFindRenderedTextEnd(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
  ) {
    return _igFindRenderedTextEnd(
      text,
      text_end,
    );
  }

  late final _igFindRenderedTextEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igFindRenderedTextEnd');
  late final _igFindRenderedTextEnd = _igFindRenderedTextEndPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igRenderMouseCursor(
    ImVec2 pos,
    double scale,
    int mouse_cursor,
    int col_fill,
    int col_border,
    int col_shadow,
  ) {
    return _igRenderMouseCursor(
      pos,
      scale,
      mouse_cursor,
      col_fill,
      col_border,
      col_shadow,
    );
  }

  late final _igRenderMouseCursorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImVec2, ffi.Float, ImGuiMouseCursor, ImU32, ImU32,
              ImU32)>>('igRenderMouseCursor');
  late final _igRenderMouseCursor = _igRenderMouseCursorPtr
      .asFunction<void Function(ImVec2, double, int, int, int, int)>();

  void igRenderArrow(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 pos,
    DartImU32 col,
    ImGuiDir dir,
    double scale,
  ) {
    return _igRenderArrow(
      draw_list,
      pos,
      col,
      dir.value,
      scale,
    );
  }

  late final _igRenderArrowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImU32, ffi.Int,
              ffi.Float)>>('igRenderArrow');
  late final _igRenderArrow = _igRenderArrowPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, int, int, double)>();

  void igRenderBullet(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 pos,
    int col,
  ) {
    return _igRenderBullet(
      draw_list,
      pos,
      col,
    );
  }

  late final _igRenderBulletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>, ImVec2, ImU32)>>('igRenderBullet');
  late final _igRenderBullet = _igRenderBulletPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>, ImVec2, int)>();

  void igRenderCheckMark(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 pos,
    int col,
    double sz,
  ) {
    return _igRenderCheckMark(
      draw_list,
      pos,
      col,
      sz,
    );
  }

  late final _igRenderCheckMarkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImU32,
              ffi.Float)>>('igRenderCheckMark');
  late final _igRenderCheckMark = _igRenderCheckMarkPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, int, double)>();

  void igRenderArrowPointingAt(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 pos,
    ImVec2 half_sz,
    ImGuiDir direction,
    DartImU32 col,
  ) {
    return _igRenderArrowPointingAt(
      draw_list,
      pos,
      half_sz,
      direction.value,
      col,
    );
  }

  late final _igRenderArrowPointingAtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, ffi.Int,
              ImU32)>>('igRenderArrowPointingAt');
  late final _igRenderArrowPointingAt = _igRenderArrowPointingAtPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, ImVec2, int, int)>();

  void igRenderArrowDockMenu(
    ffi.Pointer<ImDrawList> draw_list,
    ImVec2 p_min,
    double sz,
    int col,
  ) {
    return _igRenderArrowDockMenu(
      draw_list,
      p_min,
      sz,
      col,
    );
  }

  late final _igRenderArrowDockMenuPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImVec2, ffi.Float,
              ImU32)>>('igRenderArrowDockMenu');
  late final _igRenderArrowDockMenu = _igRenderArrowDockMenuPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, ImVec2, double, int)>();

  void igRenderRectFilledRangeH(
    ffi.Pointer<ImDrawList> draw_list,
    ImRect rect,
    int col,
    double x_start_norm,
    double x_end_norm,
    double rounding,
  ) {
    return _igRenderRectFilledRangeH(
      draw_list,
      rect,
      col,
      x_start_norm,
      x_end_norm,
      rounding,
    );
  }

  late final _igRenderRectFilledRangeHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImRect, ImU32, ffi.Float,
              ffi.Float, ffi.Float)>>('igRenderRectFilledRangeH');
  late final _igRenderRectFilledRangeH =
      _igRenderRectFilledRangeHPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImRect, int, double, double, double)>();

  void igRenderRectFilledWithHole(
    ffi.Pointer<ImDrawList> draw_list,
    ImRect outer,
    ImRect inner,
    int col,
    double rounding,
  ) {
    return _igRenderRectFilledWithHole(
      draw_list,
      outer,
      inner,
      col,
      rounding,
    );
  }

  late final _igRenderRectFilledWithHolePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ImRect, ImRect, ImU32,
              ffi.Float)>>('igRenderRectFilledWithHole');
  late final _igRenderRectFilledWithHole =
      _igRenderRectFilledWithHolePtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ImRect, ImRect, int, double)>();

  int igCalcRoundingFlagsForRectInRect(
    ImRect r_in,
    ImRect r_outer,
    double threshold,
  ) {
    return _igCalcRoundingFlagsForRectInRect(
      r_in,
      r_outer,
      threshold,
    );
  }

  late final _igCalcRoundingFlagsForRectInRectPtr = _lookup<
          ffi.NativeFunction<ImDrawFlags Function(ImRect, ImRect, ffi.Float)>>(
      'igCalcRoundingFlagsForRectInRect');
  late final _igCalcRoundingFlagsForRectInRect =
      _igCalcRoundingFlagsForRectInRectPtr
          .asFunction<int Function(ImRect, ImRect, double)>();

  void igTextEx(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> text_end,
    int flags,
  ) {
    return _igTextEx(
      text,
      text_end,
      flags,
    );
  }

  late final _igTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ImGuiTextFlags)>>('igTextEx');
  late final _igTextEx = _igTextExPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  bool igButtonEx(
    ffi.Pointer<ffi.Char> label,
    ImVec2 size_arg,
    int flags,
  ) {
    return _igButtonEx(
      label,
      size_arg,
      flags,
    );
  }

  late final _igButtonExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ImVec2, ImGuiButtonFlags)>>('igButtonEx');
  late final _igButtonEx = _igButtonExPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, ImVec2, int)>();

  bool igArrowButtonEx(
    ffi.Pointer<ffi.Char> str_id,
    ImGuiDir dir,
    ImVec2 size_arg,
    DartImGuiButtonFlags flags,
  ) {
    return _igArrowButtonEx(
      str_id,
      dir.value,
      size_arg,
      flags,
    );
  }

  late final _igArrowButtonExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Int, ImVec2,
              ImGuiButtonFlags)>>('igArrowButtonEx');
  late final _igArrowButtonEx = _igArrowButtonExPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int, ImVec2, int)>();

  bool igImageButtonEx(
    int id,
    int user_texture_id,
    ImVec2 image_size,
    ImVec2 uv0,
    ImVec2 uv1,
    ImVec4 bg_col,
    ImVec4 tint_col,
    int flags,
  ) {
    return _igImageButtonEx(
      id,
      user_texture_id,
      image_size,
      uv0,
      uv1,
      bg_col,
      tint_col,
      flags,
    );
  }

  late final _igImageButtonExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiID, ImTextureID, ImVec2, ImVec2, ImVec2,
              ImVec4, ImVec4, ImGuiButtonFlags)>>('igImageButtonEx');
  late final _igImageButtonEx = _igImageButtonExPtr.asFunction<
      bool Function(int, int, ImVec2, ImVec2, ImVec2, ImVec4, ImVec4, int)>();

  void igSeparatorEx(
    int flags,
    double thickness,
  ) {
    return _igSeparatorEx(
      flags,
      thickness,
    );
  }

  late final _igSeparatorExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiSeparatorFlags, ffi.Float)>>('igSeparatorEx');
  late final _igSeparatorEx =
      _igSeparatorExPtr.asFunction<void Function(int, double)>();

  void igSeparatorTextEx(
    int id,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> label_end,
    double extra_width,
  ) {
    return _igSeparatorTextEx(
      id,
      label,
      label_end,
      extra_width,
    );
  }

  late final _igSeparatorTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiID, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Float)>>('igSeparatorTextEx');
  late final _igSeparatorTextEx = _igSeparatorTextExPtr.asFunction<
      void Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, double)>();

  bool igCheckboxFlags_S64Ptr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ImS64> flags,
    int flags_value,
  ) {
    return _igCheckboxFlags_S64Ptr(
      label,
      flags,
      flags_value,
    );
  }

  late final _igCheckboxFlags_S64PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ImS64>,
              ImS64)>>('igCheckboxFlags_S64Ptr');
  late final _igCheckboxFlags_S64Ptr = _igCheckboxFlags_S64PtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ImS64>, int)>();

  bool igCheckboxFlags_U64Ptr(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ImU64> flags,
    int flags_value,
  ) {
    return _igCheckboxFlags_U64Ptr(
      label,
      flags,
      flags_value,
    );
  }

  late final _igCheckboxFlags_U64PtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ImU64>,
              ImU64)>>('igCheckboxFlags_U64Ptr');
  late final _igCheckboxFlags_U64Ptr = _igCheckboxFlags_U64PtrPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ImU64>, int)>();

  bool igCloseButton(
    int id,
    ImVec2 pos,
  ) {
    return _igCloseButton(
      id,
      pos,
    );
  }

  late final _igCloseButtonPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiID, ImVec2)>>(
          'igCloseButton');
  late final _igCloseButton =
      _igCloseButtonPtr.asFunction<bool Function(int, ImVec2)>();

  bool igCollapseButton(
    int id,
    ImVec2 pos,
    ffi.Pointer<ImGuiDockNode> dock_node,
  ) {
    return _igCollapseButton(
      id,
      pos,
      dock_node,
    );
  }

  late final _igCollapseButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiID, ImVec2,
              ffi.Pointer<ImGuiDockNode>)>>('igCollapseButton');
  late final _igCollapseButton = _igCollapseButtonPtr
      .asFunction<bool Function(int, ImVec2, ffi.Pointer<ImGuiDockNode>)>();

  void igScrollbar(
    ImGuiAxis axis,
  ) {
    return _igScrollbar(
      axis.value,
    );
  }

  late final _igScrollbarPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('igScrollbar');
  late final _igScrollbar = _igScrollbarPtr.asFunction<void Function(int)>();

  bool igScrollbarEx(
    ImRect bb,
    DartImGuiID id,
    ImGuiAxis axis,
    ffi.Pointer<ImS64> p_scroll_v,
    DartImS64 avail_v,
    DartImS64 contents_v,
    DartImDrawFlags draw_rounding_flags,
  ) {
    return _igScrollbarEx(
      bb,
      id,
      axis.value,
      p_scroll_v,
      avail_v,
      contents_v,
      draw_rounding_flags,
    );
  }

  late final _igScrollbarExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImRect, ImGuiID, ffi.Int, ffi.Pointer<ImS64>, ImS64,
              ImS64, ImDrawFlags)>>('igScrollbarEx');
  late final _igScrollbarEx = _igScrollbarExPtr.asFunction<
      bool Function(ImRect, int, int, ffi.Pointer<ImS64>, int, int, int)>();

  void igGetWindowScrollbarRect(
    ffi.Pointer<ImRect> pOut,
    ffi.Pointer<ImGuiWindow> window,
    ImGuiAxis axis,
  ) {
    return _igGetWindowScrollbarRect(
      pOut,
      window,
      axis.value,
    );
  }

  late final _igGetWindowScrollbarRectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>,
              ffi.Int)>>('igGetWindowScrollbarRect');
  late final _igGetWindowScrollbarRect =
      _igGetWindowScrollbarRectPtr.asFunction<
          void Function(ffi.Pointer<ImRect>, ffi.Pointer<ImGuiWindow>, int)>();

  DartImGuiID igGetWindowScrollbarID(
    ffi.Pointer<ImGuiWindow> window,
    ImGuiAxis axis,
  ) {
    return _igGetWindowScrollbarID(
      window,
      axis.value,
    );
  }

  late final _igGetWindowScrollbarIDPtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiWindow>, ffi.Int)>>(
      'igGetWindowScrollbarID');
  late final _igGetWindowScrollbarID = _igGetWindowScrollbarIDPtr
      .asFunction<int Function(ffi.Pointer<ImGuiWindow>, int)>();

  int igGetWindowResizeCornerID(
    ffi.Pointer<ImGuiWindow> window,
    int n,
  ) {
    return _igGetWindowResizeCornerID(
      window,
      n,
    );
  }

  late final _igGetWindowResizeCornerIDPtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiWindow>, ffi.Int)>>(
      'igGetWindowResizeCornerID');
  late final _igGetWindowResizeCornerID = _igGetWindowResizeCornerIDPtr
      .asFunction<int Function(ffi.Pointer<ImGuiWindow>, int)>();

  DartImGuiID igGetWindowResizeBorderID(
    ffi.Pointer<ImGuiWindow> window,
    ImGuiDir dir,
  ) {
    return _igGetWindowResizeBorderID(
      window,
      dir.value,
    );
  }

  late final _igGetWindowResizeBorderIDPtr = _lookup<
          ffi
          .NativeFunction<ImGuiID Function(ffi.Pointer<ImGuiWindow>, ffi.Int)>>(
      'igGetWindowResizeBorderID');
  late final _igGetWindowResizeBorderID = _igGetWindowResizeBorderIDPtr
      .asFunction<int Function(ffi.Pointer<ImGuiWindow>, int)>();

  bool igButtonBehavior(
    ImRect bb,
    int id,
    ffi.Pointer<ffi.Bool> out_hovered,
    ffi.Pointer<ffi.Bool> out_held,
    int flags,
  ) {
    return _igButtonBehavior(
      bb,
      id,
      out_hovered,
      out_held,
      flags,
    );
  }

  late final _igButtonBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImRect, ImGuiID, ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>, ImGuiButtonFlags)>>('igButtonBehavior');
  late final _igButtonBehavior = _igButtonBehaviorPtr.asFunction<
      bool Function(
          ImRect, int, ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>, int)>();

  bool igDragBehavior(
    int id,
    int data_type,
    ffi.Pointer<ffi.Void> p_v,
    double v_speed,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
  ) {
    return _igDragBehavior(
      id,
      data_type,
      p_v,
      v_speed,
      p_min,
      p_max,
      format,
      flags,
    );
  }

  late final _igDragBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImGuiID,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Float,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags)>>('igDragBehavior');
  late final _igDragBehavior = _igDragBehaviorPtr.asFunction<
      bool Function(
          int,
          int,
          ffi.Pointer<ffi.Void>,
          double,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int)>();

  bool igSliderBehavior(
    ImRect bb,
    int id,
    int data_type,
    ffi.Pointer<ffi.Void> p_v,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
    ffi.Pointer<ffi.Char> format,
    int flags,
    ffi.Pointer<ImRect> out_grab_bb,
  ) {
    return _igSliderBehavior(
      bb,
      id,
      data_type,
      p_v,
      p_min,
      p_max,
      format,
      flags,
      out_grab_bb,
    );
  }

  late final _igSliderBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImRect,
              ImGuiID,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ImGuiSliderFlags,
              ffi.Pointer<ImRect>)>>('igSliderBehavior');
  late final _igSliderBehavior = _igSliderBehaviorPtr.asFunction<
      bool Function(
          ImRect,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ImRect>)>();

  bool igSplitterBehavior(
    ImRect bb,
    DartImGuiID id,
    ImGuiAxis axis,
    ffi.Pointer<ffi.Float> size1,
    ffi.Pointer<ffi.Float> size2,
    double min_size1,
    double min_size2,
    double hover_extend,
    double hover_visibility_delay,
    DartImU32 bg_col,
  ) {
    return _igSplitterBehavior(
      bb,
      id,
      axis.value,
      size1,
      size2,
      min_size1,
      min_size2,
      hover_extend,
      hover_visibility_delay,
      bg_col,
    );
  }

  late final _igSplitterBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImRect,
              ImGuiID,
              ffi.Int,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ffi.Float,
              ImU32)>>('igSplitterBehavior');
  late final _igSplitterBehavior = _igSplitterBehaviorPtr.asFunction<
      bool Function(ImRect, int, int, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>, double, double, double, double, int)>();

  bool igTreeNodeBehavior(
    int id,
    int flags,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> label_end,
  ) {
    return _igTreeNodeBehavior(
      id,
      flags,
      label,
      label_end,
    );
  }

  late final _igTreeNodeBehaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ImGuiID, ImGuiTreeNodeFlags, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igTreeNodeBehavior');
  late final _igTreeNodeBehavior = _igTreeNodeBehaviorPtr.asFunction<
      bool Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igTreePushOverrideID(
    int id,
  ) {
    return _igTreePushOverrideID(
      id,
    );
  }

  late final _igTreePushOverrideIDPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igTreePushOverrideID');
  late final _igTreePushOverrideID =
      _igTreePushOverrideIDPtr.asFunction<void Function(int)>();

  bool igTreeNodeGetOpen(
    int storage_id,
  ) {
    return _igTreeNodeGetOpen(
      storage_id,
    );
  }

  late final _igTreeNodeGetOpenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiID)>>(
          'igTreeNodeGetOpen');
  late final _igTreeNodeGetOpen =
      _igTreeNodeGetOpenPtr.asFunction<bool Function(int)>();

  void igTreeNodeSetOpen(
    int storage_id,
    bool open,
  ) {
    return _igTreeNodeSetOpen(
      storage_id,
      open,
    );
  }

  late final _igTreeNodeSetOpenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID, ffi.Bool)>>(
          'igTreeNodeSetOpen');
  late final _igTreeNodeSetOpen =
      _igTreeNodeSetOpenPtr.asFunction<void Function(int, bool)>();

  bool igTreeNodeUpdateNextOpen(
    int storage_id,
    int flags,
  ) {
    return _igTreeNodeUpdateNextOpen(
      storage_id,
      flags,
    );
  }

  late final _igTreeNodeUpdateNextOpenPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ImGuiID, ImGuiTreeNodeFlags)>>(
      'igTreeNodeUpdateNextOpen');
  late final _igTreeNodeUpdateNextOpen =
      _igTreeNodeUpdateNextOpenPtr.asFunction<bool Function(int, int)>();

  ffi.Pointer<ImGuiDataTypeInfo> igDataTypeGetInfo(
    int data_type,
  ) {
    return _igDataTypeGetInfo(
      data_type,
    );
  }

  late final _igDataTypeGetInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImGuiDataTypeInfo> Function(
              ImGuiDataType)>>('igDataTypeGetInfo');
  late final _igDataTypeGetInfo = _igDataTypeGetInfoPtr
      .asFunction<ffi.Pointer<ImGuiDataTypeInfo> Function(int)>();

  int igDataTypeFormatString(
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _igDataTypeFormatString(
      buf,
      buf_size,
      data_type,
      p_data,
      format,
    );
  }

  late final _igDataTypeFormatStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('igDataTypeFormatString');
  late final _igDataTypeFormatString = _igDataTypeFormatStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>)>();

  void igDataTypeApplyOp(
    int data_type,
    int op,
    ffi.Pointer<ffi.Void> output,
    ffi.Pointer<ffi.Void> arg_1,
    ffi.Pointer<ffi.Void> arg_2,
  ) {
    return _igDataTypeApplyOp(
      data_type,
      op,
      output,
      arg_1,
      arg_2,
    );
  }

  late final _igDataTypeApplyOpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiDataType,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('igDataTypeApplyOp');
  late final _igDataTypeApplyOp = _igDataTypeApplyOpPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  bool igDataTypeApplyFromText(
    ffi.Pointer<ffi.Char> buf,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<ffi.Void> p_data_when_empty,
  ) {
    return _igDataTypeApplyFromText(
      buf,
      data_type,
      p_data,
      format,
      p_data_when_empty,
    );
  }

  late final _igDataTypeApplyFromTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('igDataTypeApplyFromText');
  late final _igDataTypeApplyFromText = _igDataTypeApplyFromTextPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int igDataTypeCompare(
    int data_type,
    ffi.Pointer<ffi.Void> arg_1,
    ffi.Pointer<ffi.Void> arg_2,
  ) {
    return _igDataTypeCompare(
      data_type,
      arg_1,
      arg_2,
    );
  }

  late final _igDataTypeComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ImGuiDataType, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('igDataTypeCompare');
  late final _igDataTypeCompare = _igDataTypeComparePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  bool igDataTypeClamp(
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Void> p_min,
    ffi.Pointer<ffi.Void> p_max,
  ) {
    return _igDataTypeClamp(
      data_type,
      p_data,
      p_min,
      p_max,
    );
  }

  late final _igDataTypeClampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('igDataTypeClamp');
  late final _igDataTypeClamp = _igDataTypeClampPtr.asFunction<
      bool Function(int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  bool igDataTypeIsZero(
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
  ) {
    return _igDataTypeIsZero(
      data_type,
      p_data,
    );
  }

  late final _igDataTypeIsZeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImGuiDataType, ffi.Pointer<ffi.Void>)>>('igDataTypeIsZero');
  late final _igDataTypeIsZero = _igDataTypeIsZeroPtr
      .asFunction<bool Function(int, ffi.Pointer<ffi.Void>)>();

  bool igInputTextEx(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> hint,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    ImVec2 size_arg,
    int flags,
    ImGuiInputTextCallback callback,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _igInputTextEx(
      label,
      hint,
      buf,
      buf_size,
      size_arg,
      flags,
      callback,
      user_data,
    );
  }

  late final _igInputTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ImVec2,
              ImGuiInputTextFlags,
              ImGuiInputTextCallback,
              ffi.Pointer<ffi.Void>)>>('igInputTextEx');
  late final _igInputTextEx = _igInputTextExPtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ImVec2,
          int,
          ImGuiInputTextCallback,
          ffi.Pointer<ffi.Void>)>();

  void igInputTextDeactivateHook(
    int id,
  ) {
    return _igInputTextDeactivateHook(
      id,
    );
  }

  late final _igInputTextDeactivateHookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igInputTextDeactivateHook');
  late final _igInputTextDeactivateHook =
      _igInputTextDeactivateHookPtr.asFunction<void Function(int)>();

  bool igTempInputText(
    ImRect bb,
    int id,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> buf,
    int buf_size,
    int flags,
  ) {
    return _igTempInputText(
      bb,
      id,
      label,
      buf,
      buf_size,
      flags,
    );
  }

  late final _igTempInputTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImRect,
              ImGuiID,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ImGuiInputTextFlags)>>('igTempInputText');
  late final _igTempInputText = _igTempInputTextPtr.asFunction<
      bool Function(ImRect, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          int, int)>();

  bool igTempInputScalar(
    ImRect bb,
    int id,
    ffi.Pointer<ffi.Char> label,
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<ffi.Void> p_clamp_min,
    ffi.Pointer<ffi.Void> p_clamp_max,
  ) {
    return _igTempInputScalar(
      bb,
      id,
      label,
      data_type,
      p_data,
      format,
      p_clamp_min,
      p_clamp_max,
    );
  }

  late final _igTempInputScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ImRect,
              ImGuiID,
              ffi.Pointer<ffi.Char>,
              ImGuiDataType,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('igTempInputScalar');
  late final _igTempInputScalar = _igTempInputScalarPtr.asFunction<
      bool Function(
          ImRect,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  bool igTempInputIsActive(
    int id,
  ) {
    return _igTempInputIsActive(
      id,
    );
  }

  late final _igTempInputIsActivePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ImGuiID)>>(
          'igTempInputIsActive');
  late final _igTempInputIsActive =
      _igTempInputIsActivePtr.asFunction<bool Function(int)>();

  ffi.Pointer<ImGuiInputTextState> igGetInputTextState(
    int id,
  ) {
    return _igGetInputTextState(
      id,
    );
  }

  late final _igGetInputTextStatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ImGuiInputTextState> Function(ImGuiID)>>(
      'igGetInputTextState');
  late final _igGetInputTextState = _igGetInputTextStatePtr
      .asFunction<ffi.Pointer<ImGuiInputTextState> Function(int)>();

  void igSetNextItemRefVal(
    int data_type,
    ffi.Pointer<ffi.Void> p_data,
  ) {
    return _igSetNextItemRefVal(
      data_type,
      p_data,
    );
  }

  late final _igSetNextItemRefValPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ImGuiDataType, ffi.Pointer<ffi.Void>)>>('igSetNextItemRefVal');
  late final _igSetNextItemRefVal = _igSetNextItemRefValPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();

  void igColorTooltip(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Float> col,
    int flags,
  ) {
    return _igColorTooltip(
      text,
      col,
      flags,
    );
  }

  late final _igColorTooltipPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags)>>('igColorTooltip');
  late final _igColorTooltip = _igColorTooltipPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Float>, int)>();

  void igColorEditOptionsPopup(
    ffi.Pointer<ffi.Float> col,
    int flags,
  ) {
    return _igColorEditOptionsPopup(
      col,
      flags,
    );
  }

  late final _igColorEditOptionsPopupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags)>>('igColorEditOptionsPopup');
  late final _igColorEditOptionsPopup = _igColorEditOptionsPopupPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int)>();

  void igColorPickerOptionsPopup(
    ffi.Pointer<ffi.Float> ref_col,
    int flags,
  ) {
    return _igColorPickerOptionsPopup(
      ref_col,
      flags,
    );
  }

  late final _igColorPickerOptionsPopupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>,
              ImGuiColorEditFlags)>>('igColorPickerOptionsPopup');
  late final _igColorPickerOptionsPopup = _igColorPickerOptionsPopupPtr
      .asFunction<void Function(ffi.Pointer<ffi.Float>, int)>();

  int igPlotEx(
    ImGuiPlotType plot_type,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Float Function(ffi.Pointer<ffi.Void> data, ffi.Int idx)>>
        values_getter,
    ffi.Pointer<ffi.Void> data,
    int values_count,
    int values_offset,
    ffi.Pointer<ffi.Char> overlay_text,
    double scale_min,
    double scale_max,
    ImVec2 size_arg,
  ) {
    return _igPlotEx(
      plot_type.value,
      label,
      values_getter,
      data,
      values_count,
      values_offset,
      overlay_text,
      scale_min,
      scale_max,
      size_arg,
    );
  }

  late final _igPlotExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Float Function(
                          ffi.Pointer<ffi.Void> data, ffi.Int idx)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Float,
              ffi.Float,
              ImVec2)>>('igPlotEx');
  late final _igPlotEx = _igPlotExPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Float Function(ffi.Pointer<ffi.Void> data, ffi.Int idx)>>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          double,
          double,
          ImVec2)>();

  void igShadeVertsLinearColorGradientKeepAlpha(
    ffi.Pointer<ImDrawList> draw_list,
    int vert_start_idx,
    int vert_end_idx,
    ImVec2 gradient_p0,
    ImVec2 gradient_p1,
    int col0,
    int col1,
  ) {
    return _igShadeVertsLinearColorGradientKeepAlpha(
      draw_list,
      vert_start_idx,
      vert_end_idx,
      gradient_p0,
      gradient_p1,
      col0,
      col1,
    );
  }

  late final _igShadeVertsLinearColorGradientKeepAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ffi.Int,
              ffi.Int,
              ImVec2,
              ImVec2,
              ImU32,
              ImU32)>>('igShadeVertsLinearColorGradientKeepAlpha');
  late final _igShadeVertsLinearColorGradientKeepAlpha =
      _igShadeVertsLinearColorGradientKeepAlphaPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, int, int, ImVec2, ImVec2, int, int)>();

  void igShadeVertsLinearUV(
    ffi.Pointer<ImDrawList> draw_list,
    int vert_start_idx,
    int vert_end_idx,
    ImVec2 a,
    ImVec2 b,
    ImVec2 uv_a,
    ImVec2 uv_b,
    bool clamp,
  ) {
    return _igShadeVertsLinearUV(
      draw_list,
      vert_start_idx,
      vert_end_idx,
      a,
      b,
      uv_a,
      uv_b,
      clamp,
    );
  }

  late final _igShadeVertsLinearUVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Int, ffi.Int, ImVec2,
              ImVec2, ImVec2, ImVec2, ffi.Bool)>>('igShadeVertsLinearUV');
  late final _igShadeVertsLinearUV = _igShadeVertsLinearUVPtr.asFunction<
      void Function(ffi.Pointer<ImDrawList>, int, int, ImVec2, ImVec2, ImVec2,
          ImVec2, bool)>();

  void igShadeVertsTransformPos(
    ffi.Pointer<ImDrawList> draw_list,
    int vert_start_idx,
    int vert_end_idx,
    ImVec2 pivot_in,
    double cos_a,
    double sin_a,
    ImVec2 pivot_out,
  ) {
    return _igShadeVertsTransformPos(
      draw_list,
      vert_start_idx,
      vert_end_idx,
      pivot_in,
      cos_a,
      sin_a,
      pivot_out,
    );
  }

  late final _igShadeVertsTransformPosPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImDrawList>, ffi.Int, ffi.Int, ImVec2,
              ffi.Float, ffi.Float, ImVec2)>>('igShadeVertsTransformPos');
  late final _igShadeVertsTransformPos =
      _igShadeVertsTransformPosPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, int, int, ImVec2, double,
              double, ImVec2)>();

  void igGcCompactTransientMiscBuffers() {
    return _igGcCompactTransientMiscBuffers();
  }

  late final _igGcCompactTransientMiscBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igGcCompactTransientMiscBuffers');
  late final _igGcCompactTransientMiscBuffers =
      _igGcCompactTransientMiscBuffersPtr.asFunction<void Function()>();

  void igGcCompactTransientWindowBuffers(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igGcCompactTransientWindowBuffers(
      window,
    );
  }

  late final _igGcCompactTransientWindowBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igGcCompactTransientWindowBuffers');
  late final _igGcCompactTransientWindowBuffers =
      _igGcCompactTransientWindowBuffersPtr
          .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  void igGcAwakeTransientWindowBuffers(
    ffi.Pointer<ImGuiWindow> window,
  ) {
    return _igGcAwakeTransientWindowBuffers(
      window,
    );
  }

  late final _igGcAwakeTransientWindowBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindow>)>>(
          'igGcAwakeTransientWindowBuffers');
  late final _igGcAwakeTransientWindowBuffers =
      _igGcAwakeTransientWindowBuffersPtr
          .asFunction<void Function(ffi.Pointer<ImGuiWindow>)>();

  bool igErrorLog(
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _igErrorLog(
      msg,
    );
  }

  late final _igErrorLogPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'igErrorLog');
  late final _igErrorLog =
      _igErrorLogPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  void igErrorRecoveryStoreState(
    ffi.Pointer<ImGuiErrorRecoveryState> state_out,
  ) {
    return _igErrorRecoveryStoreState(
      state_out,
    );
  }

  late final _igErrorRecoveryStoreStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>>(
      'igErrorRecoveryStoreState');
  late final _igErrorRecoveryStoreState = _igErrorRecoveryStoreStatePtr
      .asFunction<void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>();

  void igErrorRecoveryTryToRecoverState(
    ffi.Pointer<ImGuiErrorRecoveryState> state_in,
  ) {
    return _igErrorRecoveryTryToRecoverState(
      state_in,
    );
  }

  late final _igErrorRecoveryTryToRecoverStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>>(
      'igErrorRecoveryTryToRecoverState');
  late final _igErrorRecoveryTryToRecoverState =
      _igErrorRecoveryTryToRecoverStatePtr
          .asFunction<void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>();

  void igErrorRecoveryTryToRecoverWindowState(
    ffi.Pointer<ImGuiErrorRecoveryState> state_in,
  ) {
    return _igErrorRecoveryTryToRecoverWindowState(
      state_in,
    );
  }

  late final _igErrorRecoveryTryToRecoverWindowStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>>(
      'igErrorRecoveryTryToRecoverWindowState');
  late final _igErrorRecoveryTryToRecoverWindowState =
      _igErrorRecoveryTryToRecoverWindowStatePtr
          .asFunction<void Function(ffi.Pointer<ImGuiErrorRecoveryState>)>();

  void igErrorCheckUsingSetCursorPosToExtendParentBoundaries() {
    return _igErrorCheckUsingSetCursorPosToExtendParentBoundaries();
  }

  late final _igErrorCheckUsingSetCursorPosToExtendParentBoundariesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igErrorCheckUsingSetCursorPosToExtendParentBoundaries');
  late final _igErrorCheckUsingSetCursorPosToExtendParentBoundaries =
      _igErrorCheckUsingSetCursorPosToExtendParentBoundariesPtr
          .asFunction<void Function()>();

  void igErrorCheckEndFrameFinalizeErrorTooltip() {
    return _igErrorCheckEndFrameFinalizeErrorTooltip();
  }

  late final _igErrorCheckEndFrameFinalizeErrorTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igErrorCheckEndFrameFinalizeErrorTooltip');
  late final _igErrorCheckEndFrameFinalizeErrorTooltip =
      _igErrorCheckEndFrameFinalizeErrorTooltipPtr
          .asFunction<void Function()>();

  bool igBeginErrorTooltip() {
    return _igBeginErrorTooltip();
  }

  late final _igBeginErrorTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('igBeginErrorTooltip');
  late final _igBeginErrorTooltip =
      _igBeginErrorTooltipPtr.asFunction<bool Function()>();

  void igEndErrorTooltip() {
    return _igEndErrorTooltip();
  }

  late final _igEndErrorTooltipPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igEndErrorTooltip');
  late final _igEndErrorTooltip =
      _igEndErrorTooltipPtr.asFunction<void Function()>();

  void igDebugAllocHook(
    ffi.Pointer<ImGuiDebugAllocInfo> info,
    int frame_count,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _igDebugAllocHook(
      info,
      frame_count,
      ptr,
      size,
    );
  }

  late final _igDebugAllocHookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiDebugAllocInfo>, ffi.Int,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('igDebugAllocHook');
  late final _igDebugAllocHook = _igDebugAllocHookPtr.asFunction<
      void Function(
          ffi.Pointer<ImGuiDebugAllocInfo>, int, ffi.Pointer<ffi.Void>, int)>();

  void igDebugDrawCursorPos(
    int col,
  ) {
    return _igDebugDrawCursorPos(
      col,
    );
  }

  late final _igDebugDrawCursorPosPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImU32)>>(
          'igDebugDrawCursorPos');
  late final _igDebugDrawCursorPos =
      _igDebugDrawCursorPosPtr.asFunction<void Function(int)>();

  void igDebugDrawLineExtents(
    int col,
  ) {
    return _igDebugDrawLineExtents(
      col,
    );
  }

  late final _igDebugDrawLineExtentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImU32)>>(
          'igDebugDrawLineExtents');
  late final _igDebugDrawLineExtents =
      _igDebugDrawLineExtentsPtr.asFunction<void Function(int)>();

  void igDebugDrawItemRect(
    int col,
  ) {
    return _igDebugDrawItemRect(
      col,
    );
  }

  late final _igDebugDrawItemRectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImU32)>>(
          'igDebugDrawItemRect');
  late final _igDebugDrawItemRect =
      _igDebugDrawItemRectPtr.asFunction<void Function(int)>();

  void igDebugTextUnformattedWithLocateItem(
    ffi.Pointer<ffi.Char> line_begin,
    ffi.Pointer<ffi.Char> line_end,
  ) {
    return _igDebugTextUnformattedWithLocateItem(
      line_begin,
      line_end,
    );
  }

  late final _igDebugTextUnformattedWithLocateItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igDebugTextUnformattedWithLocateItem');
  late final _igDebugTextUnformattedWithLocateItem =
      _igDebugTextUnformattedWithLocateItemPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igDebugLocateItem(
    int target_id,
  ) {
    return _igDebugLocateItem(
      target_id,
    );
  }

  late final _igDebugLocateItemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igDebugLocateItem');
  late final _igDebugLocateItem =
      _igDebugLocateItemPtr.asFunction<void Function(int)>();

  void igDebugLocateItemOnHover(
    int target_id,
  ) {
    return _igDebugLocateItemOnHover(
      target_id,
    );
  }

  late final _igDebugLocateItemOnHoverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ImGuiID)>>(
          'igDebugLocateItemOnHover');
  late final _igDebugLocateItemOnHover =
      _igDebugLocateItemOnHoverPtr.asFunction<void Function(int)>();

  void igDebugLocateItemResolveWithLastItem() {
    return _igDebugLocateItemResolveWithLastItem();
  }

  late final _igDebugLocateItemResolveWithLastItemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'igDebugLocateItemResolveWithLastItem');
  late final _igDebugLocateItemResolveWithLastItem =
      _igDebugLocateItemResolveWithLastItemPtr.asFunction<void Function()>();

  void igDebugBreakClearData() {
    return _igDebugBreakClearData();
  }

  late final _igDebugBreakClearDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('igDebugBreakClearData');
  late final _igDebugBreakClearData =
      _igDebugBreakClearDataPtr.asFunction<void Function()>();

  bool igDebugBreakButton(
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Char> description_of_location,
  ) {
    return _igDebugBreakButton(
      label,
      description_of_location,
    );
  }

  late final _igDebugBreakButtonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('igDebugBreakButton');
  late final _igDebugBreakButton = _igDebugBreakButtonPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void igDebugBreakButtonTooltip(
    bool keyboard_only,
    ffi.Pointer<ffi.Char> description_of_location,
  ) {
    return _igDebugBreakButtonTooltip(
      keyboard_only,
      description_of_location,
    );
  }

  late final _igDebugBreakButtonTooltipPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Bool, ffi.Pointer<ffi.Char>)>>(
      'igDebugBreakButtonTooltip');
  late final _igDebugBreakButtonTooltip = _igDebugBreakButtonTooltipPtr
      .asFunction<void Function(bool, ffi.Pointer<ffi.Char>)>();

  void igShowFontAtlas(
    ffi.Pointer<ImFontAtlas> atlas,
  ) {
    return _igShowFontAtlas(
      atlas,
    );
  }

  late final _igShowFontAtlasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'igShowFontAtlas');
  late final _igShowFontAtlas =
      _igShowFontAtlasPtr.asFunction<void Function(ffi.Pointer<ImFontAtlas>)>();

  void igDebugHookIdInfo(
    int id,
    int data_type,
    ffi.Pointer<ffi.Void> data_id,
    ffi.Pointer<ffi.Void> data_id_end,
  ) {
    return _igDebugHookIdInfo(
      id,
      data_type,
      data_id,
      data_id_end,
    );
  }

  late final _igDebugHookIdInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ImGuiID, ImGuiDataType, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('igDebugHookIdInfo');
  late final _igDebugHookIdInfo = _igDebugHookIdInfoPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  void igDebugNodeColumns(
    ffi.Pointer<ImGuiOldColumns> columns,
  ) {
    return _igDebugNodeColumns(
      columns,
    );
  }

  late final _igDebugNodeColumnsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiOldColumns>)>>(
      'igDebugNodeColumns');
  late final _igDebugNodeColumns = _igDebugNodeColumnsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiOldColumns>)>();

  void igDebugNodeDockNode(
    ffi.Pointer<ImGuiDockNode> node,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igDebugNodeDockNode(
      node,
      label,
    );
  }

  late final _igDebugNodeDockNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiDockNode>,
              ffi.Pointer<ffi.Char>)>>('igDebugNodeDockNode');
  late final _igDebugNodeDockNode = _igDebugNodeDockNodePtr.asFunction<
      void Function(ffi.Pointer<ImGuiDockNode>, ffi.Pointer<ffi.Char>)>();

  void igDebugNodeDrawList(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ImGuiViewportP> viewport,
    ffi.Pointer<ImDrawList> draw_list,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igDebugNodeDrawList(
      window,
      viewport,
      draw_list,
      label,
    );
  }

  late final _igDebugNodeDrawListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ImGuiViewportP>,
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ffi.Char>)>>('igDebugNodeDrawList');
  late final _igDebugNodeDrawList = _igDebugNodeDrawListPtr.asFunction<
      void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ImGuiViewportP>,
          ffi.Pointer<ImDrawList>, ffi.Pointer<ffi.Char>)>();

  void igDebugNodeDrawCmdShowMeshAndBoundingBox(
    ffi.Pointer<ImDrawList> out_draw_list,
    ffi.Pointer<ImDrawList> draw_list,
    ffi.Pointer<ImDrawCmd> draw_cmd,
    bool show_mesh,
    bool show_aabb,
  ) {
    return _igDebugNodeDrawCmdShowMeshAndBoundingBox(
      out_draw_list,
      draw_list,
      draw_cmd,
      show_mesh,
      show_aabb,
    );
  }

  late final _igDebugNodeDrawCmdShowMeshAndBoundingBoxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImDrawCmd>,
              ffi.Bool,
              ffi.Bool)>>('igDebugNodeDrawCmdShowMeshAndBoundingBox');
  late final _igDebugNodeDrawCmdShowMeshAndBoundingBox =
      _igDebugNodeDrawCmdShowMeshAndBoundingBoxPtr.asFunction<
          void Function(ffi.Pointer<ImDrawList>, ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImDrawCmd>, bool, bool)>();

  void igDebugNodeFont(
    ffi.Pointer<ImFont> font,
  ) {
    return _igDebugNodeFont(
      font,
    );
  }

  late final _igDebugNodeFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFont>)>>(
          'igDebugNodeFont');
  late final _igDebugNodeFont =
      _igDebugNodeFontPtr.asFunction<void Function(ffi.Pointer<ImFont>)>();

  void igDebugNodeFontGlyph(
    ffi.Pointer<ImFont> font,
    ffi.Pointer<ImFontGlyph> glyph,
  ) {
    return _igDebugNodeFontGlyph(
      font,
      glyph,
    );
  }

  late final _igDebugNodeFontGlyphPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFont>,
              ffi.Pointer<ImFontGlyph>)>>('igDebugNodeFontGlyph');
  late final _igDebugNodeFontGlyph = _igDebugNodeFontGlyphPtr.asFunction<
      void Function(ffi.Pointer<ImFont>, ffi.Pointer<ImFontGlyph>)>();

  void igDebugNodeStorage(
    ffi.Pointer<ImGuiStorage> storage,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igDebugNodeStorage(
      storage,
      label,
    );
  }

  late final _igDebugNodeStoragePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiStorage>,
              ffi.Pointer<ffi.Char>)>>('igDebugNodeStorage');
  late final _igDebugNodeStorage = _igDebugNodeStoragePtr.asFunction<
      void Function(ffi.Pointer<ImGuiStorage>, ffi.Pointer<ffi.Char>)>();

  void igDebugNodeTabBar(
    ffi.Pointer<ImGuiTabBar> tab_bar,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igDebugNodeTabBar(
      tab_bar,
      label,
    );
  }

  late final _igDebugNodeTabBarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTabBar>,
              ffi.Pointer<ffi.Char>)>>('igDebugNodeTabBar');
  late final _igDebugNodeTabBar = _igDebugNodeTabBarPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTabBar>, ffi.Pointer<ffi.Char>)>();

  void igDebugNodeTable(
    ffi.Pointer<ImGuiTable> table,
  ) {
    return _igDebugNodeTable(
      table,
    );
  }

  late final _igDebugNodeTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTable>)>>(
          'igDebugNodeTable');
  late final _igDebugNodeTable =
      _igDebugNodeTablePtr.asFunction<void Function(ffi.Pointer<ImGuiTable>)>();

  void igDebugNodeTableSettings(
    ffi.Pointer<ImGuiTableSettings> settings,
  ) {
    return _igDebugNodeTableSettings(
      settings,
    );
  }

  late final _igDebugNodeTableSettingsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiTableSettings>)>>(
      'igDebugNodeTableSettings');
  late final _igDebugNodeTableSettings = _igDebugNodeTableSettingsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiTableSettings>)>();

  void igDebugNodeInputTextState(
    ffi.Pointer<ImGuiInputTextState> state,
  ) {
    return _igDebugNodeInputTextState(
      state,
    );
  }

  late final _igDebugNodeInputTextStatePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiInputTextState>)>>(
      'igDebugNodeInputTextState');
  late final _igDebugNodeInputTextState = _igDebugNodeInputTextStatePtr
      .asFunction<void Function(ffi.Pointer<ImGuiInputTextState>)>();

  void igDebugNodeTypingSelectState(
    ffi.Pointer<ImGuiTypingSelectState> state,
  ) {
    return _igDebugNodeTypingSelectState(
      state,
    );
  }

  late final _igDebugNodeTypingSelectStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiTypingSelectState>)>>(
      'igDebugNodeTypingSelectState');
  late final _igDebugNodeTypingSelectState = _igDebugNodeTypingSelectStatePtr
      .asFunction<void Function(ffi.Pointer<ImGuiTypingSelectState>)>();

  void igDebugNodeMultiSelectState(
    ffi.Pointer<ImGuiMultiSelectState> state,
  ) {
    return _igDebugNodeMultiSelectState(
      state,
    );
  }

  late final _igDebugNodeMultiSelectStatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiMultiSelectState>)>>(
      'igDebugNodeMultiSelectState');
  late final _igDebugNodeMultiSelectState = _igDebugNodeMultiSelectStatePtr
      .asFunction<void Function(ffi.Pointer<ImGuiMultiSelectState>)>();

  void igDebugNodeWindow(
    ffi.Pointer<ImGuiWindow> window,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igDebugNodeWindow(
      window,
      label,
    );
  }

  late final _igDebugNodeWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiWindow>,
              ffi.Pointer<ffi.Char>)>>('igDebugNodeWindow');
  late final _igDebugNodeWindow = _igDebugNodeWindowPtr.asFunction<
      void Function(ffi.Pointer<ImGuiWindow>, ffi.Pointer<ffi.Char>)>();

  void igDebugNodeWindowSettings(
    ffi.Pointer<ImGuiWindowSettings> settings,
  ) {
    return _igDebugNodeWindowSettings(
      settings,
    );
  }

  late final _igDebugNodeWindowSettingsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiWindowSettings>)>>(
      'igDebugNodeWindowSettings');
  late final _igDebugNodeWindowSettings = _igDebugNodeWindowSettingsPtr
      .asFunction<void Function(ffi.Pointer<ImGuiWindowSettings>)>();

  void igDebugNodeWindowsList(
    ffi.Pointer<ImVector_ImGuiWindowPtr> windows,
    ffi.Pointer<ffi.Char> label,
  ) {
    return _igDebugNodeWindowsList(
      windows,
      label,
    );
  }

  late final _igDebugNodeWindowsListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImVector_ImGuiWindowPtr>,
              ffi.Pointer<ffi.Char>)>>('igDebugNodeWindowsList');
  late final _igDebugNodeWindowsList = _igDebugNodeWindowsListPtr.asFunction<
      void Function(
          ffi.Pointer<ImVector_ImGuiWindowPtr>, ffi.Pointer<ffi.Char>)>();

  void igDebugNodeWindowsListByBeginStackParent(
    ffi.Pointer<ffi.Pointer<ImGuiWindow>> windows,
    int windows_size,
    ffi.Pointer<ImGuiWindow> parent_in_begin_stack,
  ) {
    return _igDebugNodeWindowsListByBeginStackParent(
      windows,
      windows_size,
      parent_in_begin_stack,
    );
  }

  late final _igDebugNodeWindowsListByBeginStackParentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<ImGuiWindow>>, ffi.Int,
                  ffi.Pointer<ImGuiWindow>)>>(
      'igDebugNodeWindowsListByBeginStackParent');
  late final _igDebugNodeWindowsListByBeginStackParent =
      _igDebugNodeWindowsListByBeginStackParentPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<ImGuiWindow>>, int,
              ffi.Pointer<ImGuiWindow>)>();

  void igDebugNodeViewport(
    ffi.Pointer<ImGuiViewportP> viewport,
  ) {
    return _igDebugNodeViewport(
      viewport,
    );
  }

  late final _igDebugNodeViewportPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewportP>)>>(
      'igDebugNodeViewport');
  late final _igDebugNodeViewport = _igDebugNodeViewportPtr
      .asFunction<void Function(ffi.Pointer<ImGuiViewportP>)>();

  void igDebugNodePlatformMonitor(
    ffi.Pointer<ImGuiPlatformMonitor> monitor,
    ffi.Pointer<ffi.Char> label,
    int idx,
  ) {
    return _igDebugNodePlatformMonitor(
      monitor,
      label,
      idx,
    );
  }

  late final _igDebugNodePlatformMonitorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiPlatformMonitor>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('igDebugNodePlatformMonitor');
  late final _igDebugNodePlatformMonitor =
      _igDebugNodePlatformMonitorPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiPlatformMonitor>, ffi.Pointer<ffi.Char>, int)>();

  void igDebugRenderKeyboardPreview(
    ffi.Pointer<ImDrawList> draw_list,
  ) {
    return _igDebugRenderKeyboardPreview(
      draw_list,
    );
  }

  late final _igDebugRenderKeyboardPreviewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawList>)>>(
          'igDebugRenderKeyboardPreview');
  late final _igDebugRenderKeyboardPreview = _igDebugRenderKeyboardPreviewPtr
      .asFunction<void Function(ffi.Pointer<ImDrawList>)>();

  void igDebugRenderViewportThumbnail(
    ffi.Pointer<ImDrawList> draw_list,
    ffi.Pointer<ImGuiViewportP> viewport,
    ImRect bb,
  ) {
    return _igDebugRenderViewportThumbnail(
      draw_list,
      viewport,
      bb,
    );
  }

  late final _igDebugRenderViewportThumbnailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImDrawList>,
              ffi.Pointer<ImGuiViewportP>,
              ImRect)>>('igDebugRenderViewportThumbnail');
  late final _igDebugRenderViewportThumbnail =
      _igDebugRenderViewportThumbnailPtr.asFunction<
          void Function(
              ffi.Pointer<ImDrawList>, ffi.Pointer<ImGuiViewportP>, ImRect)>();

  ffi.Pointer<ImFontBuilderIO> igImFontAtlasGetBuilderForStbTruetype() {
    return _igImFontAtlasGetBuilderForStbTruetype();
  }

  late final _igImFontAtlasGetBuilderForStbTruetypePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImFontBuilderIO> Function()>>(
          'igImFontAtlasGetBuilderForStbTruetype');
  late final _igImFontAtlasGetBuilderForStbTruetype =
      _igImFontAtlasGetBuilderForStbTruetypePtr
          .asFunction<ffi.Pointer<ImFontBuilderIO> Function()>();

  void igImFontAtlasUpdateConfigDataPointers(
    ffi.Pointer<ImFontAtlas> atlas,
  ) {
    return _igImFontAtlasUpdateConfigDataPointers(
      atlas,
    );
  }

  late final _igImFontAtlasUpdateConfigDataPointersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'igImFontAtlasUpdateConfigDataPointers');
  late final _igImFontAtlasUpdateConfigDataPointers =
      _igImFontAtlasUpdateConfigDataPointersPtr
          .asFunction<void Function(ffi.Pointer<ImFontAtlas>)>();

  void igImFontAtlasBuildInit(
    ffi.Pointer<ImFontAtlas> atlas,
  ) {
    return _igImFontAtlasBuildInit(
      atlas,
    );
  }

  late final _igImFontAtlasBuildInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'igImFontAtlasBuildInit');
  late final _igImFontAtlasBuildInit = _igImFontAtlasBuildInitPtr
      .asFunction<void Function(ffi.Pointer<ImFontAtlas>)>();

  void igImFontAtlasBuildSetupFont(
    ffi.Pointer<ImFontAtlas> atlas,
    ffi.Pointer<ImFont> font,
    ffi.Pointer<ImFontConfig> font_config,
    double ascent,
    double descent,
  ) {
    return _igImFontAtlasBuildSetupFont(
      atlas,
      font,
      font_config,
      ascent,
      descent,
    );
  }

  late final _igImFontAtlasBuildSetupFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ImFont>,
              ffi.Pointer<ImFontConfig>,
              ffi.Float,
              ffi.Float)>>('igImFontAtlasBuildSetupFont');
  late final _igImFontAtlasBuildSetupFont =
      _igImFontAtlasBuildSetupFontPtr.asFunction<
          void Function(ffi.Pointer<ImFontAtlas>, ffi.Pointer<ImFont>,
              ffi.Pointer<ImFontConfig>, double, double)>();

  void igImFontAtlasBuildPackCustomRects(
    ffi.Pointer<ImFontAtlas> atlas,
    ffi.Pointer<ffi.Void> stbrp_context_opaque,
  ) {
    return _igImFontAtlasBuildPackCustomRects(
      atlas,
      stbrp_context_opaque,
    );
  }

  late final _igImFontAtlasBuildPackCustomRectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImFontAtlas>,
              ffi.Pointer<ffi.Void>)>>('igImFontAtlasBuildPackCustomRects');
  late final _igImFontAtlasBuildPackCustomRects =
      _igImFontAtlasBuildPackCustomRectsPtr.asFunction<
          void Function(ffi.Pointer<ImFontAtlas>, ffi.Pointer<ffi.Void>)>();

  void igImFontAtlasBuildFinish(
    ffi.Pointer<ImFontAtlas> atlas,
  ) {
    return _igImFontAtlasBuildFinish(
      atlas,
    );
  }

  late final _igImFontAtlasBuildFinishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImFontAtlas>)>>(
          'igImFontAtlasBuildFinish');
  late final _igImFontAtlasBuildFinish = _igImFontAtlasBuildFinishPtr
      .asFunction<void Function(ffi.Pointer<ImFontAtlas>)>();

  void igImFontAtlasBuildRender8bppRectFromString(
    ffi.Pointer<ImFontAtlas> atlas,
    int x,
    int y,
    int w,
    int h,
    ffi.Pointer<ffi.Char> in_str,
    int in_marker_char,
    int in_marker_pixel_value,
  ) {
    return _igImFontAtlasBuildRender8bppRectFromString(
      atlas,
      x,
      y,
      w,
      h,
      in_str,
      in_marker_char,
      in_marker_pixel_value,
    );
  }

  late final _igImFontAtlasBuildRender8bppRectFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Char,
              ffi.UnsignedChar)>>('igImFontAtlasBuildRender8bppRectFromString');
  late final _igImFontAtlasBuildRender8bppRectFromString =
      _igImFontAtlasBuildRender8bppRectFromStringPtr.asFunction<
          void Function(ffi.Pointer<ImFontAtlas>, int, int, int, int,
              ffi.Pointer<ffi.Char>, int, int)>();

  void igImFontAtlasBuildRender32bppRectFromString(
    ffi.Pointer<ImFontAtlas> atlas,
    int x,
    int y,
    int w,
    int h,
    ffi.Pointer<ffi.Char> in_str,
    int in_marker_char,
    int in_marker_pixel_value,
  ) {
    return _igImFontAtlasBuildRender32bppRectFromString(
      atlas,
      x,
      y,
      w,
      h,
      in_str,
      in_marker_char,
      in_marker_pixel_value,
    );
  }

  late final _igImFontAtlasBuildRender32bppRectFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImFontAtlas>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Char,
              ffi.UnsignedInt)>>('igImFontAtlasBuildRender32bppRectFromString');
  late final _igImFontAtlasBuildRender32bppRectFromString =
      _igImFontAtlasBuildRender32bppRectFromStringPtr.asFunction<
          void Function(ffi.Pointer<ImFontAtlas>, int, int, int, int,
              ffi.Pointer<ffi.Char>, int, int)>();

  void igImFontAtlasBuildMultiplyCalcLookupTable(
    ffi.Pointer<ffi.UnsignedChar> out_table,
    double in_multiply_factor,
  ) {
    return _igImFontAtlasBuildMultiplyCalcLookupTable(
      out_table,
      in_multiply_factor,
    );
  }

  late final _igImFontAtlasBuildMultiplyCalcLookupTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Float)>>('igImFontAtlasBuildMultiplyCalcLookupTable');
  late final _igImFontAtlasBuildMultiplyCalcLookupTable =
      _igImFontAtlasBuildMultiplyCalcLookupTablePtr
          .asFunction<void Function(ffi.Pointer<ffi.UnsignedChar>, double)>();

  void igImFontAtlasBuildMultiplyRectAlpha8(
    ffi.Pointer<ffi.UnsignedChar> table,
    ffi.Pointer<ffi.UnsignedChar> pixels,
    int x,
    int y,
    int w,
    int h,
    int stride,
  ) {
    return _igImFontAtlasBuildMultiplyRectAlpha8(
      table,
      pixels,
      x,
      y,
      w,
      h,
      stride,
    );
  }

  late final _igImFontAtlasBuildMultiplyRectAlpha8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('igImFontAtlasBuildMultiplyRectAlpha8');
  late final _igImFontAtlasBuildMultiplyRectAlpha8 =
      _igImFontAtlasBuildMultiplyRectAlpha8Ptr.asFunction<
          void Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.UnsignedChar>, int, int, int, int, int)>();

  /// //////////////////////hand written functions
  void igLogText(
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _igLogText(
      fmt,
    );
  }

  late final _igLogTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'igLogText');
  late final _igLogText =
      _igLogTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void ImGuiTextBuffer_appendf(
    ffi.Pointer<ImGuiTextBuffer> self,
    ffi.Pointer<ffi.Char> fmt,
  ) {
    return _ImGuiTextBuffer_appendf(
      self,
      fmt,
    );
  }

  late final _ImGuiTextBuffer_appendfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiTextBuffer>,
              ffi.Pointer<ffi.Char>)>>('ImGuiTextBuffer_appendf');
  late final _ImGuiTextBuffer_appendf = _ImGuiTextBuffer_appendfPtr.asFunction<
      void Function(ffi.Pointer<ImGuiTextBuffer>, ffi.Pointer<ffi.Char>)>();

  double igGET_FLT_MAX() {
    return _igGET_FLT_MAX();
  }

  late final _igGET_FLT_MAXPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGET_FLT_MAX');
  late final _igGET_FLT_MAX = _igGET_FLT_MAXPtr.asFunction<double Function()>();

  double igGET_FLT_MIN() {
    return _igGET_FLT_MIN();
  }

  late final _igGET_FLT_MINPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('igGET_FLT_MIN');
  late final _igGET_FLT_MIN = _igGET_FLT_MINPtr.asFunction<double Function()>();

  ffi.Pointer<ImVector_ImWchar> ImVector_ImWchar_create() {
    return _ImVector_ImWchar_create();
  }

  late final _ImVector_ImWchar_createPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImVector_ImWchar> Function()>>(
          'ImVector_ImWchar_create');
  late final _ImVector_ImWchar_create = _ImVector_ImWchar_createPtr.asFunction<
      ffi.Pointer<ImVector_ImWchar> Function()>();

  void ImVector_ImWchar_destroy(
    ffi.Pointer<ImVector_ImWchar> self,
  ) {
    return _ImVector_ImWchar_destroy(
      self,
    );
  }

  late final _ImVector_ImWchar_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVector_ImWchar>)>>(
      'ImVector_ImWchar_destroy');
  late final _ImVector_ImWchar_destroy = _ImVector_ImWchar_destroyPtr
      .asFunction<void Function(ffi.Pointer<ImVector_ImWchar>)>();

  void ImVector_ImWchar_Init(
    ffi.Pointer<ImVector_ImWchar> p,
  ) {
    return _ImVector_ImWchar_Init(
      p,
    );
  }

  late final _ImVector_ImWchar_InitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVector_ImWchar>)>>(
      'ImVector_ImWchar_Init');
  late final _ImVector_ImWchar_Init = _ImVector_ImWchar_InitPtr.asFunction<
      void Function(ffi.Pointer<ImVector_ImWchar>)>();

  void ImVector_ImWchar_UnInit(
    ffi.Pointer<ImVector_ImWchar> p,
  ) {
    return _ImVector_ImWchar_UnInit(
      p,
    );
  }

  late final _ImVector_ImWchar_UnInitPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImVector_ImWchar>)>>(
      'ImVector_ImWchar_UnInit');
  late final _ImVector_ImWchar_UnInit = _ImVector_ImWchar_UnInitPtr.asFunction<
      void Function(ffi.Pointer<ImVector_ImWchar>)>();

  void ImGuiPlatformIO_Set_Platform_GetWindowPos(
    ffi.Pointer<ImGuiPlatformIO> platform_io,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
                    ffi.Pointer<ImVec2> out_pos)>>
        user_callback,
  ) {
    return _ImGuiPlatformIO_Set_Platform_GetWindowPos(
      platform_io,
      user_callback,
    );
  }

  late final _ImGuiPlatformIO_Set_Platform_GetWindowPosPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ImGuiPlatformIO>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
                              ffi.Pointer<ImVec2> out_pos)>>)>>(
      'ImGuiPlatformIO_Set_Platform_GetWindowPos');
  late final _ImGuiPlatformIO_Set_Platform_GetWindowPos =
      _ImGuiPlatformIO_Set_Platform_GetWindowPosPtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiPlatformIO>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
                          ffi.Pointer<ImVec2> out_pos)>>)>();

  void ImGuiPlatformIO_Set_Platform_GetWindowSize(
    ffi.Pointer<ImGuiPlatformIO> platform_io,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
                    ffi.Pointer<ImVec2> out_size)>>
        user_callback,
  ) {
    return _ImGuiPlatformIO_Set_Platform_GetWindowSize(
      platform_io,
      user_callback,
    );
  }

  late final _ImGuiPlatformIO_Set_Platform_GetWindowSizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ImGuiPlatformIO>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
                              ffi.Pointer<ImVec2> out_size)>>)>>(
      'ImGuiPlatformIO_Set_Platform_GetWindowSize');
  late final _ImGuiPlatformIO_Set_Platform_GetWindowSize =
      _ImGuiPlatformIO_Set_Platform_GetWindowSizePtr.asFunction<
          void Function(
              ffi.Pointer<ImGuiPlatformIO>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
                          ffi.Pointer<ImVec2> out_size)>>)>();

  bool ImGui_ImplGlfw_InitForOpenGL(
    ffi.Pointer<GLFWwindow> window,
    bool install_callbacks,
  ) {
    return _ImGui_ImplGlfw_InitForOpenGL(
      window,
      install_callbacks,
    );
  }

  late final _ImGui_ImplGlfw_InitForOpenGLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<GLFWwindow>,
              ffi.Bool)>>('ImGui_ImplGlfw_InitForOpenGL');
  late final _ImGui_ImplGlfw_InitForOpenGL = _ImGui_ImplGlfw_InitForOpenGLPtr
      .asFunction<bool Function(ffi.Pointer<GLFWwindow>, bool)>();

  bool ImGui_ImplGlfw_InitForVulkan(
    ffi.Pointer<GLFWwindow> window,
    bool install_callbacks,
  ) {
    return _ImGui_ImplGlfw_InitForVulkan(
      window,
      install_callbacks,
    );
  }

  late final _ImGui_ImplGlfw_InitForVulkanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<GLFWwindow>,
              ffi.Bool)>>('ImGui_ImplGlfw_InitForVulkan');
  late final _ImGui_ImplGlfw_InitForVulkan = _ImGui_ImplGlfw_InitForVulkanPtr
      .asFunction<bool Function(ffi.Pointer<GLFWwindow>, bool)>();

  bool ImGui_ImplGlfw_InitForOther(
    ffi.Pointer<GLFWwindow> window,
    bool install_callbacks,
  ) {
    return _ImGui_ImplGlfw_InitForOther(
      window,
      install_callbacks,
    );
  }

  late final _ImGui_ImplGlfw_InitForOtherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<GLFWwindow>,
              ffi.Bool)>>('ImGui_ImplGlfw_InitForOther');
  late final _ImGui_ImplGlfw_InitForOther = _ImGui_ImplGlfw_InitForOtherPtr
      .asFunction<bool Function(ffi.Pointer<GLFWwindow>, bool)>();

  void ImGui_ImplGlfw_Shutdown() {
    return _ImGui_ImplGlfw_Shutdown();
  }

  late final _ImGui_ImplGlfw_ShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ImGui_ImplGlfw_Shutdown');
  late final _ImGui_ImplGlfw_Shutdown =
      _ImGui_ImplGlfw_ShutdownPtr.asFunction<void Function()>();

  void ImGui_ImplGlfw_NewFrame() {
    return _ImGui_ImplGlfw_NewFrame();
  }

  late final _ImGui_ImplGlfw_NewFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ImGui_ImplGlfw_NewFrame');
  late final _ImGui_ImplGlfw_NewFrame =
      _ImGui_ImplGlfw_NewFramePtr.asFunction<void Function()>();

  void ImGui_ImplGlfw_InstallCallbacks(
    ffi.Pointer<GLFWwindow> window,
  ) {
    return _ImGui_ImplGlfw_InstallCallbacks(
      window,
    );
  }

  late final _ImGui_ImplGlfw_InstallCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GLFWwindow>)>>(
          'ImGui_ImplGlfw_InstallCallbacks');
  late final _ImGui_ImplGlfw_InstallCallbacks =
      _ImGui_ImplGlfw_InstallCallbacksPtr.asFunction<
          void Function(ffi.Pointer<GLFWwindow>)>();

  void ImGui_ImplGlfw_RestoreCallbacks(
    ffi.Pointer<GLFWwindow> window,
  ) {
    return _ImGui_ImplGlfw_RestoreCallbacks(
      window,
    );
  }

  late final _ImGui_ImplGlfw_RestoreCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GLFWwindow>)>>(
          'ImGui_ImplGlfw_RestoreCallbacks');
  late final _ImGui_ImplGlfw_RestoreCallbacks =
      _ImGui_ImplGlfw_RestoreCallbacksPtr.asFunction<
          void Function(ffi.Pointer<GLFWwindow>)>();

  void ImGui_ImplGlfw_SetCallbacksChainForAllWindows(
    bool chain_for_all_windows,
  ) {
    return _ImGui_ImplGlfw_SetCallbacksChainForAllWindows(
      chain_for_all_windows,
    );
  }

  late final _ImGui_ImplGlfw_SetCallbacksChainForAllWindowsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Bool)>>(
          'ImGui_ImplGlfw_SetCallbacksChainForAllWindows');
  late final _ImGui_ImplGlfw_SetCallbacksChainForAllWindows =
      _ImGui_ImplGlfw_SetCallbacksChainForAllWindowsPtr.asFunction<
          void Function(bool)>();

  void ImGui_ImplGlfw_WindowFocusCallback(
    ffi.Pointer<GLFWwindow> window,
    int focused,
  ) {
    return _ImGui_ImplGlfw_WindowFocusCallback(
      window,
      focused,
    );
  }

  late final _ImGui_ImplGlfw_WindowFocusCallbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GLFWwindow>, ffi.Int)>>(
      'ImGui_ImplGlfw_WindowFocusCallback');
  late final _ImGui_ImplGlfw_WindowFocusCallback =
      _ImGui_ImplGlfw_WindowFocusCallbackPtr.asFunction<
          void Function(ffi.Pointer<GLFWwindow>, int)>();

  void ImGui_ImplGlfw_CursorEnterCallback(
    ffi.Pointer<GLFWwindow> window,
    int entered,
  ) {
    return _ImGui_ImplGlfw_CursorEnterCallback(
      window,
      entered,
    );
  }

  late final _ImGui_ImplGlfw_CursorEnterCallbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GLFWwindow>, ffi.Int)>>(
      'ImGui_ImplGlfw_CursorEnterCallback');
  late final _ImGui_ImplGlfw_CursorEnterCallback =
      _ImGui_ImplGlfw_CursorEnterCallbackPtr.asFunction<
          void Function(ffi.Pointer<GLFWwindow>, int)>();

  void ImGui_ImplGlfw_CursorPosCallback(
    ffi.Pointer<GLFWwindow> window,
    double x,
    double y,
  ) {
    return _ImGui_ImplGlfw_CursorPosCallback(
      window,
      x,
      y,
    );
  }

  late final _ImGui_ImplGlfw_CursorPosCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GLFWwindow>, ffi.Double,
              ffi.Double)>>('ImGui_ImplGlfw_CursorPosCallback');
  late final _ImGui_ImplGlfw_CursorPosCallback =
      _ImGui_ImplGlfw_CursorPosCallbackPtr.asFunction<
          void Function(ffi.Pointer<GLFWwindow>, double, double)>();

  void ImGui_ImplGlfw_MouseButtonCallback(
    ffi.Pointer<GLFWwindow> window,
    int button,
    int action,
    int mods,
  ) {
    return _ImGui_ImplGlfw_MouseButtonCallback(
      window,
      button,
      action,
      mods,
    );
  }

  late final _ImGui_ImplGlfw_MouseButtonCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GLFWwindow>, ffi.Int, ffi.Int,
              ffi.Int)>>('ImGui_ImplGlfw_MouseButtonCallback');
  late final _ImGui_ImplGlfw_MouseButtonCallback =
      _ImGui_ImplGlfw_MouseButtonCallbackPtr.asFunction<
          void Function(ffi.Pointer<GLFWwindow>, int, int, int)>();

  void ImGui_ImplGlfw_ScrollCallback(
    ffi.Pointer<GLFWwindow> window,
    double xoffset,
    double yoffset,
  ) {
    return _ImGui_ImplGlfw_ScrollCallback(
      window,
      xoffset,
      yoffset,
    );
  }

  late final _ImGui_ImplGlfw_ScrollCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GLFWwindow>, ffi.Double,
              ffi.Double)>>('ImGui_ImplGlfw_ScrollCallback');
  late final _ImGui_ImplGlfw_ScrollCallback = _ImGui_ImplGlfw_ScrollCallbackPtr
      .asFunction<void Function(ffi.Pointer<GLFWwindow>, double, double)>();

  void ImGui_ImplGlfw_KeyCallback(
    ffi.Pointer<GLFWwindow> window,
    int key,
    int scancode,
    int action,
    int mods,
  ) {
    return _ImGui_ImplGlfw_KeyCallback(
      window,
      key,
      scancode,
      action,
      mods,
    );
  }

  late final _ImGui_ImplGlfw_KeyCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GLFWwindow>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ImGui_ImplGlfw_KeyCallback');
  late final _ImGui_ImplGlfw_KeyCallback = _ImGui_ImplGlfw_KeyCallbackPtr
      .asFunction<void Function(ffi.Pointer<GLFWwindow>, int, int, int, int)>();

  void ImGui_ImplGlfw_CharCallback(
    ffi.Pointer<GLFWwindow> window,
    int c,
  ) {
    return _ImGui_ImplGlfw_CharCallback(
      window,
      c,
    );
  }

  late final _ImGui_ImplGlfw_CharCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GLFWwindow>,
              ffi.UnsignedInt)>>('ImGui_ImplGlfw_CharCallback');
  late final _ImGui_ImplGlfw_CharCallback = _ImGui_ImplGlfw_CharCallbackPtr
      .asFunction<void Function(ffi.Pointer<GLFWwindow>, int)>();

  void ImGui_ImplGlfw_MonitorCallback(
    ffi.Pointer<GLFWmonitor> monitor,
    int event,
  ) {
    return _ImGui_ImplGlfw_MonitorCallback(
      monitor,
      event,
    );
  }

  late final _ImGui_ImplGlfw_MonitorCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GLFWmonitor>,
              ffi.Int)>>('ImGui_ImplGlfw_MonitorCallback');
  late final _ImGui_ImplGlfw_MonitorCallback =
      _ImGui_ImplGlfw_MonitorCallbackPtr.asFunction<
          void Function(ffi.Pointer<GLFWmonitor>, int)>();

  void ImGui_ImplGlfw_Sleep(
    int milliseconds,
  ) {
    return _ImGui_ImplGlfw_Sleep(
      milliseconds,
    );
  }

  late final _ImGui_ImplGlfw_SleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'ImGui_ImplGlfw_Sleep');
  late final _ImGui_ImplGlfw_Sleep =
      _ImGui_ImplGlfw_SleepPtr.asFunction<void Function(int)>();

  bool ImGui_ImplOpenGL3_Init(
    ffi.Pointer<ffi.Char> glsl_version,
  ) {
    return _ImGui_ImplOpenGL3_Init(
      glsl_version,
    );
  }

  late final _ImGui_ImplOpenGL3_InitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'ImGui_ImplOpenGL3_Init');
  late final _ImGui_ImplOpenGL3_Init = _ImGui_ImplOpenGL3_InitPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>)>();

  void ImGui_ImplOpenGL3_Shutdown() {
    return _ImGui_ImplOpenGL3_Shutdown();
  }

  late final _ImGui_ImplOpenGL3_ShutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ImGui_ImplOpenGL3_Shutdown');
  late final _ImGui_ImplOpenGL3_Shutdown =
      _ImGui_ImplOpenGL3_ShutdownPtr.asFunction<void Function()>();

  void ImGui_ImplOpenGL3_NewFrame() {
    return _ImGui_ImplOpenGL3_NewFrame();
  }

  late final _ImGui_ImplOpenGL3_NewFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ImGui_ImplOpenGL3_NewFrame');
  late final _ImGui_ImplOpenGL3_NewFrame =
      _ImGui_ImplOpenGL3_NewFramePtr.asFunction<void Function()>();

  void ImGui_ImplOpenGL3_RenderDrawData(
    ffi.Pointer<ImDrawData> draw_data,
  ) {
    return _ImGui_ImplOpenGL3_RenderDrawData(
      draw_data,
    );
  }

  late final _ImGui_ImplOpenGL3_RenderDrawDataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImDrawData>)>>(
          'ImGui_ImplOpenGL3_RenderDrawData');
  late final _ImGui_ImplOpenGL3_RenderDrawData =
      _ImGui_ImplOpenGL3_RenderDrawDataPtr.asFunction<
          void Function(ffi.Pointer<ImDrawData>)>();

  bool ImGui_ImplOpenGL3_CreateFontsTexture() {
    return _ImGui_ImplOpenGL3_CreateFontsTexture();
  }

  late final _ImGui_ImplOpenGL3_CreateFontsTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'ImGui_ImplOpenGL3_CreateFontsTexture');
  late final _ImGui_ImplOpenGL3_CreateFontsTexture =
      _ImGui_ImplOpenGL3_CreateFontsTexturePtr.asFunction<bool Function()>();

  void ImGui_ImplOpenGL3_DestroyFontsTexture() {
    return _ImGui_ImplOpenGL3_DestroyFontsTexture();
  }

  late final _ImGui_ImplOpenGL3_DestroyFontsTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ImGui_ImplOpenGL3_DestroyFontsTexture');
  late final _ImGui_ImplOpenGL3_DestroyFontsTexture =
      _ImGui_ImplOpenGL3_DestroyFontsTexturePtr.asFunction<void Function()>();

  bool ImGui_ImplOpenGL3_CreateDeviceObjects() {
    return _ImGui_ImplOpenGL3_CreateDeviceObjects();
  }

  late final _ImGui_ImplOpenGL3_CreateDeviceObjectsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'ImGui_ImplOpenGL3_CreateDeviceObjects');
  late final _ImGui_ImplOpenGL3_CreateDeviceObjects =
      _ImGui_ImplOpenGL3_CreateDeviceObjectsPtr.asFunction<bool Function()>();

  void ImGui_ImplOpenGL3_DestroyDeviceObjects() {
    return _ImGui_ImplOpenGL3_DestroyDeviceObjects();
  }

  late final _ImGui_ImplOpenGL3_DestroyDeviceObjectsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ImGui_ImplOpenGL3_DestroyDeviceObjects');
  late final _ImGui_ImplOpenGL3_DestroyDeviceObjects =
      _ImGui_ImplOpenGL3_DestroyDeviceObjectsPtr.asFunction<void Function()>();
}

final class ImDrawChannel extends ffi.Struct {
  external ImVector_ImDrawCmd _CmdBuffer;

  external ImVector_ImDrawIdx _IdxBuffer;
}

final class ImVector_ImDrawCmd extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImDrawCmd> Data;
}

final class ImDrawCmd extends ffi.Struct {
  external ImVec4 ClipRect;

  @ImTextureID()
  external int TextureId;

  @ffi.UnsignedInt()
  external int VtxOffset;

  @ffi.UnsignedInt()
  external int IdxOffset;

  @ffi.UnsignedInt()
  external int ElemCount;

  external ImDrawCallback UserCallback;

  external ffi.Pointer<ffi.Void> UserCallbackData;

  @ffi.Int()
  external int UserCallbackDataSize;

  @ffi.Int()
  external int UserCallbackDataOffset;
}

final class ImVec4 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double z;

  @ffi.Float()
  external double w;
}

typedef ImTextureID = ImU64;
typedef ImU64 = ffi.UnsignedLongLong;
typedef DartImU64 = int;
typedef ImDrawCallback
    = ffi.Pointer<ffi.NativeFunction<ImDrawCallbackFunction>>;
typedef ImDrawCallbackFunction = ffi.Void Function(
    ffi.Pointer<ImDrawList> parent_list, ffi.Pointer<ImDrawCmd> cmd);
typedef DartImDrawCallbackFunction = void Function(
    ffi.Pointer<ImDrawList> parent_list, ffi.Pointer<ImDrawCmd> cmd);

final class ImDrawList extends ffi.Struct {
  external ImVector_ImDrawCmd CmdBuffer;

  external ImVector_ImDrawIdx IdxBuffer;

  external ImVector_ImDrawVert VtxBuffer;

  @ImDrawListFlags()
  external int Flags;

  @ffi.UnsignedInt()
  external int _VtxCurrentIdx;

  external ffi.Pointer<ImDrawListSharedData> _Data;

  external ffi.Pointer<ImDrawVert> _VtxWritePtr;

  external ffi.Pointer<ImDrawIdx> _IdxWritePtr;

  external ImVector_ImVec2 _Path;

  external ImDrawCmdHeader _CmdHeader;

  external ImDrawListSplitter _Splitter;

  external ImVector_ImVec4 _ClipRectStack;

  external ImVector_ImTextureID _TextureIdStack;

  external ImVector_ImU8 _CallbacksDataBuf;

  @ffi.Float()
  external double _FringeScale;

  external ffi.Pointer<ffi.Char> _OwnerName;
}

final class ImVector_ImDrawIdx extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImDrawIdx> Data;
}

typedef ImDrawIdx = ffi.UnsignedShort;
typedef DartImDrawIdx = int;

final class ImVector_ImDrawVert extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImDrawVert> Data;
}

final class ImDrawVert extends ffi.Struct {
  external ImVec2 pos;

  external ImVec2 uv;

  @ImU32()
  external int col;
}

final class ImVec2 extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;
}

typedef ImU32 = ffi.UnsignedInt;
typedef DartImU32 = int;
typedef ImDrawListFlags = ffi.Int;
typedef DartImDrawListFlags = int;

final class ImDrawListSharedData extends ffi.Struct {
  external ImVec2 TexUvWhitePixel;

  external ffi.Pointer<ImVec4> TexUvLines;

  external ffi.Pointer<ImFont> Font;

  @ffi.Float()
  external double FontSize;

  @ffi.Float()
  external double FontScale;

  @ffi.Float()
  external double CurveTessellationTol;

  @ffi.Float()
  external double CircleSegmentMaxError;

  external ImVec4 ClipRectFullscreen;

  @ImDrawListFlags()
  external int InitialFlags;

  external ImVector_ImVec2 TempBuffer;

  @ffi.Array.multi([48])
  external ffi.Array<ImVec2> ArcFastVtx;

  @ffi.Float()
  external double ArcFastRadiusCutoff;

  @ffi.Array.multi([64])
  external ffi.Array<ImU8> CircleSegmentCounts;
}

final class ImFont extends ffi.Struct {
  external ImVector_float IndexAdvanceX;

  @ffi.Float()
  external double FallbackAdvanceX;

  @ffi.Float()
  external double FontSize;

  external ImVector_ImWchar IndexLookup;

  external ImVector_ImFontGlyph Glyphs;

  external ffi.Pointer<ImFontGlyph> FallbackGlyph;

  external ffi.Pointer<ImFontAtlas> ContainerAtlas;

  external ffi.Pointer<ImFontConfig> ConfigData;

  @ffi.Short()
  external int ConfigDataCount;

  @ffi.Short()
  external int EllipsisCharCount;

  @ImWchar()
  external int EllipsisChar;

  @ImWchar()
  external int FallbackChar;

  @ffi.Float()
  external double EllipsisWidth;

  @ffi.Float()
  external double EllipsisCharStep;

  @ffi.Bool()
  external bool DirtyLookupTables;

  @ffi.Float()
  external double Scale;

  @ffi.Float()
  external double Ascent;

  @ffi.Float()
  external double Descent;

  @ffi.Int()
  external int MetricsTotalSurface;

  @ffi.Array.multi([2])
  external ffi.Array<ImU8> Used4kPagesMap;
}

final class ImVector_float extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Float> Data;
}

final class ImVector_ImWchar extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImWchar> Data;
}

typedef ImWchar = ImWchar16;
typedef ImWchar16 = ffi.UnsignedShort;
typedef DartImWchar16 = int;

final class ImVector_ImFontGlyph extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImFontGlyph> Data;
}

final class ImFontGlyph extends ffi.Opaque {}

final class ImFontAtlas extends ffi.Struct {
  @ImFontAtlasFlags()
  external int Flags;

  @ImTextureID()
  external int TexID;

  @ffi.Int()
  external int TexDesiredWidth;

  @ffi.Int()
  external int TexGlyphPadding;

  @ffi.Bool()
  external bool Locked;

  external ffi.Pointer<ffi.Void> UserData;

  @ffi.Bool()
  external bool TexReady;

  @ffi.Bool()
  external bool TexPixelsUseColors;

  external ffi.Pointer<ffi.UnsignedChar> TexPixelsAlpha8;

  external ffi.Pointer<ffi.UnsignedInt> TexPixelsRGBA32;

  @ffi.Int()
  external int TexWidth;

  @ffi.Int()
  external int TexHeight;

  external ImVec2 TexUvScale;

  external ImVec2 TexUvWhitePixel;

  external ImVector_ImFontPtr Fonts;

  external ImVector_ImFontAtlasCustomRect CustomRects;

  external ImVector_ImFontConfig ConfigData;

  @ffi.Array.multi([64])
  external ffi.Array<ImVec4> TexUvLines;

  external ffi.Pointer<ImFontBuilderIO> FontBuilderIO;

  @ffi.UnsignedInt()
  external int FontBuilderFlags;

  @ffi.Int()
  external int PackIdMouseCursors;

  @ffi.Int()
  external int PackIdLines;
}

typedef ImFontAtlasFlags = ffi.Int;
typedef DartImFontAtlasFlags = int;

final class ImVector_ImFontPtr extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Pointer<ImFont>> Data;
}

final class ImVector_ImFontAtlasCustomRect extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImFontAtlasCustomRect> Data;
}

final class ImFontAtlasCustomRect extends ffi.Opaque {}

final class ImVector_ImFontConfig extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImFontConfig> Data;
}

final class ImFontConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Void> FontData;

  @ffi.Int()
  external int FontDataSize;

  @ffi.Bool()
  external bool FontDataOwnedByAtlas;

  @ffi.Int()
  external int FontNo;

  @ffi.Float()
  external double SizePixels;

  @ffi.Int()
  external int OversampleH;

  @ffi.Int()
  external int OversampleV;

  @ffi.Bool()
  external bool PixelSnapH;

  external ImVec2 GlyphExtraSpacing;

  external ImVec2 GlyphOffset;

  external ffi.Pointer<ImWchar> GlyphRanges;

  @ffi.Float()
  external double GlyphMinAdvanceX;

  @ffi.Float()
  external double GlyphMaxAdvanceX;

  @ffi.Bool()
  external bool MergeMode;

  @ffi.UnsignedInt()
  external int FontBuilderFlags;

  @ffi.Float()
  external double RasterizerMultiply;

  @ffi.Float()
  external double RasterizerDensity;

  @ImWchar()
  external int EllipsisChar;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> Name;

  external ffi.Pointer<ImFont> DstFont;
}

final class ImFontBuilderIO extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImFontAtlas> atlas)>>
      FontBuilder_Build;
}

typedef ImU8 = ffi.UnsignedChar;
typedef DartImU8 = int;

final class ImVector_ImVec2 extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImVec2> Data;
}

final class ImDrawCmdHeader extends ffi.Struct {
  external ImVec4 ClipRect;

  @ImTextureID()
  external int TextureId;

  @ffi.UnsignedInt()
  external int VtxOffset;
}

final class ImDrawListSplitter extends ffi.Struct {
  @ffi.Int()
  external int _Current;

  @ffi.Int()
  external int _Count;

  external ImVector_ImDrawChannel _Channels;
}

final class ImVector_ImDrawChannel extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImDrawChannel> Data;
}

final class ImVector_ImVec4 extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImVec4> Data;
}

final class ImVector_ImTextureID extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImTextureID> Data;
}

final class ImVector_ImU8 extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImU8> Data;
}

final class ImDrawData extends ffi.Struct {
  @ffi.Bool()
  external bool Valid;

  @ffi.Int()
  external int CmdListsCount;

  @ffi.Int()
  external int TotalIdxCount;

  @ffi.Int()
  external int TotalVtxCount;

  external ImVector_ImDrawListPtr CmdLists;

  external ImVec2 DisplayPos;

  external ImVec2 DisplaySize;

  external ImVec2 FramebufferScale;

  external ffi.Pointer<ImGuiViewport> OwnerViewport;
}

final class ImVector_ImDrawListPtr extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Pointer<ImDrawList>> Data;
}

final class ImGuiViewport extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiViewportFlags()
  external int Flags;

  external ImVec2 Pos;

  external ImVec2 Size;

  external ImVec2 WorkPos;

  external ImVec2 WorkSize;

  @ffi.Float()
  external double DpiScale;

  @ImGuiID()
  external int ParentViewportId;

  external ffi.Pointer<ImDrawData> DrawData;

  external ffi.Pointer<ffi.Void> RendererUserData;

  external ffi.Pointer<ffi.Void> PlatformUserData;

  external ffi.Pointer<ffi.Void> PlatformHandle;

  external ffi.Pointer<ffi.Void> PlatformHandleRaw;

  @ffi.Bool()
  external bool PlatformWindowCreated;

  @ffi.Bool()
  external bool PlatformRequestMove;

  @ffi.Bool()
  external bool PlatformRequestResize;

  @ffi.Bool()
  external bool PlatformRequestClose;
}

typedef ImGuiID = ffi.UnsignedInt;
typedef DartImGuiID = int;
typedef ImGuiViewportFlags = ffi.Int;
typedef DartImGuiViewportFlags = int;

final class ImFontGlyphRangesBuilder extends ffi.Struct {
  external ImVector_ImU32 UsedChars;
}

final class ImVector_ImU32 extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImU32> Data;
}

final class ImColor extends ffi.Struct {
  external ImVec4 Value;
}

final class ImGuiContext extends ffi.Opaque {}

final class ImGuiIO extends ffi.Struct {
  @ImGuiConfigFlags()
  external int ConfigFlags;

  @ImGuiBackendFlags()
  external int BackendFlags;

  external ImVec2 DisplaySize;

  @ffi.Float()
  external double DeltaTime;

  @ffi.Float()
  external double IniSavingRate;

  external ffi.Pointer<ffi.Char> IniFilename;

  external ffi.Pointer<ffi.Char> LogFilename;

  external ffi.Pointer<ffi.Void> UserData;

  external ffi.Pointer<ImFontAtlas> Fonts;

  @ffi.Float()
  external double FontGlobalScale;

  @ffi.Bool()
  external bool FontAllowUserScaling;

  external ffi.Pointer<ImFont> FontDefault;

  external ImVec2 DisplayFramebufferScale;

  @ffi.Bool()
  external bool ConfigNavSwapGamepadButtons;

  @ffi.Bool()
  external bool ConfigNavMoveSetMousePos;

  @ffi.Bool()
  external bool ConfigNavCaptureKeyboard;

  @ffi.Bool()
  external bool ConfigNavEscapeClearFocusItem;

  @ffi.Bool()
  external bool ConfigNavEscapeClearFocusWindow;

  @ffi.Bool()
  external bool ConfigNavCursorVisibleAuto;

  @ffi.Bool()
  external bool ConfigNavCursorVisibleAlways;

  @ffi.Bool()
  external bool ConfigDockingNoSplit;

  @ffi.Bool()
  external bool ConfigDockingWithShift;

  @ffi.Bool()
  external bool ConfigDockingAlwaysTabBar;

  @ffi.Bool()
  external bool ConfigDockingTransparentPayload;

  @ffi.Bool()
  external bool ConfigViewportsNoAutoMerge;

  @ffi.Bool()
  external bool ConfigViewportsNoTaskBarIcon;

  @ffi.Bool()
  external bool ConfigViewportsNoDecoration;

  @ffi.Bool()
  external bool ConfigViewportsNoDefaultParent;

  @ffi.Bool()
  external bool MouseDrawCursor;

  @ffi.Bool()
  external bool ConfigMacOSXBehaviors;

  @ffi.Bool()
  external bool ConfigInputTrickleEventQueue;

  @ffi.Bool()
  external bool ConfigInputTextCursorBlink;

  @ffi.Bool()
  external bool ConfigInputTextEnterKeepActive;

  @ffi.Bool()
  external bool ConfigDragClickToInputText;

  @ffi.Bool()
  external bool ConfigWindowsResizeFromEdges;

  @ffi.Bool()
  external bool ConfigWindowsMoveFromTitleBarOnly;

  @ffi.Bool()
  external bool ConfigWindowsCopyContentsWithCtrlC;

  @ffi.Bool()
  external bool ConfigScrollbarScrollByPage;

  @ffi.Float()
  external double ConfigMemoryCompactTimer;

  @ffi.Float()
  external double MouseDoubleClickTime;

  @ffi.Float()
  external double MouseDoubleClickMaxDist;

  @ffi.Float()
  external double MouseDragThreshold;

  @ffi.Float()
  external double KeyRepeatDelay;

  @ffi.Float()
  external double KeyRepeatRate;

  @ffi.Bool()
  external bool ConfigErrorRecovery;

  @ffi.Bool()
  external bool ConfigErrorRecoveryEnableAssert;

  @ffi.Bool()
  external bool ConfigErrorRecoveryEnableDebugLog;

  @ffi.Bool()
  external bool ConfigErrorRecoveryEnableTooltip;

  @ffi.Bool()
  external bool ConfigDebugIsDebuggerPresent;

  @ffi.Bool()
  external bool ConfigDebugHighlightIdConflicts;

  @ffi.Bool()
  external bool ConfigDebugBeginReturnValueOnce;

  @ffi.Bool()
  external bool ConfigDebugBeginReturnValueLoop;

  @ffi.Bool()
  external bool ConfigDebugIgnoreFocusLoss;

  @ffi.Bool()
  external bool ConfigDebugIniSettings;

  external ffi.Pointer<ffi.Char> BackendPlatformName;

  external ffi.Pointer<ffi.Char> BackendRendererName;

  external ffi.Pointer<ffi.Void> BackendPlatformUserData;

  external ffi.Pointer<ffi.Void> BackendRendererUserData;

  external ffi.Pointer<ffi.Void> BackendLanguageUserData;

  @ffi.Bool()
  external bool WantCaptureMouse;

  @ffi.Bool()
  external bool WantCaptureKeyboard;

  @ffi.Bool()
  external bool WantTextInput;

  @ffi.Bool()
  external bool WantSetMousePos;

  @ffi.Bool()
  external bool WantSaveIniSettings;

  @ffi.Bool()
  external bool NavActive;

  @ffi.Bool()
  external bool NavVisible;

  @ffi.Float()
  external double Framerate;

  @ffi.Int()
  external int MetricsRenderVertices;

  @ffi.Int()
  external int MetricsRenderIndices;

  @ffi.Int()
  external int MetricsRenderWindows;

  @ffi.Int()
  external int MetricsActiveWindows;

  external ImVec2 MouseDelta;

  external ffi.Pointer<ImGuiContext> Ctx;

  external ImVec2 MousePos;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Bool> MouseDown;

  @ffi.Float()
  external double MouseWheel;

  @ffi.Float()
  external double MouseWheelH;

  @ffi.UnsignedInt()
  external int MouseSourceAsInt;

  ImGuiMouseSource get MouseSource =>
      ImGuiMouseSource.fromValue(MouseSourceAsInt);

  @ImGuiID()
  external int MouseHoveredViewport;

  @ffi.Bool()
  external bool KeyCtrl;

  @ffi.Bool()
  external bool KeyShift;

  @ffi.Bool()
  external bool KeyAlt;

  @ffi.Bool()
  external bool KeySuper;

  @ImGuiKeyChord()
  external int KeyMods;

  @ffi.Array.multi([154])
  external ffi.Array<ImGuiKeyData> KeysData;

  @ffi.Bool()
  external bool WantCaptureMouseUnlessPopupClose;

  external ImVec2 MousePosPrev;

  @ffi.Array.multi([5])
  external ffi.Array<ImVec2> MouseClickedPos;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Double> MouseClickedTime;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Bool> MouseClicked;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Bool> MouseDoubleClicked;

  @ffi.Array.multi([5])
  external ffi.Array<ImU16> MouseClickedCount;

  @ffi.Array.multi([5])
  external ffi.Array<ImU16> MouseClickedLastCount;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Bool> MouseReleased;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Bool> MouseDownOwned;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Bool> MouseDownOwnedUnlessPopupClose;

  @ffi.Bool()
  external bool MouseWheelRequestAxisSwap;

  @ffi.Bool()
  external bool MouseCtrlLeftAsRightClick;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Float> MouseDownDuration;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Float> MouseDownDurationPrev;

  @ffi.Array.multi([5])
  external ffi.Array<ImVec2> MouseDragMaxDistanceAbs;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.Float> MouseDragMaxDistanceSqr;

  @ffi.Float()
  external double PenPressure;

  @ffi.Bool()
  external bool AppFocusLost;

  @ffi.Bool()
  external bool AppAcceptingEvents;

  @ImWchar16()
  external int InputQueueSurrogate;

  external ImVector_ImWchar InputQueueCharacters;
}

typedef ImGuiConfigFlags = ffi.Int;
typedef DartImGuiConfigFlags = int;
typedef ImGuiBackendFlags = ffi.Int;
typedef DartImGuiBackendFlags = int;

enum ImGuiMouseSource {
  ImGuiMouseSource_Mouse(0),
  ImGuiMouseSource_TouchScreen(1),
  ImGuiMouseSource_Pen(2),
  ImGuiMouseSource_COUNT(3);

  final int value;
  const ImGuiMouseSource(this.value);

  static ImGuiMouseSource fromValue(int value) => switch (value) {
        0 => ImGuiMouseSource_Mouse,
        1 => ImGuiMouseSource_TouchScreen,
        2 => ImGuiMouseSource_Pen,
        3 => ImGuiMouseSource_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiMouseSource: $value"),
      };
}

typedef ImGuiKeyChord = ffi.Int;
typedef DartImGuiKeyChord = int;

final class ImGuiKeyData extends ffi.Struct {
  @ffi.Bool()
  external bool Down;

  @ffi.Float()
  external double DownDuration;

  @ffi.Float()
  external double DownDurationPrev;

  @ffi.Float()
  external double AnalogValue;
}

typedef ImU16 = ffi.UnsignedShort;
typedef DartImU16 = int;

final class ImGuiInputTextCallbackData extends ffi.Struct {
  external ffi.Pointer<ImGuiContext> Ctx;

  @ImGuiInputTextFlags()
  external int EventFlag;

  @ImGuiInputTextFlags()
  external int Flags;

  external ffi.Pointer<ffi.Void> UserData;

  @ImWchar()
  external int EventChar;

  @ffi.UnsignedInt()
  external int EventKeyAsInt;

  ImGuiKey get EventKey => ImGuiKey.fromValue(EventKeyAsInt);

  external ffi.Pointer<ffi.Char> Buf;

  @ffi.Int()
  external int BufTextLen;

  @ffi.Int()
  external int BufSize;

  @ffi.Bool()
  external bool BufDirty;

  @ffi.Int()
  external int CursorPos;

  @ffi.Int()
  external int SelectionStart;

  @ffi.Int()
  external int SelectionEnd;
}

typedef ImGuiInputTextFlags = ffi.Int;
typedef DartImGuiInputTextFlags = int;

enum ImGuiKey {
  ImGuiKey_None(0),
  ImGuiKey_NamedKey_BEGIN(512),
  ImGuiKey_LeftArrow(513),
  ImGuiKey_RightArrow(514),
  ImGuiKey_UpArrow(515),
  ImGuiKey_DownArrow(516),
  ImGuiKey_PageUp(517),
  ImGuiKey_PageDown(518),
  ImGuiKey_Home(519),
  ImGuiKey_End(520),
  ImGuiKey_Insert(521),
  ImGuiKey_Delete(522),
  ImGuiKey_Backspace(523),
  ImGuiKey_Space(524),
  ImGuiKey_Enter(525),
  ImGuiKey_Escape(526),
  ImGuiKey_LeftCtrl(527),
  ImGuiKey_LeftShift(528),
  ImGuiKey_LeftAlt(529),
  ImGuiKey_LeftSuper(530),
  ImGuiKey_RightCtrl(531),
  ImGuiKey_RightShift(532),
  ImGuiKey_RightAlt(533),
  ImGuiKey_RightSuper(534),
  ImGuiKey_Menu(535),
  ImGuiKey_0(536),
  ImGuiKey_1(537),
  ImGuiKey_2(538),
  ImGuiKey_3(539),
  ImGuiKey_4(540),
  ImGuiKey_5(541),
  ImGuiKey_6(542),
  ImGuiKey_7(543),
  ImGuiKey_8(544),
  ImGuiKey_9(545),
  ImGuiKey_A(546),
  ImGuiKey_B(547),
  ImGuiKey_C(548),
  ImGuiKey_D(549),
  ImGuiKey_E(550),
  ImGuiKey_F(551),
  ImGuiKey_G(552),
  ImGuiKey_H(553),
  ImGuiKey_I(554),
  ImGuiKey_J(555),
  ImGuiKey_K(556),
  ImGuiKey_L(557),
  ImGuiKey_M(558),
  ImGuiKey_N(559),
  ImGuiKey_O(560),
  ImGuiKey_P(561),
  ImGuiKey_Q(562),
  ImGuiKey_R(563),
  ImGuiKey_S(564),
  ImGuiKey_T(565),
  ImGuiKey_U(566),
  ImGuiKey_V(567),
  ImGuiKey_W(568),
  ImGuiKey_X(569),
  ImGuiKey_Y(570),
  ImGuiKey_Z(571),
  ImGuiKey_F1(572),
  ImGuiKey_F2(573),
  ImGuiKey_F3(574),
  ImGuiKey_F4(575),
  ImGuiKey_F5(576),
  ImGuiKey_F6(577),
  ImGuiKey_F7(578),
  ImGuiKey_F8(579),
  ImGuiKey_F9(580),
  ImGuiKey_F10(581),
  ImGuiKey_F11(582),
  ImGuiKey_F12(583),
  ImGuiKey_F13(584),
  ImGuiKey_F14(585),
  ImGuiKey_F15(586),
  ImGuiKey_F16(587),
  ImGuiKey_F17(588),
  ImGuiKey_F18(589),
  ImGuiKey_F19(590),
  ImGuiKey_F20(591),
  ImGuiKey_F21(592),
  ImGuiKey_F22(593),
  ImGuiKey_F23(594),
  ImGuiKey_F24(595),
  ImGuiKey_Apostrophe(596),
  ImGuiKey_Comma(597),
  ImGuiKey_Minus(598),
  ImGuiKey_Period(599),
  ImGuiKey_Slash(600),
  ImGuiKey_Semicolon(601),
  ImGuiKey_Equal(602),
  ImGuiKey_LeftBracket(603),
  ImGuiKey_Backslash(604),
  ImGuiKey_RightBracket(605),
  ImGuiKey_GraveAccent(606),
  ImGuiKey_CapsLock(607),
  ImGuiKey_ScrollLock(608),
  ImGuiKey_NumLock(609),
  ImGuiKey_PrintScreen(610),
  ImGuiKey_Pause(611),
  ImGuiKey_Keypad0(612),
  ImGuiKey_Keypad1(613),
  ImGuiKey_Keypad2(614),
  ImGuiKey_Keypad3(615),
  ImGuiKey_Keypad4(616),
  ImGuiKey_Keypad5(617),
  ImGuiKey_Keypad6(618),
  ImGuiKey_Keypad7(619),
  ImGuiKey_Keypad8(620),
  ImGuiKey_Keypad9(621),
  ImGuiKey_KeypadDecimal(622),
  ImGuiKey_KeypadDivide(623),
  ImGuiKey_KeypadMultiply(624),
  ImGuiKey_KeypadSubtract(625),
  ImGuiKey_KeypadAdd(626),
  ImGuiKey_KeypadEnter(627),
  ImGuiKey_KeypadEqual(628),
  ImGuiKey_AppBack(629),
  ImGuiKey_AppForward(630),
  ImGuiKey_GamepadStart(631),
  ImGuiKey_GamepadBack(632),
  ImGuiKey_GamepadFaceLeft(633),
  ImGuiKey_GamepadFaceRight(634),
  ImGuiKey_GamepadFaceUp(635),
  ImGuiKey_GamepadFaceDown(636),
  ImGuiKey_GamepadDpadLeft(637),
  ImGuiKey_GamepadDpadRight(638),
  ImGuiKey_GamepadDpadUp(639),
  ImGuiKey_GamepadDpadDown(640),
  ImGuiKey_GamepadL1(641),
  ImGuiKey_GamepadR1(642),
  ImGuiKey_GamepadL2(643),
  ImGuiKey_GamepadR2(644),
  ImGuiKey_GamepadL3(645),
  ImGuiKey_GamepadR3(646),
  ImGuiKey_GamepadLStickLeft(647),
  ImGuiKey_GamepadLStickRight(648),
  ImGuiKey_GamepadLStickUp(649),
  ImGuiKey_GamepadLStickDown(650),
  ImGuiKey_GamepadRStickLeft(651),
  ImGuiKey_GamepadRStickRight(652),
  ImGuiKey_GamepadRStickUp(653),
  ImGuiKey_GamepadRStickDown(654),
  ImGuiKey_MouseLeft(655),
  ImGuiKey_MouseRight(656),
  ImGuiKey_MouseMiddle(657),
  ImGuiKey_MouseX1(658),
  ImGuiKey_MouseX2(659),
  ImGuiKey_MouseWheelX(660),
  ImGuiKey_MouseWheelY(661),
  ImGuiKey_ReservedForModCtrl(662),
  ImGuiKey_ReservedForModShift(663),
  ImGuiKey_ReservedForModAlt(664),
  ImGuiKey_ReservedForModSuper(665),
  ImGuiKey_NamedKey_END(666),
  ImGuiMod_Ctrl(4096),
  ImGuiMod_Shift(8192),
  ImGuiMod_Alt(16384),
  ImGuiMod_Super(32768),
  ImGuiMod_Mask_(61440),
  ImGuiKey_NamedKey_COUNT(154);

  static const ImGuiKey_Tab = ImGuiKey_NamedKey_BEGIN;
  static const ImGuiMod_None = ImGuiKey_None;

  final int value;
  const ImGuiKey(this.value);

  static ImGuiKey fromValue(int value) => switch (value) {
        0 => ImGuiKey_None,
        512 => ImGuiKey_NamedKey_BEGIN,
        513 => ImGuiKey_LeftArrow,
        514 => ImGuiKey_RightArrow,
        515 => ImGuiKey_UpArrow,
        516 => ImGuiKey_DownArrow,
        517 => ImGuiKey_PageUp,
        518 => ImGuiKey_PageDown,
        519 => ImGuiKey_Home,
        520 => ImGuiKey_End,
        521 => ImGuiKey_Insert,
        522 => ImGuiKey_Delete,
        523 => ImGuiKey_Backspace,
        524 => ImGuiKey_Space,
        525 => ImGuiKey_Enter,
        526 => ImGuiKey_Escape,
        527 => ImGuiKey_LeftCtrl,
        528 => ImGuiKey_LeftShift,
        529 => ImGuiKey_LeftAlt,
        530 => ImGuiKey_LeftSuper,
        531 => ImGuiKey_RightCtrl,
        532 => ImGuiKey_RightShift,
        533 => ImGuiKey_RightAlt,
        534 => ImGuiKey_RightSuper,
        535 => ImGuiKey_Menu,
        536 => ImGuiKey_0,
        537 => ImGuiKey_1,
        538 => ImGuiKey_2,
        539 => ImGuiKey_3,
        540 => ImGuiKey_4,
        541 => ImGuiKey_5,
        542 => ImGuiKey_6,
        543 => ImGuiKey_7,
        544 => ImGuiKey_8,
        545 => ImGuiKey_9,
        546 => ImGuiKey_A,
        547 => ImGuiKey_B,
        548 => ImGuiKey_C,
        549 => ImGuiKey_D,
        550 => ImGuiKey_E,
        551 => ImGuiKey_F,
        552 => ImGuiKey_G,
        553 => ImGuiKey_H,
        554 => ImGuiKey_I,
        555 => ImGuiKey_J,
        556 => ImGuiKey_K,
        557 => ImGuiKey_L,
        558 => ImGuiKey_M,
        559 => ImGuiKey_N,
        560 => ImGuiKey_O,
        561 => ImGuiKey_P,
        562 => ImGuiKey_Q,
        563 => ImGuiKey_R,
        564 => ImGuiKey_S,
        565 => ImGuiKey_T,
        566 => ImGuiKey_U,
        567 => ImGuiKey_V,
        568 => ImGuiKey_W,
        569 => ImGuiKey_X,
        570 => ImGuiKey_Y,
        571 => ImGuiKey_Z,
        572 => ImGuiKey_F1,
        573 => ImGuiKey_F2,
        574 => ImGuiKey_F3,
        575 => ImGuiKey_F4,
        576 => ImGuiKey_F5,
        577 => ImGuiKey_F6,
        578 => ImGuiKey_F7,
        579 => ImGuiKey_F8,
        580 => ImGuiKey_F9,
        581 => ImGuiKey_F10,
        582 => ImGuiKey_F11,
        583 => ImGuiKey_F12,
        584 => ImGuiKey_F13,
        585 => ImGuiKey_F14,
        586 => ImGuiKey_F15,
        587 => ImGuiKey_F16,
        588 => ImGuiKey_F17,
        589 => ImGuiKey_F18,
        590 => ImGuiKey_F19,
        591 => ImGuiKey_F20,
        592 => ImGuiKey_F21,
        593 => ImGuiKey_F22,
        594 => ImGuiKey_F23,
        595 => ImGuiKey_F24,
        596 => ImGuiKey_Apostrophe,
        597 => ImGuiKey_Comma,
        598 => ImGuiKey_Minus,
        599 => ImGuiKey_Period,
        600 => ImGuiKey_Slash,
        601 => ImGuiKey_Semicolon,
        602 => ImGuiKey_Equal,
        603 => ImGuiKey_LeftBracket,
        604 => ImGuiKey_Backslash,
        605 => ImGuiKey_RightBracket,
        606 => ImGuiKey_GraveAccent,
        607 => ImGuiKey_CapsLock,
        608 => ImGuiKey_ScrollLock,
        609 => ImGuiKey_NumLock,
        610 => ImGuiKey_PrintScreen,
        611 => ImGuiKey_Pause,
        612 => ImGuiKey_Keypad0,
        613 => ImGuiKey_Keypad1,
        614 => ImGuiKey_Keypad2,
        615 => ImGuiKey_Keypad3,
        616 => ImGuiKey_Keypad4,
        617 => ImGuiKey_Keypad5,
        618 => ImGuiKey_Keypad6,
        619 => ImGuiKey_Keypad7,
        620 => ImGuiKey_Keypad8,
        621 => ImGuiKey_Keypad9,
        622 => ImGuiKey_KeypadDecimal,
        623 => ImGuiKey_KeypadDivide,
        624 => ImGuiKey_KeypadMultiply,
        625 => ImGuiKey_KeypadSubtract,
        626 => ImGuiKey_KeypadAdd,
        627 => ImGuiKey_KeypadEnter,
        628 => ImGuiKey_KeypadEqual,
        629 => ImGuiKey_AppBack,
        630 => ImGuiKey_AppForward,
        631 => ImGuiKey_GamepadStart,
        632 => ImGuiKey_GamepadBack,
        633 => ImGuiKey_GamepadFaceLeft,
        634 => ImGuiKey_GamepadFaceRight,
        635 => ImGuiKey_GamepadFaceUp,
        636 => ImGuiKey_GamepadFaceDown,
        637 => ImGuiKey_GamepadDpadLeft,
        638 => ImGuiKey_GamepadDpadRight,
        639 => ImGuiKey_GamepadDpadUp,
        640 => ImGuiKey_GamepadDpadDown,
        641 => ImGuiKey_GamepadL1,
        642 => ImGuiKey_GamepadR1,
        643 => ImGuiKey_GamepadL2,
        644 => ImGuiKey_GamepadR2,
        645 => ImGuiKey_GamepadL3,
        646 => ImGuiKey_GamepadR3,
        647 => ImGuiKey_GamepadLStickLeft,
        648 => ImGuiKey_GamepadLStickRight,
        649 => ImGuiKey_GamepadLStickUp,
        650 => ImGuiKey_GamepadLStickDown,
        651 => ImGuiKey_GamepadRStickLeft,
        652 => ImGuiKey_GamepadRStickRight,
        653 => ImGuiKey_GamepadRStickUp,
        654 => ImGuiKey_GamepadRStickDown,
        655 => ImGuiKey_MouseLeft,
        656 => ImGuiKey_MouseRight,
        657 => ImGuiKey_MouseMiddle,
        658 => ImGuiKey_MouseX1,
        659 => ImGuiKey_MouseX2,
        660 => ImGuiKey_MouseWheelX,
        661 => ImGuiKey_MouseWheelY,
        662 => ImGuiKey_ReservedForModCtrl,
        663 => ImGuiKey_ReservedForModShift,
        664 => ImGuiKey_ReservedForModAlt,
        665 => ImGuiKey_ReservedForModSuper,
        666 => ImGuiKey_NamedKey_END,
        4096 => ImGuiMod_Ctrl,
        8192 => ImGuiMod_Shift,
        16384 => ImGuiMod_Alt,
        32768 => ImGuiMod_Super,
        61440 => ImGuiMod_Mask_,
        154 => ImGuiKey_NamedKey_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiKey: $value"),
      };

  @override
  String toString() {
    if (this == ImGuiKey_None)
      return "ImGuiKey.ImGuiKey_None, ImGuiKey.ImGuiMod_None";
    if (this == ImGuiKey_NamedKey_BEGIN)
      return "ImGuiKey.ImGuiKey_NamedKey_BEGIN, ImGuiKey.ImGuiKey_Tab";
    return super.toString();
  }
}

final class ImGuiListClipper extends ffi.Struct {
  external ffi.Pointer<ImGuiContext> Ctx;

  @ffi.Int()
  external int DisplayStart;

  @ffi.Int()
  external int DisplayEnd;

  @ffi.Int()
  external int ItemsCount;

  @ffi.Float()
  external double ItemsHeight;

  @ffi.Float()
  external double StartPosY;

  @ffi.Double()
  external double StartSeekOffsetY;

  external ffi.Pointer<ffi.Void> TempData;
}

final class ImGuiMultiSelectIO extends ffi.Struct {
  external ImVector_ImGuiSelectionRequest Requests;

  @ImGuiSelectionUserData()
  external int RangeSrcItem;

  @ImGuiSelectionUserData()
  external int NavIdItem;

  @ffi.Bool()
  external bool NavIdSelected;

  @ffi.Bool()
  external bool RangeSrcReset;

  @ffi.Int()
  external int ItemsCount;
}

final class ImVector_ImGuiSelectionRequest extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiSelectionRequest> Data;
}

final class ImGuiSelectionRequest extends ffi.Struct {
  @ffi.UnsignedInt()
  external int TypeAsInt;

  ImGuiSelectionRequestType get Type =>
      ImGuiSelectionRequestType.fromValue(TypeAsInt);

  @ffi.Bool()
  external bool Selected;

  @ImS8()
  external int RangeDirection;

  @ImGuiSelectionUserData()
  external int RangeFirstItem;

  @ImGuiSelectionUserData()
  external int RangeLastItem;
}

enum ImGuiSelectionRequestType {
  ImGuiSelectionRequestType_None(0),
  ImGuiSelectionRequestType_SetAll(1),
  ImGuiSelectionRequestType_SetRange(2);

  final int value;
  const ImGuiSelectionRequestType(this.value);

  static ImGuiSelectionRequestType fromValue(int value) => switch (value) {
        0 => ImGuiSelectionRequestType_None,
        1 => ImGuiSelectionRequestType_SetAll,
        2 => ImGuiSelectionRequestType_SetRange,
        _ => throw ArgumentError(
            "Unknown value for ImGuiSelectionRequestType: $value"),
      };
}

typedef ImS8 = ffi.SignedChar;
typedef DartImS8 = int;
typedef ImGuiSelectionUserData = ImS64;
typedef ImS64 = ffi.LongLong;
typedef DartImS64 = int;

final class ImGuiOnceUponAFrame extends ffi.Struct {
  @ffi.Int()
  external int RefFrame;
}

final class ImGuiPayload extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Data;

  @ffi.Int()
  external int DataSize;

  @ImGuiID()
  external int SourceId;

  @ImGuiID()
  external int SourceParentId;

  @ffi.Int()
  external int DataFrameCount;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.Char> DataType;

  @ffi.Bool()
  external bool Preview;

  @ffi.Bool()
  external bool Delivery;
}

final class ImGuiPlatformIO extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImGuiContext> ctx)>>
      Platform_GetClipboardTextFn;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ImGuiContext> ctx, ffi.Pointer<ffi.Char> text)>>
      Platform_SetClipboardTextFn;

  external ffi.Pointer<ffi.Void> Platform_ClipboardUserData;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<ImGuiContext> ctx, ffi.Pointer<ffi.Char> path)>>
      Platform_OpenInShellFn;

  external ffi.Pointer<ffi.Void> Platform_OpenInShellUserData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiViewport> viewport,
              ffi.Pointer<ImGuiPlatformImeData> data)>> Platform_SetImeDataFn;

  external ffi.Pointer<ffi.Void> Platform_ImeUserData;

  @ImWchar()
  external int Platform_LocaleDecimalPoint;

  external ffi.Pointer<ffi.Void> Renderer_RenderState;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_CreateWindow;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_DestroyWindow;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_ShowWindow;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiViewport> vp, ImVec2 pos)>>
      Platform_SetWindowPos;

  external ffi.Pointer<
          ffi.NativeFunction<ImVec2 Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_GetWindowPos;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiViewport> vp, ImVec2 size)>>
      Platform_SetWindowSize;

  external ffi.Pointer<
          ffi.NativeFunction<ImVec2 Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_GetWindowSize;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_SetWindowFocus;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_GetWindowFocus;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_GetWindowMinimized;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ImGuiViewport> vp, ffi.Pointer<ffi.Char> str)>>
      Platform_SetWindowTitle;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ImGuiViewport> vp, ffi.Float alpha)>>
      Platform_SetWindowAlpha;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_UpdateWindow;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
              ffi.Pointer<ffi.Void> render_arg)>> Platform_RenderWindow;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
              ffi.Pointer<ffi.Void> render_arg)>> Platform_SwapBuffers;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_GetWindowDpiScale;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_OnChangedViewport;

  external ffi.Pointer<
          ffi.NativeFunction<ImVec4 Function(ffi.Pointer<ImGuiViewport> vp)>>
      Platform_GetWindowWorkAreaInsets;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ImGuiViewport> vp,
              ImU64 vk_inst,
              ffi.Pointer<ffi.Void> vk_allocators,
              ffi.Pointer<ImU64> out_vk_surface)>> Platform_CreateVkSurface;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Renderer_CreateWindow;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImGuiViewport> vp)>>
      Renderer_DestroyWindow;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ImGuiViewport> vp, ImVec2 size)>>
      Renderer_SetWindowSize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
              ffi.Pointer<ffi.Void> render_arg)>> Renderer_RenderWindow;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiViewport> vp,
              ffi.Pointer<ffi.Void> render_arg)>> Renderer_SwapBuffers;

  external ImVector_ImGuiPlatformMonitor Monitors;

  external ImVector_ImGuiViewportPtr Viewports;
}

final class ImGuiPlatformImeData extends ffi.Struct {
  @ffi.Bool()
  external bool WantVisible;

  external ImVec2 InputPos;

  @ffi.Float()
  external double InputLineHeight;
}

final class ImVector_ImGuiPlatformMonitor extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiPlatformMonitor> Data;
}

final class ImGuiPlatformMonitor extends ffi.Struct {
  external ImVec2 MainPos;

  external ImVec2 MainSize;

  external ImVec2 WorkPos;

  external ImVec2 WorkSize;

  @ffi.Float()
  external double DpiScale;

  external ffi.Pointer<ffi.Void> PlatformHandle;
}

final class ImVector_ImGuiViewportPtr extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Pointer<ImGuiViewport>> Data;
}

final class ImGuiSelectionBasicStorage extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Bool()
  external bool PreserveOrder;

  external ffi.Pointer<ffi.Void> UserData;

  external ffi.Pointer<
          ffi.NativeFunction<
              ImGuiID Function(
                  ffi.Pointer<ImGuiSelectionBasicStorage> self, ffi.Int idx)>>
      AdapterIndexToStorageId;

  @ffi.Int()
  external int _SelectionOrder;

  external ImGuiStorage _Storage;
}

final class ImGuiStorage extends ffi.Struct {
  external ImVector_ImGuiStoragePair Data;
}

final class ImVector_ImGuiStoragePair extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiStoragePair> Data;
}

final class ImGuiStoragePair extends ffi.Struct {
  @ImGuiID()
  external int key;

  external UnnamedUnion2 unnamed;
}

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Int()
  external int val_i;

  @ffi.Float()
  external double val_f;

  external ffi.Pointer<ffi.Void> val_p;
}

final class ImGuiSelectionExternalStorage extends ffi.Struct {
  external ffi.Pointer<ffi.Void> UserData;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiSelectionExternalStorage> self,
              ffi.Int idx, ffi.Bool selected)>> AdapterSetItemSelected;
}

final class ImGuiSizeCallbackData extends ffi.Struct {
  external ffi.Pointer<ffi.Void> UserData;

  external ImVec2 Pos;

  external ImVec2 CurrentSize;

  external ImVec2 DesiredSize;
}

final class ImGuiStyle extends ffi.Struct {
  @ffi.Float()
  external double Alpha;

  @ffi.Float()
  external double DisabledAlpha;

  external ImVec2 WindowPadding;

  @ffi.Float()
  external double WindowRounding;

  @ffi.Float()
  external double WindowBorderSize;

  external ImVec2 WindowMinSize;

  external ImVec2 WindowTitleAlign;

  @ffi.Int()
  external int WindowMenuButtonPositionAsInt;

  ImGuiDir get WindowMenuButtonPosition =>
      ImGuiDir.fromValue(WindowMenuButtonPositionAsInt);

  @ffi.Float()
  external double ChildRounding;

  @ffi.Float()
  external double ChildBorderSize;

  @ffi.Float()
  external double PopupRounding;

  @ffi.Float()
  external double PopupBorderSize;

  external ImVec2 FramePadding;

  @ffi.Float()
  external double FrameRounding;

  @ffi.Float()
  external double FrameBorderSize;

  external ImVec2 ItemSpacing;

  external ImVec2 ItemInnerSpacing;

  external ImVec2 CellPadding;

  external ImVec2 TouchExtraPadding;

  @ffi.Float()
  external double IndentSpacing;

  @ffi.Float()
  external double ColumnsMinSpacing;

  @ffi.Float()
  external double ScrollbarSize;

  @ffi.Float()
  external double ScrollbarRounding;

  @ffi.Float()
  external double GrabMinSize;

  @ffi.Float()
  external double GrabRounding;

  @ffi.Float()
  external double LogSliderDeadzone;

  @ffi.Float()
  external double TabRounding;

  @ffi.Float()
  external double TabBorderSize;

  @ffi.Float()
  external double TabMinWidthForCloseButton;

  @ffi.Float()
  external double TabBarBorderSize;

  @ffi.Float()
  external double TabBarOverlineSize;

  @ffi.Float()
  external double TableAngledHeadersAngle;

  external ImVec2 TableAngledHeadersTextAlign;

  @ffi.Int()
  external int ColorButtonPositionAsInt;

  ImGuiDir get ColorButtonPosition =>
      ImGuiDir.fromValue(ColorButtonPositionAsInt);

  external ImVec2 ButtonTextAlign;

  external ImVec2 SelectableTextAlign;

  @ffi.Float()
  external double SeparatorTextBorderSize;

  external ImVec2 SeparatorTextAlign;

  external ImVec2 SeparatorTextPadding;

  external ImVec2 DisplayWindowPadding;

  external ImVec2 DisplaySafeAreaPadding;

  @ffi.Float()
  external double DockingSeparatorSize;

  @ffi.Float()
  external double MouseCursorScale;

  @ffi.Bool()
  external bool AntiAliasedLines;

  @ffi.Bool()
  external bool AntiAliasedLinesUseTex;

  @ffi.Bool()
  external bool AntiAliasedFill;

  @ffi.Float()
  external double CurveTessellationTol;

  @ffi.Float()
  external double CircleTessellationMaxError;

  @ffi.Array.multi([58])
  external ffi.Array<ImVec4> Colors;

  @ffi.Float()
  external double HoverStationaryDelay;

  @ffi.Float()
  external double HoverDelayShort;

  @ffi.Float()
  external double HoverDelayNormal;

  @ImGuiHoveredFlags()
  external int HoverFlagsForTooltipMouse;

  @ImGuiHoveredFlags()
  external int HoverFlagsForTooltipNav;
}

enum ImGuiDir {
  ImGuiDir_None(-1),
  ImGuiDir_Left(0),
  ImGuiDir_Right(1),
  ImGuiDir_Up(2),
  ImGuiDir_Down(3),
  ImGuiDir_COUNT(4);

  final int value;
  const ImGuiDir(this.value);

  static ImGuiDir fromValue(int value) => switch (value) {
        -1 => ImGuiDir_None,
        0 => ImGuiDir_Left,
        1 => ImGuiDir_Right,
        2 => ImGuiDir_Up,
        3 => ImGuiDir_Down,
        4 => ImGuiDir_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiDir: $value"),
      };
}

typedef ImGuiHoveredFlags = ffi.Int;
typedef DartImGuiHoveredFlags = int;

final class ImGuiTableSortSpecs extends ffi.Struct {
  external ffi.Pointer<ImGuiTableColumnSortSpecs> Specs;

  @ffi.Int()
  external int SpecsCount;

  @ffi.Bool()
  external bool SpecsDirty;
}

final class ImGuiTableColumnSortSpecs extends ffi.Struct {
  @ImGuiID()
  external int ColumnUserID;

  @ImS16()
  external int ColumnIndex;

  @ImS16()
  external int SortOrder;

  @ffi.UnsignedInt()
  external int SortDirectionAsInt;

  ImGuiSortDirection get SortDirection =>
      ImGuiSortDirection.fromValue(SortDirectionAsInt);
}

typedef ImS16 = ffi.Short;
typedef DartImS16 = int;

enum ImGuiSortDirection {
  ImGuiSortDirection_None(0),
  ImGuiSortDirection_Ascending(1),
  ImGuiSortDirection_Descending(2);

  final int value;
  const ImGuiSortDirection(this.value);

  static ImGuiSortDirection fromValue(int value) => switch (value) {
        0 => ImGuiSortDirection_None,
        1 => ImGuiSortDirection_Ascending,
        2 => ImGuiSortDirection_Descending,
        _ =>
          throw ArgumentError("Unknown value for ImGuiSortDirection: $value"),
      };
}

final class ImGuiTextBuffer extends ffi.Struct {
  external ImVector_char Buf;
}

final class ImVector_char extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Char> Data;
}

final class ImGuiTextFilter extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> InputBuf;

  external ImVector_ImGuiTextRange Filters;

  @ffi.Int()
  external int CountGrep;
}

final class ImVector_ImGuiTextRange extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTextRange> Data;
}

final class ImGuiTextRange extends ffi.Struct {
  external ffi.Pointer<ffi.Char> b;

  external ffi.Pointer<ffi.Char> e;
}

final class ImGuiWindowClass extends ffi.Struct {
  @ImGuiID()
  external int ClassId;

  @ImGuiID()
  external int ParentViewportId;

  @ImGuiID()
  external int FocusRouteParentWindowId;

  @ImGuiViewportFlags()
  external int ViewportFlagsOverrideSet;

  @ImGuiViewportFlags()
  external int ViewportFlagsOverrideClear;

  @ImGuiTabItemFlags()
  external int TabItemFlagsOverrideSet;

  @ImGuiDockNodeFlags()
  external int DockNodeFlagsOverrideSet;

  @ffi.Bool()
  external bool DockingAlwaysTabBar;

  @ffi.Bool()
  external bool DockingAllowUnclassed;
}

typedef ImGuiTabItemFlags = ffi.Int;
typedef DartImGuiTabItemFlags = int;
typedef ImGuiDockNodeFlags = ffi.Int;
typedef DartImGuiDockNodeFlags = int;

final class ImBitVector extends ffi.Struct {
  external ImVector_ImU32 Storage;
}

final class ImRect extends ffi.Struct {
  external ImVec2 Min;

  external ImVec2 Max;
}

final class ImDrawDataBuilder extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ImVector_ImDrawListPtr>> Layers;

  external ImVector_ImDrawListPtr LayerData1;
}

final class ImGuiBoxSelectState extends ffi.Opaque {}

final class ImGuiColorMod extends ffi.Struct {
  @ImGuiCol()
  external int Col;

  external ImVec4 BackupValue;
}

typedef ImGuiCol = ffi.Int;
typedef DartImGuiCol = int;

final class ImGuiContextHook extends ffi.Struct {
  @ImGuiID()
  external int HookId;

  @ffi.UnsignedInt()
  external int TypeAsInt;

  ImGuiContextHookType get Type => ImGuiContextHookType.fromValue(TypeAsInt);

  @ImGuiID()
  external int Owner;

  external ImGuiContextHookCallback Callback;

  external ffi.Pointer<ffi.Void> UserData;
}

enum ImGuiContextHookType {
  ImGuiContextHookType_NewFramePre(0),
  ImGuiContextHookType_NewFramePost(1),
  ImGuiContextHookType_EndFramePre(2),
  ImGuiContextHookType_EndFramePost(3),
  ImGuiContextHookType_RenderPre(4),
  ImGuiContextHookType_RenderPost(5),
  ImGuiContextHookType_Shutdown(6),
  ImGuiContextHookType_PendingRemoval_(7);

  final int value;
  const ImGuiContextHookType(this.value);

  static ImGuiContextHookType fromValue(int value) => switch (value) {
        0 => ImGuiContextHookType_NewFramePre,
        1 => ImGuiContextHookType_NewFramePost,
        2 => ImGuiContextHookType_EndFramePre,
        3 => ImGuiContextHookType_EndFramePost,
        4 => ImGuiContextHookType_RenderPre,
        5 => ImGuiContextHookType_RenderPost,
        6 => ImGuiContextHookType_Shutdown,
        7 => ImGuiContextHookType_PendingRemoval_,
        _ =>
          throw ArgumentError("Unknown value for ImGuiContextHookType: $value"),
      };
}

typedef ImGuiContextHookCallback
    = ffi.Pointer<ffi.NativeFunction<ImGuiContextHookCallbackFunction>>;
typedef ImGuiContextHookCallbackFunction = ffi.Void Function(
    ffi.Pointer<ImGuiContext> ctx, ffi.Pointer<ImGuiContextHook> hook);
typedef DartImGuiContextHookCallbackFunction = void Function(
    ffi.Pointer<ImGuiContext> ctx, ffi.Pointer<ImGuiContextHook> hook);

final class ImGuiDataVarInfo extends ffi.Struct {
  @ImGuiDataType()
  external int Type;

  @ImU32()
  external int Count;

  @ImU32()
  external int Offset;
}

typedef ImGuiDataType = ffi.Int;
typedef DartImGuiDataType = int;

final class ImGuiDataTypeInfo extends ffi.Struct {
  @ffi.Size()
  external int Size;

  external ffi.Pointer<ffi.Char> Name;

  external ffi.Pointer<ffi.Char> PrintFmt;

  external ffi.Pointer<ffi.Char> ScanFmt;
}

final class ImGuiDockContext extends ffi.Struct {
  external ImGuiStorage Nodes;

  external ImVector_ImGuiDockRequest Requests;

  external ImVector_ImGuiDockNodeSettings NodesSettings;

  @ffi.Bool()
  external bool WantFullRebuild;
}

final class ImVector_ImGuiDockRequest extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiDockRequest> Data;
}

final class ImGuiDockRequest extends ffi.Opaque {}

final class ImVector_ImGuiDockNodeSettings extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiDockNodeSettings> Data;
}

final class ImGuiDockNodeSettings extends ffi.Opaque {}

final class ImGuiDockNode extends ffi.Opaque {}

final class ImGuiErrorRecoveryState extends ffi.Struct {
  @ffi.Short()
  external int SizeOfWindowStack;

  @ffi.Short()
  external int SizeOfIDStack;

  @ffi.Short()
  external int SizeOfTreeStack;

  @ffi.Short()
  external int SizeOfColorStack;

  @ffi.Short()
  external int SizeOfStyleVarStack;

  @ffi.Short()
  external int SizeOfFontStack;

  @ffi.Short()
  external int SizeOfFocusScopeStack;

  @ffi.Short()
  external int SizeOfGroupStack;

  @ffi.Short()
  external int SizeOfItemFlagsStack;

  @ffi.Short()
  external int SizeOfBeginPopupStack;

  @ffi.Short()
  external int SizeOfDisabledStack;
}

final class ImGuiGroupData extends ffi.Struct {
  @ImGuiID()
  external int WindowID;

  external ImVec2 BackupCursorPos;

  external ImVec2 BackupCursorMaxPos;

  external ImVec2 BackupCursorPosPrevLine;

  external ImVec1 BackupIndent;

  external ImVec1 BackupGroupOffset;

  external ImVec2 BackupCurrLineSize;

  @ffi.Float()
  external double BackupCurrLineTextBaseOffset;

  @ImGuiID()
  external int BackupActiveIdIsAlive;

  @ffi.Bool()
  external bool BackupActiveIdPreviousFrameIsAlive;

  @ffi.Bool()
  external bool BackupHoveredIdIsAlive;

  @ffi.Bool()
  external bool BackupIsSameLine;

  @ffi.Bool()
  external bool EmitItem;
}

final class ImVec1 extends ffi.Struct {
  @ffi.Float()
  external double x;
}

final class ImGuiInputTextState extends ffi.Struct {
  external ffi.Pointer<ImGuiContext> Ctx;

  external ffi.Pointer<ImStbTexteditState> Stb;

  @ImGuiID()
  external int ID;

  @ffi.Int()
  external int TextLen;

  external ImVector_char TextA;

  external ImVector_char TextToRevertTo;

  external ImVector_char CallbackTextBackup;

  @ffi.Int()
  external int BufCapacity;

  external ImVec2 Scroll;

  @ffi.Float()
  external double CursorAnim;

  @ffi.Bool()
  external bool CursorFollow;

  @ffi.Bool()
  external bool SelectedAllMouseLock;

  @ffi.Bool()
  external bool Edited;

  @ImGuiInputTextFlags()
  external int Flags;

  @ffi.Bool()
  external bool ReloadUserBuf;

  @ffi.Int()
  external int ReloadSelectionStart;

  @ffi.Int()
  external int ReloadSelectionEnd;
}

typedef ImStbTexteditState = STB_TexteditState;

final class STB_TexteditState extends ffi.Opaque {}

final class ImGuiInputTextDeactivateData extends ffi.Opaque {}

final class ImGuiLastItemData extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiItemFlags()
  external int ItemFlags;

  @ImGuiItemStatusFlags()
  external int StatusFlags;

  external ImRect Rect;

  external ImRect NavRect;

  external ImRect DisplayRect;

  external ImRect ClipRect;

  @ImGuiKeyChord()
  external int Shortcut;
}

typedef ImGuiItemFlags = ffi.Int;
typedef DartImGuiItemFlags = int;
typedef ImGuiItemStatusFlags = ffi.Int;
typedef DartImGuiItemStatusFlags = int;

final class ImGuiLocEntry extends ffi.Struct {
  @ffi.UnsignedInt()
  external int KeyAsInt;

  ImGuiLocKey get Key => ImGuiLocKey.fromValue(KeyAsInt);

  external ffi.Pointer<ffi.Char> Text;
}

enum ImGuiLocKey {
  ImGuiLocKey_VersionStr(0),
  ImGuiLocKey_TableSizeOne(1),
  ImGuiLocKey_TableSizeAllFit(2),
  ImGuiLocKey_TableSizeAllDefault(3),
  ImGuiLocKey_TableResetOrder(4),
  ImGuiLocKey_WindowingMainMenuBar(5),
  ImGuiLocKey_WindowingPopup(6),
  ImGuiLocKey_WindowingUntitled(7),
  ImGuiLocKey_OpenLink_s(8),
  ImGuiLocKey_CopyLink(9),
  ImGuiLocKey_DockingHideTabBar(10),
  ImGuiLocKey_DockingHoldShiftToDock(11),
  ImGuiLocKey_DockingDragToUndockOrMoveNode(12),
  ImGuiLocKey_COUNT(13);

  final int value;
  const ImGuiLocKey(this.value);

  static ImGuiLocKey fromValue(int value) => switch (value) {
        0 => ImGuiLocKey_VersionStr,
        1 => ImGuiLocKey_TableSizeOne,
        2 => ImGuiLocKey_TableSizeAllFit,
        3 => ImGuiLocKey_TableSizeAllDefault,
        4 => ImGuiLocKey_TableResetOrder,
        5 => ImGuiLocKey_WindowingMainMenuBar,
        6 => ImGuiLocKey_WindowingPopup,
        7 => ImGuiLocKey_WindowingUntitled,
        8 => ImGuiLocKey_OpenLink_s,
        9 => ImGuiLocKey_CopyLink,
        10 => ImGuiLocKey_DockingHideTabBar,
        11 => ImGuiLocKey_DockingHoldShiftToDock,
        12 => ImGuiLocKey_DockingDragToUndockOrMoveNode,
        13 => ImGuiLocKey_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiLocKey: $value"),
      };
}

final class ImGuiMenuColumns extends ffi.Struct {
  @ImU32()
  external int TotalWidth;

  @ImU32()
  external int NextTotalWidth;

  @ImU16()
  external int Spacing;

  @ImU16()
  external int OffsetIcon;

  @ImU16()
  external int OffsetLabel;

  @ImU16()
  external int OffsetShortcut;

  @ImU16()
  external int OffsetMark;

  @ffi.Array.multi([4])
  external ffi.Array<ImU16> Widths;
}

final class ImGuiMultiSelectState extends ffi.Struct {
  external ffi.Pointer<ImGuiWindow> Window;

  @ImGuiID()
  external int ID;

  @ffi.Int()
  external int LastFrameActive;

  @ffi.Int()
  external int LastSelectionSize;

  @ImS8()
  external int RangeSelected;

  @ImS8()
  external int NavIdSelected;

  @ImGuiSelectionUserData()
  external int RangeSrcItem;

  @ImGuiSelectionUserData()
  external int NavIdItem;
}

final class ImGuiWindow extends ffi.Opaque {}

final class ImGuiMultiSelectTempData extends ffi.Struct {
  external ImGuiMultiSelectIO IO;

  external ffi.Pointer<ImGuiMultiSelectState> Storage;

  @ImGuiID()
  external int FocusScopeId;

  @ImGuiMultiSelectFlags()
  external int Flags;

  external ImVec2 ScopeRectMin;

  external ImVec2 BackupCursorMaxPos;

  @ImGuiSelectionUserData()
  external int LastSubmittedItem;

  @ImGuiID()
  external int BoxSelectId;

  @ImGuiKeyChord()
  external int KeyMods;

  @ImS8()
  external int LoopRequestSetAll;

  @ffi.Bool()
  external bool IsEndIO;

  @ffi.Bool()
  external bool IsFocused;

  @ffi.Bool()
  external bool IsKeyboardSetRange;

  @ffi.Bool()
  external bool NavIdPassedBy;

  @ffi.Bool()
  external bool RangeSrcPassedBy;

  @ffi.Bool()
  external bool RangeDstPassedBy;
}

typedef ImGuiMultiSelectFlags = ffi.Int;
typedef DartImGuiMultiSelectFlags = int;

final class ImGuiNavItemData extends ffi.Struct {
  external ffi.Pointer<ImGuiWindow> Window;

  @ImGuiID()
  external int ID;

  @ImGuiID()
  external int FocusScopeId;

  external ImRect RectRel;

  @ImGuiItemFlags()
  external int ItemFlags;

  @ffi.Float()
  external double DistBox;

  @ffi.Float()
  external double DistCenter;

  @ffi.Float()
  external double DistAxial;

  @ImGuiSelectionUserData()
  external int SelectionUserData;
}

final class ImGuiMetricsConfig extends ffi.Struct {
  @ffi.Bool()
  external bool ShowDebugLog;

  @ffi.Bool()
  external bool ShowIDStackTool;

  @ffi.Bool()
  external bool ShowWindowsRects;

  @ffi.Bool()
  external bool ShowWindowsBeginOrder;

  @ffi.Bool()
  external bool ShowTablesRects;

  @ffi.Bool()
  external bool ShowDrawCmdMesh;

  @ffi.Bool()
  external bool ShowDrawCmdBoundingBoxes;

  @ffi.Bool()
  external bool ShowTextEncodingViewer;

  @ffi.Bool()
  external bool ShowAtlasTintedWithTextColor;

  @ffi.Bool()
  external bool ShowDockingNodes;

  @ffi.Int()
  external int ShowWindowsRectsType;

  @ffi.Int()
  external int ShowTablesRectsType;

  @ffi.Int()
  external int HighlightMonitorIdx;

  @ImGuiID()
  external int HighlightViewportID;
}

final class ImGuiNextWindowData extends ffi.Struct {
  @ImGuiNextWindowDataFlags()
  external int Flags;

  @ImGuiCond()
  external int PosCond;

  @ImGuiCond()
  external int SizeCond;

  @ImGuiCond()
  external int CollapsedCond;

  @ImGuiCond()
  external int DockCond;

  external ImVec2 PosVal;

  external ImVec2 PosPivotVal;

  external ImVec2 SizeVal;

  external ImVec2 ContentSizeVal;

  external ImVec2 ScrollVal;

  @ImGuiChildFlags()
  external int ChildFlags;

  @ffi.Bool()
  external bool PosUndock;

  @ffi.Bool()
  external bool CollapsedVal;

  external ImRect SizeConstraintRect;

  external ImGuiSizeCallback SizeCallback;

  external ffi.Pointer<ffi.Void> SizeCallbackUserData;

  @ffi.Float()
  external double BgAlphaVal;

  @ImGuiID()
  external int ViewportId;

  @ImGuiID()
  external int DockId;

  external ImGuiWindowClass WindowClass;

  external ImVec2 MenuBarOffsetMinVal;

  @ImGuiWindowRefreshFlags()
  external int RefreshFlagsVal;
}

typedef ImGuiNextWindowDataFlags = ffi.Int;
typedef DartImGuiNextWindowDataFlags = int;
typedef ImGuiCond = ffi.Int;
typedef DartImGuiCond = int;
typedef ImGuiChildFlags = ffi.Int;
typedef DartImGuiChildFlags = int;
typedef ImGuiSizeCallback
    = ffi.Pointer<ffi.NativeFunction<ImGuiSizeCallbackFunction>>;
typedef ImGuiSizeCallbackFunction = ffi.Void Function(
    ffi.Pointer<ImGuiSizeCallbackData> data);
typedef DartImGuiSizeCallbackFunction = void Function(
    ffi.Pointer<ImGuiSizeCallbackData> data);
typedef ImGuiWindowRefreshFlags = ffi.Int;
typedef DartImGuiWindowRefreshFlags = int;

final class ImGuiNextItemData extends ffi.Struct {
  @ImGuiNextItemDataFlags()
  external int HasFlags;

  @ImGuiItemFlags()
  external int ItemFlags;

  @ImGuiID()
  external int FocusScopeId;

  @ImGuiSelectionUserData()
  external int SelectionUserData;

  @ffi.Float()
  external double Width;

  @ImGuiKeyChord()
  external int Shortcut;

  @ImGuiInputFlags()
  external int ShortcutFlags;

  @ffi.Bool()
  external bool OpenVal;

  @ImU8()
  external int OpenCond;

  external ImGuiDataTypeStorage RefVal;

  @ImGuiID()
  external int StorageId;
}

typedef ImGuiNextItemDataFlags = ffi.Int;
typedef DartImGuiNextItemDataFlags = int;
typedef ImGuiInputFlags = ffi.Int;
typedef DartImGuiInputFlags = int;

final class ImGuiDataTypeStorage extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ImU8> Data;
}

final class ImGuiOldColumnData extends ffi.Struct {
  @ffi.Float()
  external double OffsetNorm;

  @ffi.Float()
  external double OffsetNormBeforeResize;

  @ImGuiOldColumnFlags()
  external int Flags;

  external ImRect ClipRect;
}

typedef ImGuiOldColumnFlags = ffi.Int;
typedef DartImGuiOldColumnFlags = int;

final class ImGuiOldColumns extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiOldColumnFlags()
  external int Flags;

  @ffi.Bool()
  external bool IsFirstFrame;

  @ffi.Bool()
  external bool IsBeingResized;

  @ffi.Int()
  external int Current;

  @ffi.Int()
  external int Count;

  @ffi.Float()
  external double OffMinX;

  @ffi.Float()
  external double OffMaxX;

  @ffi.Float()
  external double LineMinY;

  @ffi.Float()
  external double LineMaxY;

  @ffi.Float()
  external double HostCursorPosY;

  @ffi.Float()
  external double HostCursorMaxPosX;

  external ImRect HostInitialClipRect;

  external ImRect HostBackupClipRect;

  external ImRect HostBackupParentWorkRect;

  external ImVector_ImGuiOldColumnData Columns;

  external ImDrawListSplitter Splitter;
}

final class ImVector_ImGuiOldColumnData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiOldColumnData> Data;
}

final class ImGuiPopupData extends ffi.Struct {
  @ImGuiID()
  external int PopupId;

  external ffi.Pointer<ImGuiWindow> Window;

  external ffi.Pointer<ImGuiWindow> RestoreNavWindow;

  @ffi.Int()
  external int ParentNavLayer;

  @ffi.Int()
  external int OpenFrameCount;

  @ImGuiID()
  external int OpenParentId;

  external ImVec2 OpenPopupPos;

  external ImVec2 OpenMousePos;
}

final class ImGuiSettingsHandler extends ffi.Struct {
  external ffi.Pointer<ffi.Char> TypeName;

  @ImGuiID()
  external int TypeHash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiSettingsHandler> handler)>> ClearAllFn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiSettingsHandler> handler)>> ReadInitFn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiSettingsHandler> handler,
              ffi.Pointer<ffi.Char> name)>> ReadOpenFn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiSettingsHandler> handler,
              ffi.Pointer<ffi.Void> entry,
              ffi.Pointer<ffi.Char> line)>> ReadLineFn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiSettingsHandler> handler)>> ApplyAllFn;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImGuiContext> ctx,
              ffi.Pointer<ImGuiSettingsHandler> handler,
              ffi.Pointer<ImGuiTextBuffer> out_buf)>> WriteAllFn;

  external ffi.Pointer<ffi.Void> UserData;
}

final class ImGuiStyleMod extends ffi.Struct {
  @ImGuiStyleVar()
  external int VarIdx;

  external UnnamedUnion3 unnamed;
}

typedef ImGuiStyleVar = ffi.Int;
typedef DartImGuiStyleVar = int;

final class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> BackupInt;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> BackupFloat;
}

final class ImGuiTabBar extends ffi.Struct {
  external ffi.Pointer<ImGuiWindow> Window;

  external ImVector_ImGuiTabItem Tabs;

  @ImGuiTabBarFlags()
  external int Flags;

  @ImGuiID()
  external int ID;

  @ImGuiID()
  external int SelectedTabId;

  @ImGuiID()
  external int NextSelectedTabId;

  @ImGuiID()
  external int VisibleTabId;

  @ffi.Int()
  external int CurrFrameVisible;

  @ffi.Int()
  external int PrevFrameVisible;

  external ImRect BarRect;

  @ffi.Float()
  external double CurrTabsContentsHeight;

  @ffi.Float()
  external double PrevTabsContentsHeight;

  @ffi.Float()
  external double WidthAllTabs;

  @ffi.Float()
  external double WidthAllTabsIdeal;

  @ffi.Float()
  external double ScrollingAnim;

  @ffi.Float()
  external double ScrollingTarget;

  @ffi.Float()
  external double ScrollingTargetDistToVisibility;

  @ffi.Float()
  external double ScrollingSpeed;

  @ffi.Float()
  external double ScrollingRectMinX;

  @ffi.Float()
  external double ScrollingRectMaxX;

  @ffi.Float()
  external double SeparatorMinX;

  @ffi.Float()
  external double SeparatorMaxX;

  @ImGuiID()
  external int ReorderRequestTabId;

  @ImS16()
  external int ReorderRequestOffset;

  @ImS8()
  external int BeginCount;

  @ffi.Bool()
  external bool WantLayout;

  @ffi.Bool()
  external bool VisibleTabWasSubmitted;

  @ffi.Bool()
  external bool TabsAddedNew;

  @ImS16()
  external int TabsActiveCount;

  @ImS16()
  external int LastTabItemIdx;

  @ffi.Float()
  external double ItemSpacingY;

  external ImVec2 FramePadding;

  external ImVec2 BackupCursorPos;

  external ImGuiTextBuffer TabsNames;
}

final class ImVector_ImGuiTabItem extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTabItem> Data;
}

final class ImGuiTabItem extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiTabItemFlags()
  external int Flags;

  external ffi.Pointer<ImGuiWindow> Window;

  @ffi.Int()
  external int LastFrameVisible;

  @ffi.Int()
  external int LastFrameSelected;

  @ffi.Float()
  external double Offset;

  @ffi.Float()
  external double Width;

  @ffi.Float()
  external double ContentWidth;

  @ffi.Float()
  external double RequestedWidth;

  @ImS32()
  external int NameOffset;

  @ImS16()
  external int BeginOrder;

  @ImS16()
  external int IndexDuringLayout;

  @ffi.Bool()
  external bool WantClose;
}

typedef ImS32 = ffi.Int;
typedef DartImS32 = int;
typedef ImGuiTabBarFlags = ffi.Int;
typedef DartImGuiTabBarFlags = int;

final class ImGuiTable extends ffi.Opaque {}

final class ImGuiTableHeaderData extends ffi.Struct {
  @ImGuiTableColumnIdx()
  external int Index;

  @ImU32()
  external int TextColor;

  @ImU32()
  external int BgColor0;

  @ImU32()
  external int BgColor1;
}

typedef ImGuiTableColumnIdx = ImS16;

final class ImGuiTableColumn extends ffi.Opaque {}

final class ImGuiTableInstanceData extends ffi.Struct {
  @ImGuiID()
  external int TableInstanceID;

  @ffi.Float()
  external double LastOuterHeight;

  @ffi.Float()
  external double LastTopHeadersRowHeight;

  @ffi.Float()
  external double LastFrozenHeight;

  @ffi.Int()
  external int HoveredRowLast;

  @ffi.Int()
  external int HoveredRowNext;
}

final class ImGuiTableTempData extends ffi.Struct {
  @ffi.Int()
  external int TableIndex;

  @ffi.Float()
  external double LastTimeActive;

  @ffi.Float()
  external double AngledHeadersExtraWidth;

  external ImVector_ImGuiTableHeaderData AngledHeadersRequests;

  external ImVec2 UserOuterSize;

  external ImDrawListSplitter DrawSplitter;

  external ImRect HostBackupWorkRect;

  external ImRect HostBackupParentWorkRect;

  external ImVec2 HostBackupPrevLineSize;

  external ImVec2 HostBackupCurrLineSize;

  external ImVec2 HostBackupCursorMaxPos;

  external ImVec1 HostBackupColumnsOffset;

  @ffi.Float()
  external double HostBackupItemWidth;

  @ffi.Int()
  external int HostBackupItemWidthStackSize;
}

final class ImVector_ImGuiTableHeaderData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTableHeaderData> Data;
}

final class ImGuiTableSettings extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiTableFlags()
  external int SaveFlags;

  @ffi.Float()
  external double RefScale;

  @ImGuiTableColumnIdx()
  external int ColumnsCount;

  @ImGuiTableColumnIdx()
  external int ColumnsCountMax;

  @ffi.Bool()
  external bool WantApply;
}

typedef ImGuiTableFlags = ffi.Int;
typedef DartImGuiTableFlags = int;

final class ImGuiTableColumnsSettings extends ffi.Opaque {}

final class ImGuiTreeNodeStackData extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiTreeNodeFlags()
  external int TreeFlags;

  @ImGuiItemFlags()
  external int ItemFlags;

  external ImRect NavRect;
}

typedef ImGuiTreeNodeFlags = ffi.Int;
typedef DartImGuiTreeNodeFlags = int;

final class ImGuiTypingSelectState extends ffi.Struct {
  external ImGuiTypingSelectRequest Request;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> SearchBuffer;

  @ImGuiID()
  external int FocusScope;

  @ffi.Int()
  external int LastRequestFrame;

  @ffi.Float()
  external double LastRequestTime;

  @ffi.Bool()
  external bool SingleCharModeLock;
}

final class ImGuiTypingSelectRequest extends ffi.Struct {
  @ImGuiTypingSelectFlags()
  external int Flags;

  @ffi.Int()
  external int SearchBufferLen;

  external ffi.Pointer<ffi.Char> SearchBuffer;

  @ffi.Bool()
  external bool SelectRequest;

  @ffi.Bool()
  external bool SingleCharMode;

  @ImS8()
  external int SingleCharSize;
}

typedef ImGuiTypingSelectFlags = ffi.Int;
typedef DartImGuiTypingSelectFlags = int;

final class ImGuiWindowDockStyle extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ImU32> Colors;
}

final class ImGuiWindowTempData extends ffi.Struct {
  external ImVec2 CursorPos;

  external ImVec2 CursorPosPrevLine;

  external ImVec2 CursorStartPos;

  external ImVec2 CursorMaxPos;

  external ImVec2 IdealMaxPos;

  external ImVec2 CurrLineSize;

  external ImVec2 PrevLineSize;

  @ffi.Float()
  external double CurrLineTextBaseOffset;

  @ffi.Float()
  external double PrevLineTextBaseOffset;

  @ffi.Bool()
  external bool IsSameLine;

  @ffi.Bool()
  external bool IsSetPos;

  external ImVec1 Indent;

  external ImVec1 ColumnsOffset;

  external ImVec1 GroupOffset;

  external ImVec2 CursorStartPosLossyness;

  @ffi.UnsignedInt()
  external int NavLayerCurrentAsInt;

  ImGuiNavLayer get NavLayerCurrent =>
      ImGuiNavLayer.fromValue(NavLayerCurrentAsInt);

  @ffi.Short()
  external int NavLayersActiveMask;

  @ffi.Short()
  external int NavLayersActiveMaskNext;

  @ffi.Bool()
  external bool NavIsScrollPushableX;

  @ffi.Bool()
  external bool NavHideHighlightOneFrame;

  @ffi.Bool()
  external bool NavWindowHasScrollY;

  @ffi.Bool()
  external bool MenuBarAppending;

  external ImVec2 MenuBarOffset;

  external ImGuiMenuColumns MenuColumns;

  @ffi.Int()
  external int TreeDepth;

  @ImU32()
  external int TreeHasStackDataDepthMask;

  external ImVector_ImGuiWindowPtr ChildWindows;

  external ffi.Pointer<ImGuiStorage> StateStorage;

  external ffi.Pointer<ImGuiOldColumns> CurrentColumns;

  @ffi.Int()
  external int CurrentTableIdx;

  @ImGuiLayoutType()
  external int LayoutType;

  @ImGuiLayoutType()
  external int ParentLayoutType;

  @ImU32()
  external int ModalDimBgColor;

  @ffi.Float()
  external double ItemWidth;

  @ffi.Float()
  external double TextWrapPos;

  external ImVector_float ItemWidthStack;

  external ImVector_float TextWrapPosStack;
}

enum ImGuiNavLayer {
  ImGuiNavLayer_Main(0),
  ImGuiNavLayer_Menu(1),
  ImGuiNavLayer_COUNT(2);

  final int value;
  const ImGuiNavLayer(this.value);

  static ImGuiNavLayer fromValue(int value) => switch (value) {
        0 => ImGuiNavLayer_Main,
        1 => ImGuiNavLayer_Menu,
        2 => ImGuiNavLayer_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiNavLayer: $value"),
      };
}

final class ImVector_ImGuiWindowPtr extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Pointer<ImGuiWindow>> Data;
}

typedef ImGuiLayoutType = ffi.Int;
typedef DartImGuiLayoutType = int;

final class ImGuiWindowSettings extends ffi.Struct {
  @ImGuiID()
  external int ID;

  external ImVec2ih Pos;

  external ImVec2ih Size;

  external ImVec2ih ViewportPos;

  @ImGuiID()
  external int ViewportId;

  @ImGuiID()
  external int DockId;

  @ImGuiID()
  external int ClassId;

  @ffi.Short()
  external int DockOrder;

  @ffi.Bool()
  external bool Collapsed;

  @ffi.Bool()
  external bool IsChild;

  @ffi.Bool()
  external bool WantApply;

  @ffi.Bool()
  external bool WantDelete;
}

final class ImVec2ih extends ffi.Struct {
  @ffi.Short()
  external int x;

  @ffi.Short()
  external int y;
}

final class ImVector_const_charPtr extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> Data;
}

enum ImGuiWindowFlags_ {
  ImGuiWindowFlags_None(0),
  ImGuiWindowFlags_NoTitleBar(1),
  ImGuiWindowFlags_NoResize(2),
  ImGuiWindowFlags_NoMove(4),
  ImGuiWindowFlags_NoScrollbar(8),
  ImGuiWindowFlags_NoScrollWithMouse(16),
  ImGuiWindowFlags_NoCollapse(32),
  ImGuiWindowFlags_AlwaysAutoResize(64),
  ImGuiWindowFlags_NoBackground(128),
  ImGuiWindowFlags_NoSavedSettings(256),
  ImGuiWindowFlags_NoMouseInputs(512),
  ImGuiWindowFlags_MenuBar(1024),
  ImGuiWindowFlags_HorizontalScrollbar(2048),
  ImGuiWindowFlags_NoFocusOnAppearing(4096),
  ImGuiWindowFlags_NoBringToFrontOnFocus(8192),
  ImGuiWindowFlags_AlwaysVerticalScrollbar(16384),
  ImGuiWindowFlags_AlwaysHorizontalScrollbar(32768),
  ImGuiWindowFlags_NoNavInputs(65536),
  ImGuiWindowFlags_NoNavFocus(131072),
  ImGuiWindowFlags_UnsavedDocument(262144),
  ImGuiWindowFlags_NoDocking(524288),
  ImGuiWindowFlags_NoNav(196608),
  ImGuiWindowFlags_NoDecoration(43),
  ImGuiWindowFlags_NoInputs(197120),
  ImGuiWindowFlags_ChildWindow(16777216),
  ImGuiWindowFlags_Tooltip(33554432),
  ImGuiWindowFlags_Popup(67108864),
  ImGuiWindowFlags_Modal(134217728),
  ImGuiWindowFlags_ChildMenu(268435456),
  ImGuiWindowFlags_DockNodeHost(536870912);

  final int value;
  const ImGuiWindowFlags_(this.value);

  static ImGuiWindowFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiWindowFlags_None,
        1 => ImGuiWindowFlags_NoTitleBar,
        2 => ImGuiWindowFlags_NoResize,
        4 => ImGuiWindowFlags_NoMove,
        8 => ImGuiWindowFlags_NoScrollbar,
        16 => ImGuiWindowFlags_NoScrollWithMouse,
        32 => ImGuiWindowFlags_NoCollapse,
        64 => ImGuiWindowFlags_AlwaysAutoResize,
        128 => ImGuiWindowFlags_NoBackground,
        256 => ImGuiWindowFlags_NoSavedSettings,
        512 => ImGuiWindowFlags_NoMouseInputs,
        1024 => ImGuiWindowFlags_MenuBar,
        2048 => ImGuiWindowFlags_HorizontalScrollbar,
        4096 => ImGuiWindowFlags_NoFocusOnAppearing,
        8192 => ImGuiWindowFlags_NoBringToFrontOnFocus,
        16384 => ImGuiWindowFlags_AlwaysVerticalScrollbar,
        32768 => ImGuiWindowFlags_AlwaysHorizontalScrollbar,
        65536 => ImGuiWindowFlags_NoNavInputs,
        131072 => ImGuiWindowFlags_NoNavFocus,
        262144 => ImGuiWindowFlags_UnsavedDocument,
        524288 => ImGuiWindowFlags_NoDocking,
        196608 => ImGuiWindowFlags_NoNav,
        43 => ImGuiWindowFlags_NoDecoration,
        197120 => ImGuiWindowFlags_NoInputs,
        16777216 => ImGuiWindowFlags_ChildWindow,
        33554432 => ImGuiWindowFlags_Tooltip,
        67108864 => ImGuiWindowFlags_Popup,
        134217728 => ImGuiWindowFlags_Modal,
        268435456 => ImGuiWindowFlags_ChildMenu,
        536870912 => ImGuiWindowFlags_DockNodeHost,
        _ => throw ArgumentError("Unknown value for ImGuiWindowFlags_: $value"),
      };
}

enum ImGuiChildFlags_ {
  ImGuiChildFlags_None(0),
  ImGuiChildFlags_Borders(1),
  ImGuiChildFlags_AlwaysUseWindowPadding(2),
  ImGuiChildFlags_ResizeX(4),
  ImGuiChildFlags_ResizeY(8),
  ImGuiChildFlags_AutoResizeX(16),
  ImGuiChildFlags_AutoResizeY(32),
  ImGuiChildFlags_AlwaysAutoResize(64),
  ImGuiChildFlags_FrameStyle(128),
  ImGuiChildFlags_NavFlattened(256);

  final int value;
  const ImGuiChildFlags_(this.value);

  static ImGuiChildFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiChildFlags_None,
        1 => ImGuiChildFlags_Borders,
        2 => ImGuiChildFlags_AlwaysUseWindowPadding,
        4 => ImGuiChildFlags_ResizeX,
        8 => ImGuiChildFlags_ResizeY,
        16 => ImGuiChildFlags_AutoResizeX,
        32 => ImGuiChildFlags_AutoResizeY,
        64 => ImGuiChildFlags_AlwaysAutoResize,
        128 => ImGuiChildFlags_FrameStyle,
        256 => ImGuiChildFlags_NavFlattened,
        _ => throw ArgumentError("Unknown value for ImGuiChildFlags_: $value"),
      };
}

enum ImGuiItemFlags_ {
  ImGuiItemFlags_None(0),
  ImGuiItemFlags_NoTabStop(1),
  ImGuiItemFlags_NoNav(2),
  ImGuiItemFlags_NoNavDefaultFocus(4),
  ImGuiItemFlags_ButtonRepeat(8),
  ImGuiItemFlags_AutoClosePopups(16),
  ImGuiItemFlags_AllowDuplicateId(32);

  final int value;
  const ImGuiItemFlags_(this.value);

  static ImGuiItemFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiItemFlags_None,
        1 => ImGuiItemFlags_NoTabStop,
        2 => ImGuiItemFlags_NoNav,
        4 => ImGuiItemFlags_NoNavDefaultFocus,
        8 => ImGuiItemFlags_ButtonRepeat,
        16 => ImGuiItemFlags_AutoClosePopups,
        32 => ImGuiItemFlags_AllowDuplicateId,
        _ => throw ArgumentError("Unknown value for ImGuiItemFlags_: $value"),
      };
}

enum ImGuiInputTextFlags_ {
  ImGuiInputTextFlags_None(0),
  ImGuiInputTextFlags_CharsDecimal(1),
  ImGuiInputTextFlags_CharsHexadecimal(2),
  ImGuiInputTextFlags_CharsScientific(4),
  ImGuiInputTextFlags_CharsUppercase(8),
  ImGuiInputTextFlags_CharsNoBlank(16),
  ImGuiInputTextFlags_AllowTabInput(32),
  ImGuiInputTextFlags_EnterReturnsTrue(64),
  ImGuiInputTextFlags_EscapeClearsAll(128),
  ImGuiInputTextFlags_CtrlEnterForNewLine(256),
  ImGuiInputTextFlags_ReadOnly(512),
  ImGuiInputTextFlags_Password(1024),
  ImGuiInputTextFlags_AlwaysOverwrite(2048),
  ImGuiInputTextFlags_AutoSelectAll(4096),
  ImGuiInputTextFlags_ParseEmptyRefVal(8192),
  ImGuiInputTextFlags_DisplayEmptyRefVal(16384),
  ImGuiInputTextFlags_NoHorizontalScroll(32768),
  ImGuiInputTextFlags_NoUndoRedo(65536),
  ImGuiInputTextFlags_ElideLeft(131072),
  ImGuiInputTextFlags_CallbackCompletion(262144),
  ImGuiInputTextFlags_CallbackHistory(524288),
  ImGuiInputTextFlags_CallbackAlways(1048576),
  ImGuiInputTextFlags_CallbackCharFilter(2097152),
  ImGuiInputTextFlags_CallbackResize(4194304),
  ImGuiInputTextFlags_CallbackEdit(8388608);

  final int value;
  const ImGuiInputTextFlags_(this.value);

  static ImGuiInputTextFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiInputTextFlags_None,
        1 => ImGuiInputTextFlags_CharsDecimal,
        2 => ImGuiInputTextFlags_CharsHexadecimal,
        4 => ImGuiInputTextFlags_CharsScientific,
        8 => ImGuiInputTextFlags_CharsUppercase,
        16 => ImGuiInputTextFlags_CharsNoBlank,
        32 => ImGuiInputTextFlags_AllowTabInput,
        64 => ImGuiInputTextFlags_EnterReturnsTrue,
        128 => ImGuiInputTextFlags_EscapeClearsAll,
        256 => ImGuiInputTextFlags_CtrlEnterForNewLine,
        512 => ImGuiInputTextFlags_ReadOnly,
        1024 => ImGuiInputTextFlags_Password,
        2048 => ImGuiInputTextFlags_AlwaysOverwrite,
        4096 => ImGuiInputTextFlags_AutoSelectAll,
        8192 => ImGuiInputTextFlags_ParseEmptyRefVal,
        16384 => ImGuiInputTextFlags_DisplayEmptyRefVal,
        32768 => ImGuiInputTextFlags_NoHorizontalScroll,
        65536 => ImGuiInputTextFlags_NoUndoRedo,
        131072 => ImGuiInputTextFlags_ElideLeft,
        262144 => ImGuiInputTextFlags_CallbackCompletion,
        524288 => ImGuiInputTextFlags_CallbackHistory,
        1048576 => ImGuiInputTextFlags_CallbackAlways,
        2097152 => ImGuiInputTextFlags_CallbackCharFilter,
        4194304 => ImGuiInputTextFlags_CallbackResize,
        8388608 => ImGuiInputTextFlags_CallbackEdit,
        _ =>
          throw ArgumentError("Unknown value for ImGuiInputTextFlags_: $value"),
      };
}

enum ImGuiTreeNodeFlags_ {
  ImGuiTreeNodeFlags_None(0),
  ImGuiTreeNodeFlags_Selected(1),
  ImGuiTreeNodeFlags_Framed(2),
  ImGuiTreeNodeFlags_AllowOverlap(4),
  ImGuiTreeNodeFlags_NoTreePushOnOpen(8),
  ImGuiTreeNodeFlags_NoAutoOpenOnLog(16),
  ImGuiTreeNodeFlags_DefaultOpen(32),
  ImGuiTreeNodeFlags_OpenOnDoubleClick(64),
  ImGuiTreeNodeFlags_OpenOnArrow(128),
  ImGuiTreeNodeFlags_Leaf(256),
  ImGuiTreeNodeFlags_Bullet(512),
  ImGuiTreeNodeFlags_FramePadding(1024),
  ImGuiTreeNodeFlags_SpanAvailWidth(2048),
  ImGuiTreeNodeFlags_SpanFullWidth(4096),
  ImGuiTreeNodeFlags_SpanTextWidth(8192),
  ImGuiTreeNodeFlags_SpanAllColumns(16384),
  ImGuiTreeNodeFlags_NavLeftJumpsBackHere(32768),
  ImGuiTreeNodeFlags_CollapsingHeader(26);

  final int value;
  const ImGuiTreeNodeFlags_(this.value);

  static ImGuiTreeNodeFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTreeNodeFlags_None,
        1 => ImGuiTreeNodeFlags_Selected,
        2 => ImGuiTreeNodeFlags_Framed,
        4 => ImGuiTreeNodeFlags_AllowOverlap,
        8 => ImGuiTreeNodeFlags_NoTreePushOnOpen,
        16 => ImGuiTreeNodeFlags_NoAutoOpenOnLog,
        32 => ImGuiTreeNodeFlags_DefaultOpen,
        64 => ImGuiTreeNodeFlags_OpenOnDoubleClick,
        128 => ImGuiTreeNodeFlags_OpenOnArrow,
        256 => ImGuiTreeNodeFlags_Leaf,
        512 => ImGuiTreeNodeFlags_Bullet,
        1024 => ImGuiTreeNodeFlags_FramePadding,
        2048 => ImGuiTreeNodeFlags_SpanAvailWidth,
        4096 => ImGuiTreeNodeFlags_SpanFullWidth,
        8192 => ImGuiTreeNodeFlags_SpanTextWidth,
        16384 => ImGuiTreeNodeFlags_SpanAllColumns,
        32768 => ImGuiTreeNodeFlags_NavLeftJumpsBackHere,
        26 => ImGuiTreeNodeFlags_CollapsingHeader,
        _ =>
          throw ArgumentError("Unknown value for ImGuiTreeNodeFlags_: $value"),
      };
}

enum ImGuiPopupFlags_ {
  ImGuiPopupFlags_None(0),
  ImGuiPopupFlags_MouseButtonRight(1),
  ImGuiPopupFlags_MouseButtonMiddle(2),
  ImGuiPopupFlags_MouseButtonMask_(31),
  ImGuiPopupFlags_NoReopen(32),
  ImGuiPopupFlags_NoOpenOverExistingPopup(128),
  ImGuiPopupFlags_NoOpenOverItems(256),
  ImGuiPopupFlags_AnyPopupId(1024),
  ImGuiPopupFlags_AnyPopupLevel(2048),
  ImGuiPopupFlags_AnyPopup(3072);

  static const ImGuiPopupFlags_MouseButtonLeft = ImGuiPopupFlags_None;
  static const ImGuiPopupFlags_MouseButtonDefault_ =
      ImGuiPopupFlags_MouseButtonRight;

  final int value;
  const ImGuiPopupFlags_(this.value);

  static ImGuiPopupFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiPopupFlags_None,
        1 => ImGuiPopupFlags_MouseButtonRight,
        2 => ImGuiPopupFlags_MouseButtonMiddle,
        31 => ImGuiPopupFlags_MouseButtonMask_,
        32 => ImGuiPopupFlags_NoReopen,
        128 => ImGuiPopupFlags_NoOpenOverExistingPopup,
        256 => ImGuiPopupFlags_NoOpenOverItems,
        1024 => ImGuiPopupFlags_AnyPopupId,
        2048 => ImGuiPopupFlags_AnyPopupLevel,
        3072 => ImGuiPopupFlags_AnyPopup,
        _ => throw ArgumentError("Unknown value for ImGuiPopupFlags_: $value"),
      };

  @override
  String toString() {
    if (this == ImGuiPopupFlags_None)
      return "ImGuiPopupFlags_.ImGuiPopupFlags_None, ImGuiPopupFlags_.ImGuiPopupFlags_MouseButtonLeft";
    if (this == ImGuiPopupFlags_MouseButtonRight)
      return "ImGuiPopupFlags_.ImGuiPopupFlags_MouseButtonRight, ImGuiPopupFlags_.ImGuiPopupFlags_MouseButtonDefault_";
    return super.toString();
  }
}

enum ImGuiSelectableFlags_ {
  ImGuiSelectableFlags_None(0),
  ImGuiSelectableFlags_NoAutoClosePopups(1),
  ImGuiSelectableFlags_SpanAllColumns(2),
  ImGuiSelectableFlags_AllowDoubleClick(4),
  ImGuiSelectableFlags_Disabled(8),
  ImGuiSelectableFlags_AllowOverlap(16),
  ImGuiSelectableFlags_Highlight(32);

  final int value;
  const ImGuiSelectableFlags_(this.value);

  static ImGuiSelectableFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiSelectableFlags_None,
        1 => ImGuiSelectableFlags_NoAutoClosePopups,
        2 => ImGuiSelectableFlags_SpanAllColumns,
        4 => ImGuiSelectableFlags_AllowDoubleClick,
        8 => ImGuiSelectableFlags_Disabled,
        16 => ImGuiSelectableFlags_AllowOverlap,
        32 => ImGuiSelectableFlags_Highlight,
        _ => throw ArgumentError(
            "Unknown value for ImGuiSelectableFlags_: $value"),
      };
}

enum ImGuiComboFlags_ {
  ImGuiComboFlags_None(0),
  ImGuiComboFlags_PopupAlignLeft(1),
  ImGuiComboFlags_HeightSmall(2),
  ImGuiComboFlags_HeightRegular(4),
  ImGuiComboFlags_HeightLarge(8),
  ImGuiComboFlags_HeightLargest(16),
  ImGuiComboFlags_NoArrowButton(32),
  ImGuiComboFlags_NoPreview(64),
  ImGuiComboFlags_WidthFitPreview(128),
  ImGuiComboFlags_HeightMask_(30);

  final int value;
  const ImGuiComboFlags_(this.value);

  static ImGuiComboFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiComboFlags_None,
        1 => ImGuiComboFlags_PopupAlignLeft,
        2 => ImGuiComboFlags_HeightSmall,
        4 => ImGuiComboFlags_HeightRegular,
        8 => ImGuiComboFlags_HeightLarge,
        16 => ImGuiComboFlags_HeightLargest,
        32 => ImGuiComboFlags_NoArrowButton,
        64 => ImGuiComboFlags_NoPreview,
        128 => ImGuiComboFlags_WidthFitPreview,
        30 => ImGuiComboFlags_HeightMask_,
        _ => throw ArgumentError("Unknown value for ImGuiComboFlags_: $value"),
      };
}

enum ImGuiTabBarFlags_ {
  ImGuiTabBarFlags_None(0),
  ImGuiTabBarFlags_Reorderable(1),
  ImGuiTabBarFlags_AutoSelectNewTabs(2),
  ImGuiTabBarFlags_TabListPopupButton(4),
  ImGuiTabBarFlags_NoCloseWithMiddleMouseButton(8),
  ImGuiTabBarFlags_NoTabListScrollingButtons(16),
  ImGuiTabBarFlags_NoTooltip(32),
  ImGuiTabBarFlags_DrawSelectedOverline(64),
  ImGuiTabBarFlags_FittingPolicyResizeDown(128),
  ImGuiTabBarFlags_FittingPolicyScroll(256),
  ImGuiTabBarFlags_FittingPolicyMask_(384);

  static const ImGuiTabBarFlags_FittingPolicyDefault_ =
      ImGuiTabBarFlags_FittingPolicyResizeDown;

  final int value;
  const ImGuiTabBarFlags_(this.value);

  static ImGuiTabBarFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTabBarFlags_None,
        1 => ImGuiTabBarFlags_Reorderable,
        2 => ImGuiTabBarFlags_AutoSelectNewTabs,
        4 => ImGuiTabBarFlags_TabListPopupButton,
        8 => ImGuiTabBarFlags_NoCloseWithMiddleMouseButton,
        16 => ImGuiTabBarFlags_NoTabListScrollingButtons,
        32 => ImGuiTabBarFlags_NoTooltip,
        64 => ImGuiTabBarFlags_DrawSelectedOverline,
        128 => ImGuiTabBarFlags_FittingPolicyResizeDown,
        256 => ImGuiTabBarFlags_FittingPolicyScroll,
        384 => ImGuiTabBarFlags_FittingPolicyMask_,
        _ => throw ArgumentError("Unknown value for ImGuiTabBarFlags_: $value"),
      };

  @override
  String toString() {
    if (this == ImGuiTabBarFlags_FittingPolicyResizeDown)
      return "ImGuiTabBarFlags_.ImGuiTabBarFlags_FittingPolicyResizeDown, ImGuiTabBarFlags_.ImGuiTabBarFlags_FittingPolicyDefault_";
    return super.toString();
  }
}

enum ImGuiTabItemFlags_ {
  ImGuiTabItemFlags_None(0),
  ImGuiTabItemFlags_UnsavedDocument(1),
  ImGuiTabItemFlags_SetSelected(2),
  ImGuiTabItemFlags_NoCloseWithMiddleMouseButton(4),
  ImGuiTabItemFlags_NoPushId(8),
  ImGuiTabItemFlags_NoTooltip(16),
  ImGuiTabItemFlags_NoReorder(32),
  ImGuiTabItemFlags_Leading(64),
  ImGuiTabItemFlags_Trailing(128),
  ImGuiTabItemFlags_NoAssumedClosure(256);

  final int value;
  const ImGuiTabItemFlags_(this.value);

  static ImGuiTabItemFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTabItemFlags_None,
        1 => ImGuiTabItemFlags_UnsavedDocument,
        2 => ImGuiTabItemFlags_SetSelected,
        4 => ImGuiTabItemFlags_NoCloseWithMiddleMouseButton,
        8 => ImGuiTabItemFlags_NoPushId,
        16 => ImGuiTabItemFlags_NoTooltip,
        32 => ImGuiTabItemFlags_NoReorder,
        64 => ImGuiTabItemFlags_Leading,
        128 => ImGuiTabItemFlags_Trailing,
        256 => ImGuiTabItemFlags_NoAssumedClosure,
        _ =>
          throw ArgumentError("Unknown value for ImGuiTabItemFlags_: $value"),
      };
}

enum ImGuiFocusedFlags_ {
  ImGuiFocusedFlags_None(0),
  ImGuiFocusedFlags_ChildWindows(1),
  ImGuiFocusedFlags_RootWindow(2),
  ImGuiFocusedFlags_AnyWindow(4),
  ImGuiFocusedFlags_NoPopupHierarchy(8),
  ImGuiFocusedFlags_DockHierarchy(16),
  ImGuiFocusedFlags_RootAndChildWindows(3);

  final int value;
  const ImGuiFocusedFlags_(this.value);

  static ImGuiFocusedFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiFocusedFlags_None,
        1 => ImGuiFocusedFlags_ChildWindows,
        2 => ImGuiFocusedFlags_RootWindow,
        4 => ImGuiFocusedFlags_AnyWindow,
        8 => ImGuiFocusedFlags_NoPopupHierarchy,
        16 => ImGuiFocusedFlags_DockHierarchy,
        3 => ImGuiFocusedFlags_RootAndChildWindows,
        _ =>
          throw ArgumentError("Unknown value for ImGuiFocusedFlags_: $value"),
      };
}

enum ImGuiHoveredFlags_ {
  ImGuiHoveredFlags_None(0),
  ImGuiHoveredFlags_ChildWindows(1),
  ImGuiHoveredFlags_RootWindow(2),
  ImGuiHoveredFlags_AnyWindow(4),
  ImGuiHoveredFlags_NoPopupHierarchy(8),
  ImGuiHoveredFlags_DockHierarchy(16),
  ImGuiHoveredFlags_AllowWhenBlockedByPopup(32),
  ImGuiHoveredFlags_AllowWhenBlockedByActiveItem(128),
  ImGuiHoveredFlags_AllowWhenOverlappedByItem(256),
  ImGuiHoveredFlags_AllowWhenOverlappedByWindow(512),
  ImGuiHoveredFlags_AllowWhenDisabled(1024),
  ImGuiHoveredFlags_NoNavOverride(2048),
  ImGuiHoveredFlags_AllowWhenOverlapped(768),
  ImGuiHoveredFlags_RectOnly(928),
  ImGuiHoveredFlags_RootAndChildWindows(3),
  ImGuiHoveredFlags_ForTooltip(4096),
  ImGuiHoveredFlags_Stationary(8192),
  ImGuiHoveredFlags_DelayNone(16384),
  ImGuiHoveredFlags_DelayShort(32768),
  ImGuiHoveredFlags_DelayNormal(65536),
  ImGuiHoveredFlags_NoSharedDelay(131072);

  final int value;
  const ImGuiHoveredFlags_(this.value);

  static ImGuiHoveredFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiHoveredFlags_None,
        1 => ImGuiHoveredFlags_ChildWindows,
        2 => ImGuiHoveredFlags_RootWindow,
        4 => ImGuiHoveredFlags_AnyWindow,
        8 => ImGuiHoveredFlags_NoPopupHierarchy,
        16 => ImGuiHoveredFlags_DockHierarchy,
        32 => ImGuiHoveredFlags_AllowWhenBlockedByPopup,
        128 => ImGuiHoveredFlags_AllowWhenBlockedByActiveItem,
        256 => ImGuiHoveredFlags_AllowWhenOverlappedByItem,
        512 => ImGuiHoveredFlags_AllowWhenOverlappedByWindow,
        1024 => ImGuiHoveredFlags_AllowWhenDisabled,
        2048 => ImGuiHoveredFlags_NoNavOverride,
        768 => ImGuiHoveredFlags_AllowWhenOverlapped,
        928 => ImGuiHoveredFlags_RectOnly,
        3 => ImGuiHoveredFlags_RootAndChildWindows,
        4096 => ImGuiHoveredFlags_ForTooltip,
        8192 => ImGuiHoveredFlags_Stationary,
        16384 => ImGuiHoveredFlags_DelayNone,
        32768 => ImGuiHoveredFlags_DelayShort,
        65536 => ImGuiHoveredFlags_DelayNormal,
        131072 => ImGuiHoveredFlags_NoSharedDelay,
        _ =>
          throw ArgumentError("Unknown value for ImGuiHoveredFlags_: $value"),
      };
}

enum ImGuiDockNodeFlags_ {
  ImGuiDockNodeFlags_None(0),
  ImGuiDockNodeFlags_KeepAliveOnly(1),
  ImGuiDockNodeFlags_NoDockingOverCentralNode(4),
  ImGuiDockNodeFlags_PassthruCentralNode(8),
  ImGuiDockNodeFlags_NoDockingSplit(16),
  ImGuiDockNodeFlags_NoResize(32),
  ImGuiDockNodeFlags_AutoHideTabBar(64),
  ImGuiDockNodeFlags_NoUndocking(128);

  final int value;
  const ImGuiDockNodeFlags_(this.value);

  static ImGuiDockNodeFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiDockNodeFlags_None,
        1 => ImGuiDockNodeFlags_KeepAliveOnly,
        4 => ImGuiDockNodeFlags_NoDockingOverCentralNode,
        8 => ImGuiDockNodeFlags_PassthruCentralNode,
        16 => ImGuiDockNodeFlags_NoDockingSplit,
        32 => ImGuiDockNodeFlags_NoResize,
        64 => ImGuiDockNodeFlags_AutoHideTabBar,
        128 => ImGuiDockNodeFlags_NoUndocking,
        _ =>
          throw ArgumentError("Unknown value for ImGuiDockNodeFlags_: $value"),
      };
}

enum ImGuiDragDropFlags_ {
  ImGuiDragDropFlags_None(0),
  ImGuiDragDropFlags_SourceNoPreviewTooltip(1),
  ImGuiDragDropFlags_SourceNoDisableHover(2),
  ImGuiDragDropFlags_SourceNoHoldToOpenOthers(4),
  ImGuiDragDropFlags_SourceAllowNullID(8),
  ImGuiDragDropFlags_SourceExtern(16),
  ImGuiDragDropFlags_PayloadAutoExpire(32),
  ImGuiDragDropFlags_PayloadNoCrossContext(64),
  ImGuiDragDropFlags_PayloadNoCrossProcess(128),
  ImGuiDragDropFlags_AcceptBeforeDelivery(1024),
  ImGuiDragDropFlags_AcceptNoDrawDefaultRect(2048),
  ImGuiDragDropFlags_AcceptNoPreviewTooltip(4096),
  ImGuiDragDropFlags_AcceptPeekOnly(3072);

  final int value;
  const ImGuiDragDropFlags_(this.value);

  static ImGuiDragDropFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiDragDropFlags_None,
        1 => ImGuiDragDropFlags_SourceNoPreviewTooltip,
        2 => ImGuiDragDropFlags_SourceNoDisableHover,
        4 => ImGuiDragDropFlags_SourceNoHoldToOpenOthers,
        8 => ImGuiDragDropFlags_SourceAllowNullID,
        16 => ImGuiDragDropFlags_SourceExtern,
        32 => ImGuiDragDropFlags_PayloadAutoExpire,
        64 => ImGuiDragDropFlags_PayloadNoCrossContext,
        128 => ImGuiDragDropFlags_PayloadNoCrossProcess,
        1024 => ImGuiDragDropFlags_AcceptBeforeDelivery,
        2048 => ImGuiDragDropFlags_AcceptNoDrawDefaultRect,
        4096 => ImGuiDragDropFlags_AcceptNoPreviewTooltip,
        3072 => ImGuiDragDropFlags_AcceptPeekOnly,
        _ =>
          throw ArgumentError("Unknown value for ImGuiDragDropFlags_: $value"),
      };
}

enum ImGuiDataType_ {
  ImGuiDataType_S8(0),
  ImGuiDataType_U8(1),
  ImGuiDataType_S16(2),
  ImGuiDataType_U16(3),
  ImGuiDataType_S32(4),
  ImGuiDataType_U32(5),
  ImGuiDataType_S64(6),
  ImGuiDataType_U64(7),
  ImGuiDataType_Float(8),
  ImGuiDataType_Double(9),
  ImGuiDataType_Bool(10),
  ImGuiDataType_COUNT(11);

  final int value;
  const ImGuiDataType_(this.value);

  static ImGuiDataType_ fromValue(int value) => switch (value) {
        0 => ImGuiDataType_S8,
        1 => ImGuiDataType_U8,
        2 => ImGuiDataType_S16,
        3 => ImGuiDataType_U16,
        4 => ImGuiDataType_S32,
        5 => ImGuiDataType_U32,
        6 => ImGuiDataType_S64,
        7 => ImGuiDataType_U64,
        8 => ImGuiDataType_Float,
        9 => ImGuiDataType_Double,
        10 => ImGuiDataType_Bool,
        11 => ImGuiDataType_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiDataType_: $value"),
      };
}

enum ImGuiInputFlags_ {
  ImGuiInputFlags_None(0),
  ImGuiInputFlags_Repeat(1),
  ImGuiInputFlags_RouteActive(1024),
  ImGuiInputFlags_RouteFocused(2048),
  ImGuiInputFlags_RouteGlobal(4096),
  ImGuiInputFlags_RouteAlways(8192),
  ImGuiInputFlags_RouteOverFocused(16384),
  ImGuiInputFlags_RouteOverActive(32768),
  ImGuiInputFlags_RouteUnlessBgFocused(65536),
  ImGuiInputFlags_RouteFromRootWindow(131072),
  ImGuiInputFlags_Tooltip(262144);

  final int value;
  const ImGuiInputFlags_(this.value);

  static ImGuiInputFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiInputFlags_None,
        1 => ImGuiInputFlags_Repeat,
        1024 => ImGuiInputFlags_RouteActive,
        2048 => ImGuiInputFlags_RouteFocused,
        4096 => ImGuiInputFlags_RouteGlobal,
        8192 => ImGuiInputFlags_RouteAlways,
        16384 => ImGuiInputFlags_RouteOverFocused,
        32768 => ImGuiInputFlags_RouteOverActive,
        65536 => ImGuiInputFlags_RouteUnlessBgFocused,
        131072 => ImGuiInputFlags_RouteFromRootWindow,
        262144 => ImGuiInputFlags_Tooltip,
        _ => throw ArgumentError("Unknown value for ImGuiInputFlags_: $value"),
      };
}

enum ImGuiConfigFlags_ {
  ImGuiConfigFlags_None(0),
  ImGuiConfigFlags_NavEnableKeyboard(1),
  ImGuiConfigFlags_NavEnableGamepad(2),
  ImGuiConfigFlags_NoMouse(16),
  ImGuiConfigFlags_NoMouseCursorChange(32),
  ImGuiConfigFlags_NoKeyboard(64),
  ImGuiConfigFlags_DockingEnable(128),
  ImGuiConfigFlags_ViewportsEnable(1024),
  ImGuiConfigFlags_DpiEnableScaleViewports(16384),
  ImGuiConfigFlags_DpiEnableScaleFonts(32768),
  ImGuiConfigFlags_IsSRGB(1048576),
  ImGuiConfigFlags_IsTouchScreen(2097152);

  final int value;
  const ImGuiConfigFlags_(this.value);

  static ImGuiConfigFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiConfigFlags_None,
        1 => ImGuiConfigFlags_NavEnableKeyboard,
        2 => ImGuiConfigFlags_NavEnableGamepad,
        16 => ImGuiConfigFlags_NoMouse,
        32 => ImGuiConfigFlags_NoMouseCursorChange,
        64 => ImGuiConfigFlags_NoKeyboard,
        128 => ImGuiConfigFlags_DockingEnable,
        1024 => ImGuiConfigFlags_ViewportsEnable,
        16384 => ImGuiConfigFlags_DpiEnableScaleViewports,
        32768 => ImGuiConfigFlags_DpiEnableScaleFonts,
        1048576 => ImGuiConfigFlags_IsSRGB,
        2097152 => ImGuiConfigFlags_IsTouchScreen,
        _ => throw ArgumentError("Unknown value for ImGuiConfigFlags_: $value"),
      };
}

enum ImGuiBackendFlags_ {
  ImGuiBackendFlags_None(0),
  ImGuiBackendFlags_HasGamepad(1),
  ImGuiBackendFlags_HasMouseCursors(2),
  ImGuiBackendFlags_HasSetMousePos(4),
  ImGuiBackendFlags_RendererHasVtxOffset(8),
  ImGuiBackendFlags_PlatformHasViewports(1024),
  ImGuiBackendFlags_HasMouseHoveredViewport(2048),
  ImGuiBackendFlags_RendererHasViewports(4096);

  final int value;
  const ImGuiBackendFlags_(this.value);

  static ImGuiBackendFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiBackendFlags_None,
        1 => ImGuiBackendFlags_HasGamepad,
        2 => ImGuiBackendFlags_HasMouseCursors,
        4 => ImGuiBackendFlags_HasSetMousePos,
        8 => ImGuiBackendFlags_RendererHasVtxOffset,
        1024 => ImGuiBackendFlags_PlatformHasViewports,
        2048 => ImGuiBackendFlags_HasMouseHoveredViewport,
        4096 => ImGuiBackendFlags_RendererHasViewports,
        _ =>
          throw ArgumentError("Unknown value for ImGuiBackendFlags_: $value"),
      };
}

enum ImGuiCol_ {
  ImGuiCol_Text(0),
  ImGuiCol_TextDisabled(1),
  ImGuiCol_WindowBg(2),
  ImGuiCol_ChildBg(3),
  ImGuiCol_PopupBg(4),
  ImGuiCol_Border(5),
  ImGuiCol_BorderShadow(6),
  ImGuiCol_FrameBg(7),
  ImGuiCol_FrameBgHovered(8),
  ImGuiCol_FrameBgActive(9),
  ImGuiCol_TitleBg(10),
  ImGuiCol_TitleBgActive(11),
  ImGuiCol_TitleBgCollapsed(12),
  ImGuiCol_MenuBarBg(13),
  ImGuiCol_ScrollbarBg(14),
  ImGuiCol_ScrollbarGrab(15),
  ImGuiCol_ScrollbarGrabHovered(16),
  ImGuiCol_ScrollbarGrabActive(17),
  ImGuiCol_CheckMark(18),
  ImGuiCol_SliderGrab(19),
  ImGuiCol_SliderGrabActive(20),
  ImGuiCol_Button(21),
  ImGuiCol_ButtonHovered(22),
  ImGuiCol_ButtonActive(23),
  ImGuiCol_Header(24),
  ImGuiCol_HeaderHovered(25),
  ImGuiCol_HeaderActive(26),
  ImGuiCol_Separator(27),
  ImGuiCol_SeparatorHovered(28),
  ImGuiCol_SeparatorActive(29),
  ImGuiCol_ResizeGrip(30),
  ImGuiCol_ResizeGripHovered(31),
  ImGuiCol_ResizeGripActive(32),
  ImGuiCol_TabHovered(33),
  ImGuiCol_Tab(34),
  ImGuiCol_TabSelected(35),
  ImGuiCol_TabSelectedOverline(36),
  ImGuiCol_TabDimmed(37),
  ImGuiCol_TabDimmedSelected(38),
  ImGuiCol_TabDimmedSelectedOverline(39),
  ImGuiCol_DockingPreview(40),
  ImGuiCol_DockingEmptyBg(41),
  ImGuiCol_PlotLines(42),
  ImGuiCol_PlotLinesHovered(43),
  ImGuiCol_PlotHistogram(44),
  ImGuiCol_PlotHistogramHovered(45),
  ImGuiCol_TableHeaderBg(46),
  ImGuiCol_TableBorderStrong(47),
  ImGuiCol_TableBorderLight(48),
  ImGuiCol_TableRowBg(49),
  ImGuiCol_TableRowBgAlt(50),
  ImGuiCol_TextLink(51),
  ImGuiCol_TextSelectedBg(52),
  ImGuiCol_DragDropTarget(53),
  ImGuiCol_NavCursor(54),
  ImGuiCol_NavWindowingHighlight(55),
  ImGuiCol_NavWindowingDimBg(56),
  ImGuiCol_ModalWindowDimBg(57),
  ImGuiCol_COUNT(58);

  final int value;
  const ImGuiCol_(this.value);

  static ImGuiCol_ fromValue(int value) => switch (value) {
        0 => ImGuiCol_Text,
        1 => ImGuiCol_TextDisabled,
        2 => ImGuiCol_WindowBg,
        3 => ImGuiCol_ChildBg,
        4 => ImGuiCol_PopupBg,
        5 => ImGuiCol_Border,
        6 => ImGuiCol_BorderShadow,
        7 => ImGuiCol_FrameBg,
        8 => ImGuiCol_FrameBgHovered,
        9 => ImGuiCol_FrameBgActive,
        10 => ImGuiCol_TitleBg,
        11 => ImGuiCol_TitleBgActive,
        12 => ImGuiCol_TitleBgCollapsed,
        13 => ImGuiCol_MenuBarBg,
        14 => ImGuiCol_ScrollbarBg,
        15 => ImGuiCol_ScrollbarGrab,
        16 => ImGuiCol_ScrollbarGrabHovered,
        17 => ImGuiCol_ScrollbarGrabActive,
        18 => ImGuiCol_CheckMark,
        19 => ImGuiCol_SliderGrab,
        20 => ImGuiCol_SliderGrabActive,
        21 => ImGuiCol_Button,
        22 => ImGuiCol_ButtonHovered,
        23 => ImGuiCol_ButtonActive,
        24 => ImGuiCol_Header,
        25 => ImGuiCol_HeaderHovered,
        26 => ImGuiCol_HeaderActive,
        27 => ImGuiCol_Separator,
        28 => ImGuiCol_SeparatorHovered,
        29 => ImGuiCol_SeparatorActive,
        30 => ImGuiCol_ResizeGrip,
        31 => ImGuiCol_ResizeGripHovered,
        32 => ImGuiCol_ResizeGripActive,
        33 => ImGuiCol_TabHovered,
        34 => ImGuiCol_Tab,
        35 => ImGuiCol_TabSelected,
        36 => ImGuiCol_TabSelectedOverline,
        37 => ImGuiCol_TabDimmed,
        38 => ImGuiCol_TabDimmedSelected,
        39 => ImGuiCol_TabDimmedSelectedOverline,
        40 => ImGuiCol_DockingPreview,
        41 => ImGuiCol_DockingEmptyBg,
        42 => ImGuiCol_PlotLines,
        43 => ImGuiCol_PlotLinesHovered,
        44 => ImGuiCol_PlotHistogram,
        45 => ImGuiCol_PlotHistogramHovered,
        46 => ImGuiCol_TableHeaderBg,
        47 => ImGuiCol_TableBorderStrong,
        48 => ImGuiCol_TableBorderLight,
        49 => ImGuiCol_TableRowBg,
        50 => ImGuiCol_TableRowBgAlt,
        51 => ImGuiCol_TextLink,
        52 => ImGuiCol_TextSelectedBg,
        53 => ImGuiCol_DragDropTarget,
        54 => ImGuiCol_NavCursor,
        55 => ImGuiCol_NavWindowingHighlight,
        56 => ImGuiCol_NavWindowingDimBg,
        57 => ImGuiCol_ModalWindowDimBg,
        58 => ImGuiCol_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiCol_: $value"),
      };
}

enum ImGuiStyleVar_ {
  ImGuiStyleVar_Alpha(0),
  ImGuiStyleVar_DisabledAlpha(1),
  ImGuiStyleVar_WindowPadding(2),
  ImGuiStyleVar_WindowRounding(3),
  ImGuiStyleVar_WindowBorderSize(4),
  ImGuiStyleVar_WindowMinSize(5),
  ImGuiStyleVar_WindowTitleAlign(6),
  ImGuiStyleVar_ChildRounding(7),
  ImGuiStyleVar_ChildBorderSize(8),
  ImGuiStyleVar_PopupRounding(9),
  ImGuiStyleVar_PopupBorderSize(10),
  ImGuiStyleVar_FramePadding(11),
  ImGuiStyleVar_FrameRounding(12),
  ImGuiStyleVar_FrameBorderSize(13),
  ImGuiStyleVar_ItemSpacing(14),
  ImGuiStyleVar_ItemInnerSpacing(15),
  ImGuiStyleVar_IndentSpacing(16),
  ImGuiStyleVar_CellPadding(17),
  ImGuiStyleVar_ScrollbarSize(18),
  ImGuiStyleVar_ScrollbarRounding(19),
  ImGuiStyleVar_GrabMinSize(20),
  ImGuiStyleVar_GrabRounding(21),
  ImGuiStyleVar_TabRounding(22),
  ImGuiStyleVar_TabBorderSize(23),
  ImGuiStyleVar_TabBarBorderSize(24),
  ImGuiStyleVar_TabBarOverlineSize(25),
  ImGuiStyleVar_TableAngledHeadersAngle(26),
  ImGuiStyleVar_TableAngledHeadersTextAlign(27),
  ImGuiStyleVar_ButtonTextAlign(28),
  ImGuiStyleVar_SelectableTextAlign(29),
  ImGuiStyleVar_SeparatorTextBorderSize(30),
  ImGuiStyleVar_SeparatorTextAlign(31),
  ImGuiStyleVar_SeparatorTextPadding(32),
  ImGuiStyleVar_DockingSeparatorSize(33),
  ImGuiStyleVar_COUNT(34);

  final int value;
  const ImGuiStyleVar_(this.value);

  static ImGuiStyleVar_ fromValue(int value) => switch (value) {
        0 => ImGuiStyleVar_Alpha,
        1 => ImGuiStyleVar_DisabledAlpha,
        2 => ImGuiStyleVar_WindowPadding,
        3 => ImGuiStyleVar_WindowRounding,
        4 => ImGuiStyleVar_WindowBorderSize,
        5 => ImGuiStyleVar_WindowMinSize,
        6 => ImGuiStyleVar_WindowTitleAlign,
        7 => ImGuiStyleVar_ChildRounding,
        8 => ImGuiStyleVar_ChildBorderSize,
        9 => ImGuiStyleVar_PopupRounding,
        10 => ImGuiStyleVar_PopupBorderSize,
        11 => ImGuiStyleVar_FramePadding,
        12 => ImGuiStyleVar_FrameRounding,
        13 => ImGuiStyleVar_FrameBorderSize,
        14 => ImGuiStyleVar_ItemSpacing,
        15 => ImGuiStyleVar_ItemInnerSpacing,
        16 => ImGuiStyleVar_IndentSpacing,
        17 => ImGuiStyleVar_CellPadding,
        18 => ImGuiStyleVar_ScrollbarSize,
        19 => ImGuiStyleVar_ScrollbarRounding,
        20 => ImGuiStyleVar_GrabMinSize,
        21 => ImGuiStyleVar_GrabRounding,
        22 => ImGuiStyleVar_TabRounding,
        23 => ImGuiStyleVar_TabBorderSize,
        24 => ImGuiStyleVar_TabBarBorderSize,
        25 => ImGuiStyleVar_TabBarOverlineSize,
        26 => ImGuiStyleVar_TableAngledHeadersAngle,
        27 => ImGuiStyleVar_TableAngledHeadersTextAlign,
        28 => ImGuiStyleVar_ButtonTextAlign,
        29 => ImGuiStyleVar_SelectableTextAlign,
        30 => ImGuiStyleVar_SeparatorTextBorderSize,
        31 => ImGuiStyleVar_SeparatorTextAlign,
        32 => ImGuiStyleVar_SeparatorTextPadding,
        33 => ImGuiStyleVar_DockingSeparatorSize,
        34 => ImGuiStyleVar_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiStyleVar_: $value"),
      };
}

enum ImGuiButtonFlags_ {
  ImGuiButtonFlags_None(0),
  ImGuiButtonFlags_MouseButtonLeft(1),
  ImGuiButtonFlags_MouseButtonRight(2),
  ImGuiButtonFlags_MouseButtonMiddle(4),
  ImGuiButtonFlags_MouseButtonMask_(7),
  ImGuiButtonFlags_EnableNav(8);

  final int value;
  const ImGuiButtonFlags_(this.value);

  static ImGuiButtonFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiButtonFlags_None,
        1 => ImGuiButtonFlags_MouseButtonLeft,
        2 => ImGuiButtonFlags_MouseButtonRight,
        4 => ImGuiButtonFlags_MouseButtonMiddle,
        7 => ImGuiButtonFlags_MouseButtonMask_,
        8 => ImGuiButtonFlags_EnableNav,
        _ => throw ArgumentError("Unknown value for ImGuiButtonFlags_: $value"),
      };
}

enum ImGuiColorEditFlags_ {
  ImGuiColorEditFlags_None(0),
  ImGuiColorEditFlags_NoAlpha(2),
  ImGuiColorEditFlags_NoPicker(4),
  ImGuiColorEditFlags_NoOptions(8),
  ImGuiColorEditFlags_NoSmallPreview(16),
  ImGuiColorEditFlags_NoInputs(32),
  ImGuiColorEditFlags_NoTooltip(64),
  ImGuiColorEditFlags_NoLabel(128),
  ImGuiColorEditFlags_NoSidePreview(256),
  ImGuiColorEditFlags_NoDragDrop(512),
  ImGuiColorEditFlags_NoBorder(1024),
  ImGuiColorEditFlags_AlphaBar(65536),
  ImGuiColorEditFlags_AlphaPreview(131072),
  ImGuiColorEditFlags_AlphaPreviewHalf(262144),
  ImGuiColorEditFlags_HDR(524288),
  ImGuiColorEditFlags_DisplayRGB(1048576),
  ImGuiColorEditFlags_DisplayHSV(2097152),
  ImGuiColorEditFlags_DisplayHex(4194304),
  ImGuiColorEditFlags_Uint8(8388608),
  ImGuiColorEditFlags_Float(16777216),
  ImGuiColorEditFlags_PickerHueBar(33554432),
  ImGuiColorEditFlags_PickerHueWheel(67108864),
  ImGuiColorEditFlags_InputRGB(134217728),
  ImGuiColorEditFlags_InputHSV(268435456),
  ImGuiColorEditFlags_DefaultOptions_(177209344),
  ImGuiColorEditFlags_DisplayMask_(7340032),
  ImGuiColorEditFlags_DataTypeMask_(25165824),
  ImGuiColorEditFlags_PickerMask_(100663296),
  ImGuiColorEditFlags_InputMask_(402653184);

  final int value;
  const ImGuiColorEditFlags_(this.value);

  static ImGuiColorEditFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiColorEditFlags_None,
        2 => ImGuiColorEditFlags_NoAlpha,
        4 => ImGuiColorEditFlags_NoPicker,
        8 => ImGuiColorEditFlags_NoOptions,
        16 => ImGuiColorEditFlags_NoSmallPreview,
        32 => ImGuiColorEditFlags_NoInputs,
        64 => ImGuiColorEditFlags_NoTooltip,
        128 => ImGuiColorEditFlags_NoLabel,
        256 => ImGuiColorEditFlags_NoSidePreview,
        512 => ImGuiColorEditFlags_NoDragDrop,
        1024 => ImGuiColorEditFlags_NoBorder,
        65536 => ImGuiColorEditFlags_AlphaBar,
        131072 => ImGuiColorEditFlags_AlphaPreview,
        262144 => ImGuiColorEditFlags_AlphaPreviewHalf,
        524288 => ImGuiColorEditFlags_HDR,
        1048576 => ImGuiColorEditFlags_DisplayRGB,
        2097152 => ImGuiColorEditFlags_DisplayHSV,
        4194304 => ImGuiColorEditFlags_DisplayHex,
        8388608 => ImGuiColorEditFlags_Uint8,
        16777216 => ImGuiColorEditFlags_Float,
        33554432 => ImGuiColorEditFlags_PickerHueBar,
        67108864 => ImGuiColorEditFlags_PickerHueWheel,
        134217728 => ImGuiColorEditFlags_InputRGB,
        268435456 => ImGuiColorEditFlags_InputHSV,
        177209344 => ImGuiColorEditFlags_DefaultOptions_,
        7340032 => ImGuiColorEditFlags_DisplayMask_,
        25165824 => ImGuiColorEditFlags_DataTypeMask_,
        100663296 => ImGuiColorEditFlags_PickerMask_,
        402653184 => ImGuiColorEditFlags_InputMask_,
        _ =>
          throw ArgumentError("Unknown value for ImGuiColorEditFlags_: $value"),
      };
}

enum ImGuiSliderFlags_ {
  ImGuiSliderFlags_None(0),
  ImGuiSliderFlags_Logarithmic(32),
  ImGuiSliderFlags_NoRoundToFormat(64),
  ImGuiSliderFlags_NoInput(128),
  ImGuiSliderFlags_WrapAround(256),
  ImGuiSliderFlags_ClampOnInput(512),
  ImGuiSliderFlags_ClampZeroRange(1024),
  ImGuiSliderFlags_AlwaysClamp(1536),
  ImGuiSliderFlags_InvalidMask_(1879048207);

  final int value;
  const ImGuiSliderFlags_(this.value);

  static ImGuiSliderFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiSliderFlags_None,
        32 => ImGuiSliderFlags_Logarithmic,
        64 => ImGuiSliderFlags_NoRoundToFormat,
        128 => ImGuiSliderFlags_NoInput,
        256 => ImGuiSliderFlags_WrapAround,
        512 => ImGuiSliderFlags_ClampOnInput,
        1024 => ImGuiSliderFlags_ClampZeroRange,
        1536 => ImGuiSliderFlags_AlwaysClamp,
        1879048207 => ImGuiSliderFlags_InvalidMask_,
        _ => throw ArgumentError("Unknown value for ImGuiSliderFlags_: $value"),
      };
}

enum ImGuiMouseButton_ {
  ImGuiMouseButton_Left(0),
  ImGuiMouseButton_Right(1),
  ImGuiMouseButton_Middle(2),
  ImGuiMouseButton_COUNT(5);

  final int value;
  const ImGuiMouseButton_(this.value);

  static ImGuiMouseButton_ fromValue(int value) => switch (value) {
        0 => ImGuiMouseButton_Left,
        1 => ImGuiMouseButton_Right,
        2 => ImGuiMouseButton_Middle,
        5 => ImGuiMouseButton_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiMouseButton_: $value"),
      };
}

enum ImGuiMouseCursor_ {
  ImGuiMouseCursor_None(-1),
  ImGuiMouseCursor_Arrow(0),
  ImGuiMouseCursor_TextInput(1),
  ImGuiMouseCursor_ResizeAll(2),
  ImGuiMouseCursor_ResizeNS(3),
  ImGuiMouseCursor_ResizeEW(4),
  ImGuiMouseCursor_ResizeNESW(5),
  ImGuiMouseCursor_ResizeNWSE(6),
  ImGuiMouseCursor_Hand(7),
  ImGuiMouseCursor_NotAllowed(8),
  ImGuiMouseCursor_COUNT(9);

  final int value;
  const ImGuiMouseCursor_(this.value);

  static ImGuiMouseCursor_ fromValue(int value) => switch (value) {
        -1 => ImGuiMouseCursor_None,
        0 => ImGuiMouseCursor_Arrow,
        1 => ImGuiMouseCursor_TextInput,
        2 => ImGuiMouseCursor_ResizeAll,
        3 => ImGuiMouseCursor_ResizeNS,
        4 => ImGuiMouseCursor_ResizeEW,
        5 => ImGuiMouseCursor_ResizeNESW,
        6 => ImGuiMouseCursor_ResizeNWSE,
        7 => ImGuiMouseCursor_Hand,
        8 => ImGuiMouseCursor_NotAllowed,
        9 => ImGuiMouseCursor_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiMouseCursor_: $value"),
      };
}

enum ImGuiCond_ {
  ImGuiCond_None(0),
  ImGuiCond_Always(1),
  ImGuiCond_Once(2),
  ImGuiCond_FirstUseEver(4),
  ImGuiCond_Appearing(8);

  final int value;
  const ImGuiCond_(this.value);

  static ImGuiCond_ fromValue(int value) => switch (value) {
        0 => ImGuiCond_None,
        1 => ImGuiCond_Always,
        2 => ImGuiCond_Once,
        4 => ImGuiCond_FirstUseEver,
        8 => ImGuiCond_Appearing,
        _ => throw ArgumentError("Unknown value for ImGuiCond_: $value"),
      };
}

enum ImGuiTableFlags_ {
  ImGuiTableFlags_None(0),
  ImGuiTableFlags_Resizable(1),
  ImGuiTableFlags_Reorderable(2),
  ImGuiTableFlags_Hideable(4),
  ImGuiTableFlags_Sortable(8),
  ImGuiTableFlags_NoSavedSettings(16),
  ImGuiTableFlags_ContextMenuInBody(32),
  ImGuiTableFlags_RowBg(64),
  ImGuiTableFlags_BordersInnerH(128),
  ImGuiTableFlags_BordersOuterH(256),
  ImGuiTableFlags_BordersInnerV(512),
  ImGuiTableFlags_BordersOuterV(1024),
  ImGuiTableFlags_BordersH(384),
  ImGuiTableFlags_BordersV(1536),
  ImGuiTableFlags_BordersInner(640),
  ImGuiTableFlags_BordersOuter(1280),
  ImGuiTableFlags_Borders(1920),
  ImGuiTableFlags_NoBordersInBody(2048),
  ImGuiTableFlags_NoBordersInBodyUntilResize(4096),
  ImGuiTableFlags_SizingFixedFit(8192),
  ImGuiTableFlags_SizingFixedSame(16384),
  ImGuiTableFlags_SizingStretchProp(24576),
  ImGuiTableFlags_SizingStretchSame(32768),
  ImGuiTableFlags_NoHostExtendX(65536),
  ImGuiTableFlags_NoHostExtendY(131072),
  ImGuiTableFlags_NoKeepColumnsVisible(262144),
  ImGuiTableFlags_PreciseWidths(524288),
  ImGuiTableFlags_NoClip(1048576),
  ImGuiTableFlags_PadOuterX(2097152),
  ImGuiTableFlags_NoPadOuterX(4194304),
  ImGuiTableFlags_NoPadInnerX(8388608),
  ImGuiTableFlags_ScrollX(16777216),
  ImGuiTableFlags_ScrollY(33554432),
  ImGuiTableFlags_SortMulti(67108864),
  ImGuiTableFlags_SortTristate(134217728),
  ImGuiTableFlags_HighlightHoveredColumn(268435456),
  ImGuiTableFlags_SizingMask_(57344);

  final int value;
  const ImGuiTableFlags_(this.value);

  static ImGuiTableFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTableFlags_None,
        1 => ImGuiTableFlags_Resizable,
        2 => ImGuiTableFlags_Reorderable,
        4 => ImGuiTableFlags_Hideable,
        8 => ImGuiTableFlags_Sortable,
        16 => ImGuiTableFlags_NoSavedSettings,
        32 => ImGuiTableFlags_ContextMenuInBody,
        64 => ImGuiTableFlags_RowBg,
        128 => ImGuiTableFlags_BordersInnerH,
        256 => ImGuiTableFlags_BordersOuterH,
        512 => ImGuiTableFlags_BordersInnerV,
        1024 => ImGuiTableFlags_BordersOuterV,
        384 => ImGuiTableFlags_BordersH,
        1536 => ImGuiTableFlags_BordersV,
        640 => ImGuiTableFlags_BordersInner,
        1280 => ImGuiTableFlags_BordersOuter,
        1920 => ImGuiTableFlags_Borders,
        2048 => ImGuiTableFlags_NoBordersInBody,
        4096 => ImGuiTableFlags_NoBordersInBodyUntilResize,
        8192 => ImGuiTableFlags_SizingFixedFit,
        16384 => ImGuiTableFlags_SizingFixedSame,
        24576 => ImGuiTableFlags_SizingStretchProp,
        32768 => ImGuiTableFlags_SizingStretchSame,
        65536 => ImGuiTableFlags_NoHostExtendX,
        131072 => ImGuiTableFlags_NoHostExtendY,
        262144 => ImGuiTableFlags_NoKeepColumnsVisible,
        524288 => ImGuiTableFlags_PreciseWidths,
        1048576 => ImGuiTableFlags_NoClip,
        2097152 => ImGuiTableFlags_PadOuterX,
        4194304 => ImGuiTableFlags_NoPadOuterX,
        8388608 => ImGuiTableFlags_NoPadInnerX,
        16777216 => ImGuiTableFlags_ScrollX,
        33554432 => ImGuiTableFlags_ScrollY,
        67108864 => ImGuiTableFlags_SortMulti,
        134217728 => ImGuiTableFlags_SortTristate,
        268435456 => ImGuiTableFlags_HighlightHoveredColumn,
        57344 => ImGuiTableFlags_SizingMask_,
        _ => throw ArgumentError("Unknown value for ImGuiTableFlags_: $value"),
      };
}

enum ImGuiTableColumnFlags_ {
  ImGuiTableColumnFlags_None(0),
  ImGuiTableColumnFlags_Disabled(1),
  ImGuiTableColumnFlags_DefaultHide(2),
  ImGuiTableColumnFlags_DefaultSort(4),
  ImGuiTableColumnFlags_WidthStretch(8),
  ImGuiTableColumnFlags_WidthFixed(16),
  ImGuiTableColumnFlags_NoResize(32),
  ImGuiTableColumnFlags_NoReorder(64),
  ImGuiTableColumnFlags_NoHide(128),
  ImGuiTableColumnFlags_NoClip(256),
  ImGuiTableColumnFlags_NoSort(512),
  ImGuiTableColumnFlags_NoSortAscending(1024),
  ImGuiTableColumnFlags_NoSortDescending(2048),
  ImGuiTableColumnFlags_NoHeaderLabel(4096),
  ImGuiTableColumnFlags_NoHeaderWidth(8192),
  ImGuiTableColumnFlags_PreferSortAscending(16384),
  ImGuiTableColumnFlags_PreferSortDescending(32768),
  ImGuiTableColumnFlags_IndentEnable(65536),
  ImGuiTableColumnFlags_IndentDisable(131072),
  ImGuiTableColumnFlags_AngledHeader(262144),
  ImGuiTableColumnFlags_IsEnabled(16777216),
  ImGuiTableColumnFlags_IsVisible(33554432),
  ImGuiTableColumnFlags_IsSorted(67108864),
  ImGuiTableColumnFlags_IsHovered(134217728),
  ImGuiTableColumnFlags_WidthMask_(24),
  ImGuiTableColumnFlags_IndentMask_(196608),
  ImGuiTableColumnFlags_StatusMask_(251658240),
  ImGuiTableColumnFlags_NoDirectResize_(1073741824);

  final int value;
  const ImGuiTableColumnFlags_(this.value);

  static ImGuiTableColumnFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTableColumnFlags_None,
        1 => ImGuiTableColumnFlags_Disabled,
        2 => ImGuiTableColumnFlags_DefaultHide,
        4 => ImGuiTableColumnFlags_DefaultSort,
        8 => ImGuiTableColumnFlags_WidthStretch,
        16 => ImGuiTableColumnFlags_WidthFixed,
        32 => ImGuiTableColumnFlags_NoResize,
        64 => ImGuiTableColumnFlags_NoReorder,
        128 => ImGuiTableColumnFlags_NoHide,
        256 => ImGuiTableColumnFlags_NoClip,
        512 => ImGuiTableColumnFlags_NoSort,
        1024 => ImGuiTableColumnFlags_NoSortAscending,
        2048 => ImGuiTableColumnFlags_NoSortDescending,
        4096 => ImGuiTableColumnFlags_NoHeaderLabel,
        8192 => ImGuiTableColumnFlags_NoHeaderWidth,
        16384 => ImGuiTableColumnFlags_PreferSortAscending,
        32768 => ImGuiTableColumnFlags_PreferSortDescending,
        65536 => ImGuiTableColumnFlags_IndentEnable,
        131072 => ImGuiTableColumnFlags_IndentDisable,
        262144 => ImGuiTableColumnFlags_AngledHeader,
        16777216 => ImGuiTableColumnFlags_IsEnabled,
        33554432 => ImGuiTableColumnFlags_IsVisible,
        67108864 => ImGuiTableColumnFlags_IsSorted,
        134217728 => ImGuiTableColumnFlags_IsHovered,
        24 => ImGuiTableColumnFlags_WidthMask_,
        196608 => ImGuiTableColumnFlags_IndentMask_,
        251658240 => ImGuiTableColumnFlags_StatusMask_,
        1073741824 => ImGuiTableColumnFlags_NoDirectResize_,
        _ => throw ArgumentError(
            "Unknown value for ImGuiTableColumnFlags_: $value"),
      };
}

enum ImGuiTableRowFlags_ {
  ImGuiTableRowFlags_None(0),
  ImGuiTableRowFlags_Headers(1);

  final int value;
  const ImGuiTableRowFlags_(this.value);

  static ImGuiTableRowFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTableRowFlags_None,
        1 => ImGuiTableRowFlags_Headers,
        _ =>
          throw ArgumentError("Unknown value for ImGuiTableRowFlags_: $value"),
      };
}

enum ImGuiTableBgTarget_ {
  ImGuiTableBgTarget_None(0),
  ImGuiTableBgTarget_RowBg0(1),
  ImGuiTableBgTarget_RowBg1(2),
  ImGuiTableBgTarget_CellBg(3);

  final int value;
  const ImGuiTableBgTarget_(this.value);

  static ImGuiTableBgTarget_ fromValue(int value) => switch (value) {
        0 => ImGuiTableBgTarget_None,
        1 => ImGuiTableBgTarget_RowBg0,
        2 => ImGuiTableBgTarget_RowBg1,
        3 => ImGuiTableBgTarget_CellBg,
        _ =>
          throw ArgumentError("Unknown value for ImGuiTableBgTarget_: $value"),
      };
}

enum ImGuiMultiSelectFlags_ {
  ImGuiMultiSelectFlags_None(0),
  ImGuiMultiSelectFlags_SingleSelect(1),
  ImGuiMultiSelectFlags_NoSelectAll(2),
  ImGuiMultiSelectFlags_NoRangeSelect(4),
  ImGuiMultiSelectFlags_NoAutoSelect(8),
  ImGuiMultiSelectFlags_NoAutoClear(16),
  ImGuiMultiSelectFlags_NoAutoClearOnReselect(32),
  ImGuiMultiSelectFlags_BoxSelect1d(64),
  ImGuiMultiSelectFlags_BoxSelect2d(128),
  ImGuiMultiSelectFlags_BoxSelectNoScroll(256),
  ImGuiMultiSelectFlags_ClearOnEscape(512),
  ImGuiMultiSelectFlags_ClearOnClickVoid(1024),
  ImGuiMultiSelectFlags_ScopeWindow(2048),
  ImGuiMultiSelectFlags_ScopeRect(4096),
  ImGuiMultiSelectFlags_SelectOnClick(8192),
  ImGuiMultiSelectFlags_SelectOnClickRelease(16384),
  ImGuiMultiSelectFlags_NavWrapX(65536);

  final int value;
  const ImGuiMultiSelectFlags_(this.value);

  static ImGuiMultiSelectFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiMultiSelectFlags_None,
        1 => ImGuiMultiSelectFlags_SingleSelect,
        2 => ImGuiMultiSelectFlags_NoSelectAll,
        4 => ImGuiMultiSelectFlags_NoRangeSelect,
        8 => ImGuiMultiSelectFlags_NoAutoSelect,
        16 => ImGuiMultiSelectFlags_NoAutoClear,
        32 => ImGuiMultiSelectFlags_NoAutoClearOnReselect,
        64 => ImGuiMultiSelectFlags_BoxSelect1d,
        128 => ImGuiMultiSelectFlags_BoxSelect2d,
        256 => ImGuiMultiSelectFlags_BoxSelectNoScroll,
        512 => ImGuiMultiSelectFlags_ClearOnEscape,
        1024 => ImGuiMultiSelectFlags_ClearOnClickVoid,
        2048 => ImGuiMultiSelectFlags_ScopeWindow,
        4096 => ImGuiMultiSelectFlags_ScopeRect,
        8192 => ImGuiMultiSelectFlags_SelectOnClick,
        16384 => ImGuiMultiSelectFlags_SelectOnClickRelease,
        65536 => ImGuiMultiSelectFlags_NavWrapX,
        _ => throw ArgumentError(
            "Unknown value for ImGuiMultiSelectFlags_: $value"),
      };
}

enum ImDrawFlags_ {
  ImDrawFlags_None(0),
  ImDrawFlags_Closed(1),
  ImDrawFlags_RoundCornersTopLeft(16),
  ImDrawFlags_RoundCornersTopRight(32),
  ImDrawFlags_RoundCornersBottomLeft(64),
  ImDrawFlags_RoundCornersBottomRight(128),
  ImDrawFlags_RoundCornersNone(256),
  ImDrawFlags_RoundCornersTop(48),
  ImDrawFlags_RoundCornersBottom(192),
  ImDrawFlags_RoundCornersLeft(80),
  ImDrawFlags_RoundCornersRight(160),
  ImDrawFlags_RoundCornersAll(240),
  ImDrawFlags_RoundCornersMask_(496);

  static const ImDrawFlags_RoundCornersDefault_ = ImDrawFlags_RoundCornersAll;

  final int value;
  const ImDrawFlags_(this.value);

  static ImDrawFlags_ fromValue(int value) => switch (value) {
        0 => ImDrawFlags_None,
        1 => ImDrawFlags_Closed,
        16 => ImDrawFlags_RoundCornersTopLeft,
        32 => ImDrawFlags_RoundCornersTopRight,
        64 => ImDrawFlags_RoundCornersBottomLeft,
        128 => ImDrawFlags_RoundCornersBottomRight,
        256 => ImDrawFlags_RoundCornersNone,
        48 => ImDrawFlags_RoundCornersTop,
        192 => ImDrawFlags_RoundCornersBottom,
        80 => ImDrawFlags_RoundCornersLeft,
        160 => ImDrawFlags_RoundCornersRight,
        240 => ImDrawFlags_RoundCornersAll,
        496 => ImDrawFlags_RoundCornersMask_,
        _ => throw ArgumentError("Unknown value for ImDrawFlags_: $value"),
      };

  @override
  String toString() {
    if (this == ImDrawFlags_RoundCornersAll)
      return "ImDrawFlags_.ImDrawFlags_RoundCornersAll, ImDrawFlags_.ImDrawFlags_RoundCornersDefault_";
    return super.toString();
  }
}

enum ImDrawListFlags_ {
  ImDrawListFlags_None(0),
  ImDrawListFlags_AntiAliasedLines(1),
  ImDrawListFlags_AntiAliasedLinesUseTex(2),
  ImDrawListFlags_AntiAliasedFill(4),
  ImDrawListFlags_AllowVtxOffset(8);

  final int value;
  const ImDrawListFlags_(this.value);

  static ImDrawListFlags_ fromValue(int value) => switch (value) {
        0 => ImDrawListFlags_None,
        1 => ImDrawListFlags_AntiAliasedLines,
        2 => ImDrawListFlags_AntiAliasedLinesUseTex,
        4 => ImDrawListFlags_AntiAliasedFill,
        8 => ImDrawListFlags_AllowVtxOffset,
        _ => throw ArgumentError("Unknown value for ImDrawListFlags_: $value"),
      };
}

enum ImFontAtlasFlags_ {
  ImFontAtlasFlags_None(0),
  ImFontAtlasFlags_NoPowerOfTwoHeight(1),
  ImFontAtlasFlags_NoMouseCursors(2),
  ImFontAtlasFlags_NoBakedLines(4);

  final int value;
  const ImFontAtlasFlags_(this.value);

  static ImFontAtlasFlags_ fromValue(int value) => switch (value) {
        0 => ImFontAtlasFlags_None,
        1 => ImFontAtlasFlags_NoPowerOfTwoHeight,
        2 => ImFontAtlasFlags_NoMouseCursors,
        4 => ImFontAtlasFlags_NoBakedLines,
        _ => throw ArgumentError("Unknown value for ImFontAtlasFlags_: $value"),
      };
}

enum ImGuiViewportFlags_ {
  ImGuiViewportFlags_None(0),
  ImGuiViewportFlags_IsPlatformWindow(1),
  ImGuiViewportFlags_IsPlatformMonitor(2),
  ImGuiViewportFlags_OwnedByApp(4),
  ImGuiViewportFlags_NoDecoration(8),
  ImGuiViewportFlags_NoTaskBarIcon(16),
  ImGuiViewportFlags_NoFocusOnAppearing(32),
  ImGuiViewportFlags_NoFocusOnClick(64),
  ImGuiViewportFlags_NoInputs(128),
  ImGuiViewportFlags_NoRendererClear(256),
  ImGuiViewportFlags_NoAutoMerge(512),
  ImGuiViewportFlags_TopMost(1024),
  ImGuiViewportFlags_CanHostOtherWindows(2048),
  ImGuiViewportFlags_IsMinimized(4096),
  ImGuiViewportFlags_IsFocused(8192);

  final int value;
  const ImGuiViewportFlags_(this.value);

  static ImGuiViewportFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiViewportFlags_None,
        1 => ImGuiViewportFlags_IsPlatformWindow,
        2 => ImGuiViewportFlags_IsPlatformMonitor,
        4 => ImGuiViewportFlags_OwnedByApp,
        8 => ImGuiViewportFlags_NoDecoration,
        16 => ImGuiViewportFlags_NoTaskBarIcon,
        32 => ImGuiViewportFlags_NoFocusOnAppearing,
        64 => ImGuiViewportFlags_NoFocusOnClick,
        128 => ImGuiViewportFlags_NoInputs,
        256 => ImGuiViewportFlags_NoRendererClear,
        512 => ImGuiViewportFlags_NoAutoMerge,
        1024 => ImGuiViewportFlags_TopMost,
        2048 => ImGuiViewportFlags_CanHostOtherWindows,
        4096 => ImGuiViewportFlags_IsMinimized,
        8192 => ImGuiViewportFlags_IsFocused,
        _ =>
          throw ArgumentError("Unknown value for ImGuiViewportFlags_: $value"),
      };
}

final class ImGuiTextIndex extends ffi.Struct {
  external ImVector_int LineOffsets;

  @ffi.Int()
  external int EndOffset;
}

final class ImVector_int extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Int> Data;
}

enum ImGuiDataTypePrivate_ {
  ImGuiDataType_String(12),
  ImGuiDataType_Pointer(13),
  ImGuiDataType_ID(14);

  final int value;
  const ImGuiDataTypePrivate_(this.value);

  static ImGuiDataTypePrivate_ fromValue(int value) => switch (value) {
        12 => ImGuiDataType_String,
        13 => ImGuiDataType_Pointer,
        14 => ImGuiDataType_ID,
        _ => throw ArgumentError(
            "Unknown value for ImGuiDataTypePrivate_: $value"),
      };
}

enum ImGuiItemFlagsPrivate_ {
  ImGuiItemFlags_Disabled(1024),
  ImGuiItemFlags_ReadOnly(2048),
  ImGuiItemFlags_MixedValue(4096),
  ImGuiItemFlags_NoWindowHoverableCheck(8192),
  ImGuiItemFlags_AllowOverlap(16384),
  ImGuiItemFlags_NoNavDisableMouseHover(32768),
  ImGuiItemFlags_NoMarkEdited(65536),
  ImGuiItemFlags_Inputable(1048576),
  ImGuiItemFlags_HasSelectionUserData(2097152),
  ImGuiItemFlags_IsMultiSelect(4194304),
  ImGuiItemFlags_Default_(16);

  final int value;
  const ImGuiItemFlagsPrivate_(this.value);

  static ImGuiItemFlagsPrivate_ fromValue(int value) => switch (value) {
        1024 => ImGuiItemFlags_Disabled,
        2048 => ImGuiItemFlags_ReadOnly,
        4096 => ImGuiItemFlags_MixedValue,
        8192 => ImGuiItemFlags_NoWindowHoverableCheck,
        16384 => ImGuiItemFlags_AllowOverlap,
        32768 => ImGuiItemFlags_NoNavDisableMouseHover,
        65536 => ImGuiItemFlags_NoMarkEdited,
        1048576 => ImGuiItemFlags_Inputable,
        2097152 => ImGuiItemFlags_HasSelectionUserData,
        4194304 => ImGuiItemFlags_IsMultiSelect,
        16 => ImGuiItemFlags_Default_,
        _ => throw ArgumentError(
            "Unknown value for ImGuiItemFlagsPrivate_: $value"),
      };
}

enum ImGuiItemStatusFlags_ {
  ImGuiItemStatusFlags_None(0),
  ImGuiItemStatusFlags_HoveredRect(1),
  ImGuiItemStatusFlags_HasDisplayRect(2),
  ImGuiItemStatusFlags_Edited(4),
  ImGuiItemStatusFlags_ToggledSelection(8),
  ImGuiItemStatusFlags_ToggledOpen(16),
  ImGuiItemStatusFlags_HasDeactivated(32),
  ImGuiItemStatusFlags_Deactivated(64),
  ImGuiItemStatusFlags_HoveredWindow(128),
  ImGuiItemStatusFlags_Visible(256),
  ImGuiItemStatusFlags_HasClipRect(512),
  ImGuiItemStatusFlags_HasShortcut(1024);

  final int value;
  const ImGuiItemStatusFlags_(this.value);

  static ImGuiItemStatusFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiItemStatusFlags_None,
        1 => ImGuiItemStatusFlags_HoveredRect,
        2 => ImGuiItemStatusFlags_HasDisplayRect,
        4 => ImGuiItemStatusFlags_Edited,
        8 => ImGuiItemStatusFlags_ToggledSelection,
        16 => ImGuiItemStatusFlags_ToggledOpen,
        32 => ImGuiItemStatusFlags_HasDeactivated,
        64 => ImGuiItemStatusFlags_Deactivated,
        128 => ImGuiItemStatusFlags_HoveredWindow,
        256 => ImGuiItemStatusFlags_Visible,
        512 => ImGuiItemStatusFlags_HasClipRect,
        1024 => ImGuiItemStatusFlags_HasShortcut,
        _ => throw ArgumentError(
            "Unknown value for ImGuiItemStatusFlags_: $value"),
      };
}

enum ImGuiHoveredFlagsPrivate_ {
  ImGuiHoveredFlags_DelayMask_(245760),
  ImGuiHoveredFlags_AllowedMaskForIsWindowHovered(12479),
  ImGuiHoveredFlags_AllowedMaskForIsItemHovered(262048);

  final int value;
  const ImGuiHoveredFlagsPrivate_(this.value);

  static ImGuiHoveredFlagsPrivate_ fromValue(int value) => switch (value) {
        245760 => ImGuiHoveredFlags_DelayMask_,
        12479 => ImGuiHoveredFlags_AllowedMaskForIsWindowHovered,
        262048 => ImGuiHoveredFlags_AllowedMaskForIsItemHovered,
        _ => throw ArgumentError(
            "Unknown value for ImGuiHoveredFlagsPrivate_: $value"),
      };
}

enum ImGuiInputTextFlagsPrivate_ {
  ImGuiInputTextFlags_Multiline(67108864),
  ImGuiInputTextFlags_MergedItem(134217728),
  ImGuiInputTextFlags_LocalizeDecimalPoint(268435456);

  final int value;
  const ImGuiInputTextFlagsPrivate_(this.value);

  static ImGuiInputTextFlagsPrivate_ fromValue(int value) => switch (value) {
        67108864 => ImGuiInputTextFlags_Multiline,
        134217728 => ImGuiInputTextFlags_MergedItem,
        268435456 => ImGuiInputTextFlags_LocalizeDecimalPoint,
        _ => throw ArgumentError(
            "Unknown value for ImGuiInputTextFlagsPrivate_: $value"),
      };
}

enum ImGuiButtonFlagsPrivate_ {
  ImGuiButtonFlags_PressedOnClick(16),
  ImGuiButtonFlags_PressedOnClickRelease(32),
  ImGuiButtonFlags_PressedOnClickReleaseAnywhere(64),
  ImGuiButtonFlags_PressedOnRelease(128),
  ImGuiButtonFlags_PressedOnDoubleClick(256),
  ImGuiButtonFlags_PressedOnDragDropHold(512),
  ImGuiButtonFlags_FlattenChildren(2048),
  ImGuiButtonFlags_AllowOverlap(4096),
  ImGuiButtonFlags_AlignTextBaseLine(32768),
  ImGuiButtonFlags_NoKeyModsAllowed(65536),
  ImGuiButtonFlags_NoHoldingActiveId(131072),
  ImGuiButtonFlags_NoNavFocus(262144),
  ImGuiButtonFlags_NoHoveredOnFocus(524288),
  ImGuiButtonFlags_NoSetKeyOwner(1048576),
  ImGuiButtonFlags_NoTestKeyOwner(2097152),
  ImGuiButtonFlags_PressedOnMask_(1008);

  static const ImGuiButtonFlags_PressedOnDefault_ =
      ImGuiButtonFlags_PressedOnClickRelease;

  final int value;
  const ImGuiButtonFlagsPrivate_(this.value);

  static ImGuiButtonFlagsPrivate_ fromValue(int value) => switch (value) {
        16 => ImGuiButtonFlags_PressedOnClick,
        32 => ImGuiButtonFlags_PressedOnClickRelease,
        64 => ImGuiButtonFlags_PressedOnClickReleaseAnywhere,
        128 => ImGuiButtonFlags_PressedOnRelease,
        256 => ImGuiButtonFlags_PressedOnDoubleClick,
        512 => ImGuiButtonFlags_PressedOnDragDropHold,
        2048 => ImGuiButtonFlags_FlattenChildren,
        4096 => ImGuiButtonFlags_AllowOverlap,
        32768 => ImGuiButtonFlags_AlignTextBaseLine,
        65536 => ImGuiButtonFlags_NoKeyModsAllowed,
        131072 => ImGuiButtonFlags_NoHoldingActiveId,
        262144 => ImGuiButtonFlags_NoNavFocus,
        524288 => ImGuiButtonFlags_NoHoveredOnFocus,
        1048576 => ImGuiButtonFlags_NoSetKeyOwner,
        2097152 => ImGuiButtonFlags_NoTestKeyOwner,
        1008 => ImGuiButtonFlags_PressedOnMask_,
        _ => throw ArgumentError(
            "Unknown value for ImGuiButtonFlagsPrivate_: $value"),
      };

  @override
  String toString() {
    if (this == ImGuiButtonFlags_PressedOnClickRelease)
      return "ImGuiButtonFlagsPrivate_.ImGuiButtonFlags_PressedOnClickRelease, ImGuiButtonFlagsPrivate_.ImGuiButtonFlags_PressedOnDefault_";
    return super.toString();
  }
}

enum ImGuiComboFlagsPrivate_ {
  ImGuiComboFlags_CustomPreview(1048576);

  final int value;
  const ImGuiComboFlagsPrivate_(this.value);

  static ImGuiComboFlagsPrivate_ fromValue(int value) => switch (value) {
        1048576 => ImGuiComboFlags_CustomPreview,
        _ => throw ArgumentError(
            "Unknown value for ImGuiComboFlagsPrivate_: $value"),
      };
}

enum ImGuiSliderFlagsPrivate_ {
  ImGuiSliderFlags_Vertical(1048576),
  ImGuiSliderFlags_ReadOnly(2097152);

  final int value;
  const ImGuiSliderFlagsPrivate_(this.value);

  static ImGuiSliderFlagsPrivate_ fromValue(int value) => switch (value) {
        1048576 => ImGuiSliderFlags_Vertical,
        2097152 => ImGuiSliderFlags_ReadOnly,
        _ => throw ArgumentError(
            "Unknown value for ImGuiSliderFlagsPrivate_: $value"),
      };
}

enum ImGuiSelectableFlagsPrivate_ {
  ImGuiSelectableFlags_NoHoldingActiveID(1048576),
  ImGuiSelectableFlags_SelectOnNav(2097152),
  ImGuiSelectableFlags_SelectOnClick(4194304),
  ImGuiSelectableFlags_SelectOnRelease(8388608),
  ImGuiSelectableFlags_SpanAvailWidth(16777216),
  ImGuiSelectableFlags_SetNavIdOnHover(33554432),
  ImGuiSelectableFlags_NoPadWithHalfSpacing(67108864),
  ImGuiSelectableFlags_NoSetKeyOwner(134217728);

  final int value;
  const ImGuiSelectableFlagsPrivate_(this.value);

  static ImGuiSelectableFlagsPrivate_ fromValue(int value) => switch (value) {
        1048576 => ImGuiSelectableFlags_NoHoldingActiveID,
        2097152 => ImGuiSelectableFlags_SelectOnNav,
        4194304 => ImGuiSelectableFlags_SelectOnClick,
        8388608 => ImGuiSelectableFlags_SelectOnRelease,
        16777216 => ImGuiSelectableFlags_SpanAvailWidth,
        33554432 => ImGuiSelectableFlags_SetNavIdOnHover,
        67108864 => ImGuiSelectableFlags_NoPadWithHalfSpacing,
        134217728 => ImGuiSelectableFlags_NoSetKeyOwner,
        _ => throw ArgumentError(
            "Unknown value for ImGuiSelectableFlagsPrivate_: $value"),
      };
}

enum ImGuiTreeNodeFlagsPrivate_ {
  ImGuiTreeNodeFlags_ClipLabelForTrailingButton(268435456),
  ImGuiTreeNodeFlags_UpsideDownArrow(536870912),
  ImGuiTreeNodeFlags_OpenOnMask_(192);

  final int value;
  const ImGuiTreeNodeFlagsPrivate_(this.value);

  static ImGuiTreeNodeFlagsPrivate_ fromValue(int value) => switch (value) {
        268435456 => ImGuiTreeNodeFlags_ClipLabelForTrailingButton,
        536870912 => ImGuiTreeNodeFlags_UpsideDownArrow,
        192 => ImGuiTreeNodeFlags_OpenOnMask_,
        _ => throw ArgumentError(
            "Unknown value for ImGuiTreeNodeFlagsPrivate_: $value"),
      };
}

enum ImGuiSeparatorFlags_ {
  ImGuiSeparatorFlags_None(0),
  ImGuiSeparatorFlags_Horizontal(1),
  ImGuiSeparatorFlags_Vertical(2),
  ImGuiSeparatorFlags_SpanAllColumns(4);

  final int value;
  const ImGuiSeparatorFlags_(this.value);

  static ImGuiSeparatorFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiSeparatorFlags_None,
        1 => ImGuiSeparatorFlags_Horizontal,
        2 => ImGuiSeparatorFlags_Vertical,
        4 => ImGuiSeparatorFlags_SpanAllColumns,
        _ =>
          throw ArgumentError("Unknown value for ImGuiSeparatorFlags_: $value"),
      };
}

enum ImGuiFocusRequestFlags_ {
  ImGuiFocusRequestFlags_None(0),
  ImGuiFocusRequestFlags_RestoreFocusedChild(1),
  ImGuiFocusRequestFlags_UnlessBelowModal(2);

  final int value;
  const ImGuiFocusRequestFlags_(this.value);

  static ImGuiFocusRequestFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiFocusRequestFlags_None,
        1 => ImGuiFocusRequestFlags_RestoreFocusedChild,
        2 => ImGuiFocusRequestFlags_UnlessBelowModal,
        _ => throw ArgumentError(
            "Unknown value for ImGuiFocusRequestFlags_: $value"),
      };
}

enum ImGuiTextFlags_ {
  ImGuiTextFlags_None(0),
  ImGuiTextFlags_NoWidthForLargeClippedText(1);

  final int value;
  const ImGuiTextFlags_(this.value);

  static ImGuiTextFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTextFlags_None,
        1 => ImGuiTextFlags_NoWidthForLargeClippedText,
        _ => throw ArgumentError("Unknown value for ImGuiTextFlags_: $value"),
      };
}

enum ImGuiTooltipFlags_ {
  ImGuiTooltipFlags_None(0),
  ImGuiTooltipFlags_OverridePrevious(2);

  final int value;
  const ImGuiTooltipFlags_(this.value);

  static ImGuiTooltipFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTooltipFlags_None,
        2 => ImGuiTooltipFlags_OverridePrevious,
        _ =>
          throw ArgumentError("Unknown value for ImGuiTooltipFlags_: $value"),
      };
}

enum ImGuiLayoutType_ {
  ImGuiLayoutType_Horizontal(0),
  ImGuiLayoutType_Vertical(1);

  final int value;
  const ImGuiLayoutType_(this.value);

  static ImGuiLayoutType_ fromValue(int value) => switch (value) {
        0 => ImGuiLayoutType_Horizontal,
        1 => ImGuiLayoutType_Vertical,
        _ => throw ArgumentError("Unknown value for ImGuiLayoutType_: $value"),
      };
}

enum ImGuiLogFlags_ {
  ImGuiLogFlags_None(0),
  ImGuiLogFlags_OutputTTY(1),
  ImGuiLogFlags_OutputFile(2),
  ImGuiLogFlags_OutputBuffer(4),
  ImGuiLogFlags_OutputClipboard(8),
  ImGuiLogFlags_OutputMask_(15);

  final int value;
  const ImGuiLogFlags_(this.value);

  static ImGuiLogFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiLogFlags_None,
        1 => ImGuiLogFlags_OutputTTY,
        2 => ImGuiLogFlags_OutputFile,
        4 => ImGuiLogFlags_OutputBuffer,
        8 => ImGuiLogFlags_OutputClipboard,
        15 => ImGuiLogFlags_OutputMask_,
        _ => throw ArgumentError("Unknown value for ImGuiLogFlags_: $value"),
      };
}

enum ImGuiAxis {
  ImGuiAxis_None(-1),
  ImGuiAxis_X(0),
  ImGuiAxis_Y(1);

  final int value;
  const ImGuiAxis(this.value);

  static ImGuiAxis fromValue(int value) => switch (value) {
        -1 => ImGuiAxis_None,
        0 => ImGuiAxis_X,
        1 => ImGuiAxis_Y,
        _ => throw ArgumentError("Unknown value for ImGuiAxis: $value"),
      };
}

enum ImGuiPlotType {
  ImGuiPlotType_Lines(0),
  ImGuiPlotType_Histogram(1);

  final int value;
  const ImGuiPlotType(this.value);

  static ImGuiPlotType fromValue(int value) => switch (value) {
        0 => ImGuiPlotType_Lines,
        1 => ImGuiPlotType_Histogram,
        _ => throw ArgumentError("Unknown value for ImGuiPlotType: $value"),
      };
}

final class ImGuiComboPreviewData extends ffi.Struct {
  external ImRect PreviewRect;

  external ImVec2 BackupCursorPos;

  external ImVec2 BackupCursorMaxPos;

  external ImVec2 BackupCursorPosPrevLine;

  @ffi.Float()
  external double BackupPrevLineTextBaseOffset;

  @ImGuiLayoutType()
  external int BackupLayout;
}

final class ImGuiInputTextDeactivatedState extends ffi.Struct {
  @ImGuiID()
  external int ID;

  external ImVector_char TextA;
}

enum ImGuiWindowRefreshFlags_ {
  ImGuiWindowRefreshFlags_None(0),
  ImGuiWindowRefreshFlags_TryToAvoidRefresh(1),
  ImGuiWindowRefreshFlags_RefreshOnHover(2),
  ImGuiWindowRefreshFlags_RefreshOnFocus(4);

  final int value;
  const ImGuiWindowRefreshFlags_(this.value);

  static ImGuiWindowRefreshFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiWindowRefreshFlags_None,
        1 => ImGuiWindowRefreshFlags_TryToAvoidRefresh,
        2 => ImGuiWindowRefreshFlags_RefreshOnHover,
        4 => ImGuiWindowRefreshFlags_RefreshOnFocus,
        _ => throw ArgumentError(
            "Unknown value for ImGuiWindowRefreshFlags_: $value"),
      };
}

enum ImGuiNextWindowDataFlags_ {
  ImGuiNextWindowDataFlags_None(0),
  ImGuiNextWindowDataFlags_HasPos(1),
  ImGuiNextWindowDataFlags_HasSize(2),
  ImGuiNextWindowDataFlags_HasContentSize(4),
  ImGuiNextWindowDataFlags_HasCollapsed(8),
  ImGuiNextWindowDataFlags_HasSizeConstraint(16),
  ImGuiNextWindowDataFlags_HasFocus(32),
  ImGuiNextWindowDataFlags_HasBgAlpha(64),
  ImGuiNextWindowDataFlags_HasScroll(128),
  ImGuiNextWindowDataFlags_HasChildFlags(256),
  ImGuiNextWindowDataFlags_HasRefreshPolicy(512),
  ImGuiNextWindowDataFlags_HasViewport(1024),
  ImGuiNextWindowDataFlags_HasDock(2048),
  ImGuiNextWindowDataFlags_HasWindowClass(4096);

  final int value;
  const ImGuiNextWindowDataFlags_(this.value);

  static ImGuiNextWindowDataFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiNextWindowDataFlags_None,
        1 => ImGuiNextWindowDataFlags_HasPos,
        2 => ImGuiNextWindowDataFlags_HasSize,
        4 => ImGuiNextWindowDataFlags_HasContentSize,
        8 => ImGuiNextWindowDataFlags_HasCollapsed,
        16 => ImGuiNextWindowDataFlags_HasSizeConstraint,
        32 => ImGuiNextWindowDataFlags_HasFocus,
        64 => ImGuiNextWindowDataFlags_HasBgAlpha,
        128 => ImGuiNextWindowDataFlags_HasScroll,
        256 => ImGuiNextWindowDataFlags_HasChildFlags,
        512 => ImGuiNextWindowDataFlags_HasRefreshPolicy,
        1024 => ImGuiNextWindowDataFlags_HasViewport,
        2048 => ImGuiNextWindowDataFlags_HasDock,
        4096 => ImGuiNextWindowDataFlags_HasWindowClass,
        _ => throw ArgumentError(
            "Unknown value for ImGuiNextWindowDataFlags_: $value"),
      };
}

enum ImGuiNextItemDataFlags_ {
  ImGuiNextItemDataFlags_None(0),
  ImGuiNextItemDataFlags_HasWidth(1),
  ImGuiNextItemDataFlags_HasOpen(2),
  ImGuiNextItemDataFlags_HasShortcut(4),
  ImGuiNextItemDataFlags_HasRefVal(8),
  ImGuiNextItemDataFlags_HasStorageID(16);

  final int value;
  const ImGuiNextItemDataFlags_(this.value);

  static ImGuiNextItemDataFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiNextItemDataFlags_None,
        1 => ImGuiNextItemDataFlags_HasWidth,
        2 => ImGuiNextItemDataFlags_HasOpen,
        4 => ImGuiNextItemDataFlags_HasShortcut,
        8 => ImGuiNextItemDataFlags_HasRefVal,
        16 => ImGuiNextItemDataFlags_HasStorageID,
        _ => throw ArgumentError(
            "Unknown value for ImGuiNextItemDataFlags_: $value"),
      };
}

final class ImGuiWindowStackData extends ffi.Struct {
  external ffi.Pointer<ImGuiWindow> Window;

  external ImGuiLastItemData ParentLastItemDataBackup;

  external ImGuiErrorRecoveryState StackSizesInBegin;

  @ffi.Bool()
  external bool DisabledOverrideReenable;
}

final class ImGuiShrinkWidthItem extends ffi.Struct {
  @ffi.Int()
  external int Index;

  @ffi.Float()
  external double Width;

  @ffi.Float()
  external double InitialWidth;
}

final class ImGuiPtrOrIndex extends ffi.Struct {
  external ffi.Pointer<ffi.Void> Ptr;

  @ffi.Int()
  external int Index;
}

enum ImGuiPopupPositionPolicy {
  ImGuiPopupPositionPolicy_Default(0),
  ImGuiPopupPositionPolicy_ComboBox(1),
  ImGuiPopupPositionPolicy_Tooltip(2);

  final int value;
  const ImGuiPopupPositionPolicy(this.value);

  static ImGuiPopupPositionPolicy fromValue(int value) => switch (value) {
        0 => ImGuiPopupPositionPolicy_Default,
        1 => ImGuiPopupPositionPolicy_ComboBox,
        2 => ImGuiPopupPositionPolicy_Tooltip,
        _ => throw ArgumentError(
            "Unknown value for ImGuiPopupPositionPolicy: $value"),
      };
}

final class ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN
    extends ffi.Struct {
  @ffi.Array.multi([5])
  external ffi.Array<ImU32> Storage;
}

enum ImGuiInputEventType {
  ImGuiInputEventType_None(0),
  ImGuiInputEventType_MousePos(1),
  ImGuiInputEventType_MouseWheel(2),
  ImGuiInputEventType_MouseButton(3),
  ImGuiInputEventType_MouseViewport(4),
  ImGuiInputEventType_Key(5),
  ImGuiInputEventType_Text(6),
  ImGuiInputEventType_Focus(7),
  ImGuiInputEventType_COUNT(8);

  final int value;
  const ImGuiInputEventType(this.value);

  static ImGuiInputEventType fromValue(int value) => switch (value) {
        0 => ImGuiInputEventType_None,
        1 => ImGuiInputEventType_MousePos,
        2 => ImGuiInputEventType_MouseWheel,
        3 => ImGuiInputEventType_MouseButton,
        4 => ImGuiInputEventType_MouseViewport,
        5 => ImGuiInputEventType_Key,
        6 => ImGuiInputEventType_Text,
        7 => ImGuiInputEventType_Focus,
        8 => ImGuiInputEventType_COUNT,
        _ =>
          throw ArgumentError("Unknown value for ImGuiInputEventType: $value"),
      };
}

enum ImGuiInputSource {
  ImGuiInputSource_None(0),
  ImGuiInputSource_Mouse(1),
  ImGuiInputSource_Keyboard(2),
  ImGuiInputSource_Gamepad(3),
  ImGuiInputSource_COUNT(4);

  final int value;
  const ImGuiInputSource(this.value);

  static ImGuiInputSource fromValue(int value) => switch (value) {
        0 => ImGuiInputSource_None,
        1 => ImGuiInputSource_Mouse,
        2 => ImGuiInputSource_Keyboard,
        3 => ImGuiInputSource_Gamepad,
        4 => ImGuiInputSource_COUNT,
        _ => throw ArgumentError("Unknown value for ImGuiInputSource: $value"),
      };
}

final class ImGuiInputEventMousePos extends ffi.Struct {
  @ffi.Float()
  external double PosX;

  @ffi.Float()
  external double PosY;

  @ffi.UnsignedInt()
  external int MouseSourceAsInt;

  ImGuiMouseSource get MouseSource =>
      ImGuiMouseSource.fromValue(MouseSourceAsInt);
}

final class ImGuiInputEventMouseWheel extends ffi.Struct {
  @ffi.Float()
  external double WheelX;

  @ffi.Float()
  external double WheelY;

  @ffi.UnsignedInt()
  external int MouseSourceAsInt;

  ImGuiMouseSource get MouseSource =>
      ImGuiMouseSource.fromValue(MouseSourceAsInt);
}

final class ImGuiInputEventMouseButton extends ffi.Struct {
  @ffi.Int()
  external int Button;

  @ffi.Bool()
  external bool Down;

  @ffi.UnsignedInt()
  external int MouseSourceAsInt;

  ImGuiMouseSource get MouseSource =>
      ImGuiMouseSource.fromValue(MouseSourceAsInt);
}

final class ImGuiInputEventMouseViewport extends ffi.Struct {
  @ImGuiID()
  external int HoveredViewportID;
}

final class ImGuiInputEventKey extends ffi.Struct {
  @ffi.UnsignedInt()
  external int KeyAsInt;

  ImGuiKey get Key => ImGuiKey.fromValue(KeyAsInt);

  @ffi.Bool()
  external bool Down;

  @ffi.Float()
  external double AnalogValue;
}

final class ImGuiInputEventText extends ffi.Struct {
  @ffi.UnsignedInt()
  external int Char;
}

final class ImGuiInputEventAppFocused extends ffi.Struct {
  @ffi.Bool()
  external bool Focused;
}

final class ImGuiInputEvent extends ffi.Struct {
  @ffi.UnsignedInt()
  external int TypeAsInt;

  ImGuiInputEventType get Type => ImGuiInputEventType.fromValue(TypeAsInt);

  @ffi.UnsignedInt()
  external int SourceAsInt;

  ImGuiInputSource get Source => ImGuiInputSource.fromValue(SourceAsInt);

  @ImU32()
  external int EventId;

  external UnnamedUnion1 unnamed;

  @ffi.Bool()
  external bool AddedByTestEngine;
}

final class UnnamedUnion1 extends ffi.Union {
  external ImGuiInputEventMousePos MousePos;

  external ImGuiInputEventMouseWheel MouseWheel;

  external ImGuiInputEventMouseButton MouseButton;

  external ImGuiInputEventMouseViewport MouseViewport;

  external ImGuiInputEventKey Key;

  external ImGuiInputEventText Text;

  external ImGuiInputEventAppFocused AppFocused;
}

final class ImGuiKeyRoutingData extends ffi.Struct {
  @ImGuiKeyRoutingIndex()
  external int NextEntryIndex;

  @ImU16()
  external int Mods;

  @ImU8()
  external int RoutingCurrScore;

  @ImU8()
  external int RoutingNextScore;

  @ImGuiID()
  external int RoutingCurr;

  @ImGuiID()
  external int RoutingNext;
}

typedef ImGuiKeyRoutingIndex = ImS16;

final class ImGuiKeyRoutingTable extends ffi.Struct {
  @ffi.Array.multi([154])
  external ffi.Array<ImGuiKeyRoutingIndex> Index;

  external ImVector_ImGuiKeyRoutingData Entries;

  external ImVector_ImGuiKeyRoutingData EntriesNext;
}

final class ImVector_ImGuiKeyRoutingData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiKeyRoutingData> Data;
}

final class ImGuiKeyOwnerData extends ffi.Struct {
  @ImGuiID()
  external int OwnerCurr;

  @ImGuiID()
  external int OwnerNext;

  @ffi.Bool()
  external bool LockThisFrame;

  @ffi.Bool()
  external bool LockUntilRelease;
}

enum ImGuiInputFlagsPrivate_ {
  ImGuiInputFlags_RepeatRateDefault(2),
  ImGuiInputFlags_RepeatRateNavMove(4),
  ImGuiInputFlags_RepeatRateNavTweak(8),
  ImGuiInputFlags_RepeatUntilRelease(16),
  ImGuiInputFlags_RepeatUntilKeyModsChange(32),
  ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone(64),
  ImGuiInputFlags_RepeatUntilOtherKeyPress(128),
  ImGuiInputFlags_LockThisFrame(1048576),
  ImGuiInputFlags_LockUntilRelease(2097152),
  ImGuiInputFlags_CondHovered(4194304),
  ImGuiInputFlags_CondActive(8388608),
  ImGuiInputFlags_CondDefault_(12582912),
  ImGuiInputFlags_RepeatRateMask_(14),
  ImGuiInputFlags_RepeatUntilMask_(240),
  ImGuiInputFlags_RepeatMask_(255),
  ImGuiInputFlags_RouteTypeMask_(15360),
  ImGuiInputFlags_RouteOptionsMask_(245760),
  ImGuiInputFlags_SupportedByIsMouseClicked(1),
  ImGuiInputFlags_SupportedByShortcut(261375),
  ImGuiInputFlags_SupportedBySetNextItemShortcut(523519),
  ImGuiInputFlags_SupportedBySetKeyOwner(3145728),
  ImGuiInputFlags_SupportedBySetItemKeyOwner(15728640);

  static const ImGuiInputFlags_CondMask_ = ImGuiInputFlags_CondDefault_;
  static const ImGuiInputFlags_SupportedByIsKeyPressed =
      ImGuiInputFlags_RepeatMask_;

  final int value;
  const ImGuiInputFlagsPrivate_(this.value);

  static ImGuiInputFlagsPrivate_ fromValue(int value) => switch (value) {
        2 => ImGuiInputFlags_RepeatRateDefault,
        4 => ImGuiInputFlags_RepeatRateNavMove,
        8 => ImGuiInputFlags_RepeatRateNavTweak,
        16 => ImGuiInputFlags_RepeatUntilRelease,
        32 => ImGuiInputFlags_RepeatUntilKeyModsChange,
        64 => ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone,
        128 => ImGuiInputFlags_RepeatUntilOtherKeyPress,
        1048576 => ImGuiInputFlags_LockThisFrame,
        2097152 => ImGuiInputFlags_LockUntilRelease,
        4194304 => ImGuiInputFlags_CondHovered,
        8388608 => ImGuiInputFlags_CondActive,
        12582912 => ImGuiInputFlags_CondDefault_,
        14 => ImGuiInputFlags_RepeatRateMask_,
        240 => ImGuiInputFlags_RepeatUntilMask_,
        255 => ImGuiInputFlags_RepeatMask_,
        15360 => ImGuiInputFlags_RouteTypeMask_,
        245760 => ImGuiInputFlags_RouteOptionsMask_,
        1 => ImGuiInputFlags_SupportedByIsMouseClicked,
        261375 => ImGuiInputFlags_SupportedByShortcut,
        523519 => ImGuiInputFlags_SupportedBySetNextItemShortcut,
        3145728 => ImGuiInputFlags_SupportedBySetKeyOwner,
        15728640 => ImGuiInputFlags_SupportedBySetItemKeyOwner,
        _ => throw ArgumentError(
            "Unknown value for ImGuiInputFlagsPrivate_: $value"),
      };

  @override
  String toString() {
    if (this == ImGuiInputFlags_CondDefault_)
      return "ImGuiInputFlagsPrivate_.ImGuiInputFlags_CondDefault_, ImGuiInputFlagsPrivate_.ImGuiInputFlags_CondMask_";
    if (this == ImGuiInputFlags_RepeatMask_)
      return "ImGuiInputFlagsPrivate_.ImGuiInputFlags_RepeatMask_, ImGuiInputFlagsPrivate_.ImGuiInputFlags_SupportedByIsKeyPressed";
    return super.toString();
  }
}

final class ImGuiListClipperRange extends ffi.Struct {
  @ffi.Int()
  external int Min;

  @ffi.Int()
  external int Max;

  @ffi.Bool()
  external bool PosToIndexConvert;

  @ImS8()
  external int PosToIndexOffsetMin;

  @ImS8()
  external int PosToIndexOffsetMax;
}

final class ImGuiListClipperData extends ffi.Struct {
  external ffi.Pointer<ImGuiListClipper> ListClipper;

  @ffi.Float()
  external double LossynessOffset;

  @ffi.Int()
  external int StepNo;

  @ffi.Int()
  external int ItemsFrozen;

  external ImVector_ImGuiListClipperRange Ranges;
}

final class ImVector_ImGuiListClipperRange extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiListClipperRange> Data;
}

enum ImGuiActivateFlags_ {
  ImGuiActivateFlags_None(0),
  ImGuiActivateFlags_PreferInput(1),
  ImGuiActivateFlags_PreferTweak(2),
  ImGuiActivateFlags_TryToPreserveState(4),
  ImGuiActivateFlags_FromTabbing(8),
  ImGuiActivateFlags_FromShortcut(16);

  final int value;
  const ImGuiActivateFlags_(this.value);

  static ImGuiActivateFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiActivateFlags_None,
        1 => ImGuiActivateFlags_PreferInput,
        2 => ImGuiActivateFlags_PreferTweak,
        4 => ImGuiActivateFlags_TryToPreserveState,
        8 => ImGuiActivateFlags_FromTabbing,
        16 => ImGuiActivateFlags_FromShortcut,
        _ =>
          throw ArgumentError("Unknown value for ImGuiActivateFlags_: $value"),
      };
}

enum ImGuiScrollFlags_ {
  ImGuiScrollFlags_None(0),
  ImGuiScrollFlags_KeepVisibleEdgeX(1),
  ImGuiScrollFlags_KeepVisibleEdgeY(2),
  ImGuiScrollFlags_KeepVisibleCenterX(4),
  ImGuiScrollFlags_KeepVisibleCenterY(8),
  ImGuiScrollFlags_AlwaysCenterX(16),
  ImGuiScrollFlags_AlwaysCenterY(32),
  ImGuiScrollFlags_NoScrollParent(64),
  ImGuiScrollFlags_MaskX_(21),
  ImGuiScrollFlags_MaskY_(42);

  final int value;
  const ImGuiScrollFlags_(this.value);

  static ImGuiScrollFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiScrollFlags_None,
        1 => ImGuiScrollFlags_KeepVisibleEdgeX,
        2 => ImGuiScrollFlags_KeepVisibleEdgeY,
        4 => ImGuiScrollFlags_KeepVisibleCenterX,
        8 => ImGuiScrollFlags_KeepVisibleCenterY,
        16 => ImGuiScrollFlags_AlwaysCenterX,
        32 => ImGuiScrollFlags_AlwaysCenterY,
        64 => ImGuiScrollFlags_NoScrollParent,
        21 => ImGuiScrollFlags_MaskX_,
        42 => ImGuiScrollFlags_MaskY_,
        _ => throw ArgumentError("Unknown value for ImGuiScrollFlags_: $value"),
      };
}

enum ImGuiNavRenderCursorFlags_ {
  ImGuiNavRenderCursorFlags_None(0),
  ImGuiNavRenderCursorFlags_Compact(2),
  ImGuiNavRenderCursorFlags_AlwaysDraw(4),
  ImGuiNavRenderCursorFlags_NoRounding(8);

  final int value;
  const ImGuiNavRenderCursorFlags_(this.value);

  static ImGuiNavRenderCursorFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiNavRenderCursorFlags_None,
        2 => ImGuiNavRenderCursorFlags_Compact,
        4 => ImGuiNavRenderCursorFlags_AlwaysDraw,
        8 => ImGuiNavRenderCursorFlags_NoRounding,
        _ => throw ArgumentError(
            "Unknown value for ImGuiNavRenderCursorFlags_: $value"),
      };
}

enum ImGuiNavMoveFlags_ {
  ImGuiNavMoveFlags_None(0),
  ImGuiNavMoveFlags_LoopX(1),
  ImGuiNavMoveFlags_LoopY(2),
  ImGuiNavMoveFlags_WrapX(4),
  ImGuiNavMoveFlags_WrapY(8),
  ImGuiNavMoveFlags_WrapMask_(15),
  ImGuiNavMoveFlags_AllowCurrentNavId(16),
  ImGuiNavMoveFlags_AlsoScoreVisibleSet(32),
  ImGuiNavMoveFlags_ScrollToEdgeY(64),
  ImGuiNavMoveFlags_Forwarded(128),
  ImGuiNavMoveFlags_DebugNoResult(256),
  ImGuiNavMoveFlags_FocusApi(512),
  ImGuiNavMoveFlags_IsTabbing(1024),
  ImGuiNavMoveFlags_IsPageMove(2048),
  ImGuiNavMoveFlags_Activate(4096),
  ImGuiNavMoveFlags_NoSelect(8192),
  ImGuiNavMoveFlags_NoSetNavCursorVisible(16384),
  ImGuiNavMoveFlags_NoClearActiveId(32768);

  final int value;
  const ImGuiNavMoveFlags_(this.value);

  static ImGuiNavMoveFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiNavMoveFlags_None,
        1 => ImGuiNavMoveFlags_LoopX,
        2 => ImGuiNavMoveFlags_LoopY,
        4 => ImGuiNavMoveFlags_WrapX,
        8 => ImGuiNavMoveFlags_WrapY,
        15 => ImGuiNavMoveFlags_WrapMask_,
        16 => ImGuiNavMoveFlags_AllowCurrentNavId,
        32 => ImGuiNavMoveFlags_AlsoScoreVisibleSet,
        64 => ImGuiNavMoveFlags_ScrollToEdgeY,
        128 => ImGuiNavMoveFlags_Forwarded,
        256 => ImGuiNavMoveFlags_DebugNoResult,
        512 => ImGuiNavMoveFlags_FocusApi,
        1024 => ImGuiNavMoveFlags_IsTabbing,
        2048 => ImGuiNavMoveFlags_IsPageMove,
        4096 => ImGuiNavMoveFlags_Activate,
        8192 => ImGuiNavMoveFlags_NoSelect,
        16384 => ImGuiNavMoveFlags_NoSetNavCursorVisible,
        32768 => ImGuiNavMoveFlags_NoClearActiveId,
        _ =>
          throw ArgumentError("Unknown value for ImGuiNavMoveFlags_: $value"),
      };
}

final class ImGuiFocusScopeData extends ffi.Struct {
  @ImGuiID()
  external int ID;

  @ImGuiID()
  external int WindowID;
}

enum ImGuiTypingSelectFlags_ {
  ImGuiTypingSelectFlags_None(0),
  ImGuiTypingSelectFlags_AllowBackspace(1),
  ImGuiTypingSelectFlags_AllowSingleCharMode(2);

  final int value;
  const ImGuiTypingSelectFlags_(this.value);

  static ImGuiTypingSelectFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiTypingSelectFlags_None,
        1 => ImGuiTypingSelectFlags_AllowBackspace,
        2 => ImGuiTypingSelectFlags_AllowSingleCharMode,
        _ => throw ArgumentError(
            "Unknown value for ImGuiTypingSelectFlags_: $value"),
      };
}

enum ImGuiOldColumnFlags_ {
  ImGuiOldColumnFlags_None(0),
  ImGuiOldColumnFlags_NoBorder(1),
  ImGuiOldColumnFlags_NoResize(2),
  ImGuiOldColumnFlags_NoPreserveWidths(4),
  ImGuiOldColumnFlags_NoForceWithinWindow(8),
  ImGuiOldColumnFlags_GrowParentContentsSize(16);

  final int value;
  const ImGuiOldColumnFlags_(this.value);

  static ImGuiOldColumnFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiOldColumnFlags_None,
        1 => ImGuiOldColumnFlags_NoBorder,
        2 => ImGuiOldColumnFlags_NoResize,
        4 => ImGuiOldColumnFlags_NoPreserveWidths,
        8 => ImGuiOldColumnFlags_NoForceWithinWindow,
        16 => ImGuiOldColumnFlags_GrowParentContentsSize,
        _ =>
          throw ArgumentError("Unknown value for ImGuiOldColumnFlags_: $value"),
      };
}

enum ImGuiDockNodeFlagsPrivate_ {
  ImGuiDockNodeFlags_DockSpace(1024),
  ImGuiDockNodeFlags_CentralNode(2048),
  ImGuiDockNodeFlags_NoTabBar(4096),
  ImGuiDockNodeFlags_HiddenTabBar(8192),
  ImGuiDockNodeFlags_NoWindowMenuButton(16384),
  ImGuiDockNodeFlags_NoCloseButton(32768),
  ImGuiDockNodeFlags_NoResizeX(65536),
  ImGuiDockNodeFlags_NoResizeY(131072),
  ImGuiDockNodeFlags_DockedWindowsInFocusRoute(262144),
  ImGuiDockNodeFlags_NoDockingSplitOther(524288),
  ImGuiDockNodeFlags_NoDockingOverMe(1048576),
  ImGuiDockNodeFlags_NoDockingOverOther(2097152),
  ImGuiDockNodeFlags_NoDockingOverEmpty(4194304),
  ImGuiDockNodeFlags_NoDocking(7864336),
  ImGuiDockNodeFlags_SharedFlagsInheritMask_(-1),
  ImGuiDockNodeFlags_NoResizeFlagsMask_(196640),
  ImGuiDockNodeFlags_LocalFlagsTransferMask_(260208),
  ImGuiDockNodeFlags_SavedFlagsMask_(261152);

  final int value;
  const ImGuiDockNodeFlagsPrivate_(this.value);

  static ImGuiDockNodeFlagsPrivate_ fromValue(int value) => switch (value) {
        1024 => ImGuiDockNodeFlags_DockSpace,
        2048 => ImGuiDockNodeFlags_CentralNode,
        4096 => ImGuiDockNodeFlags_NoTabBar,
        8192 => ImGuiDockNodeFlags_HiddenTabBar,
        16384 => ImGuiDockNodeFlags_NoWindowMenuButton,
        32768 => ImGuiDockNodeFlags_NoCloseButton,
        65536 => ImGuiDockNodeFlags_NoResizeX,
        131072 => ImGuiDockNodeFlags_NoResizeY,
        262144 => ImGuiDockNodeFlags_DockedWindowsInFocusRoute,
        524288 => ImGuiDockNodeFlags_NoDockingSplitOther,
        1048576 => ImGuiDockNodeFlags_NoDockingOverMe,
        2097152 => ImGuiDockNodeFlags_NoDockingOverOther,
        4194304 => ImGuiDockNodeFlags_NoDockingOverEmpty,
        7864336 => ImGuiDockNodeFlags_NoDocking,
        -1 => ImGuiDockNodeFlags_SharedFlagsInheritMask_,
        196640 => ImGuiDockNodeFlags_NoResizeFlagsMask_,
        260208 => ImGuiDockNodeFlags_LocalFlagsTransferMask_,
        261152 => ImGuiDockNodeFlags_SavedFlagsMask_,
        _ => throw ArgumentError(
            "Unknown value for ImGuiDockNodeFlagsPrivate_: $value"),
      };
}

enum ImGuiDataAuthority_ {
  ImGuiDataAuthority_Auto(0),
  ImGuiDataAuthority_DockNode(1),
  ImGuiDataAuthority_Window(2);

  final int value;
  const ImGuiDataAuthority_(this.value);

  static ImGuiDataAuthority_ fromValue(int value) => switch (value) {
        0 => ImGuiDataAuthority_Auto,
        1 => ImGuiDataAuthority_DockNode,
        2 => ImGuiDataAuthority_Window,
        _ =>
          throw ArgumentError("Unknown value for ImGuiDataAuthority_: $value"),
      };
}

enum ImGuiDockNodeState {
  ImGuiDockNodeState_Unknown(0),
  ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow(1),
  ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing(2),
  ImGuiDockNodeState_HostWindowVisible(3);

  final int value;
  const ImGuiDockNodeState(this.value);

  static ImGuiDockNodeState fromValue(int value) => switch (value) {
        0 => ImGuiDockNodeState_Unknown,
        1 => ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow,
        2 => ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing,
        3 => ImGuiDockNodeState_HostWindowVisible,
        _ =>
          throw ArgumentError("Unknown value for ImGuiDockNodeState: $value"),
      };
}

enum ImGuiWindowDockStyleCol {
  ImGuiWindowDockStyleCol_Text(0),
  ImGuiWindowDockStyleCol_TabHovered(1),
  ImGuiWindowDockStyleCol_TabFocused(2),
  ImGuiWindowDockStyleCol_TabSelected(3),
  ImGuiWindowDockStyleCol_TabSelectedOverline(4),
  ImGuiWindowDockStyleCol_TabDimmed(5),
  ImGuiWindowDockStyleCol_TabDimmedSelected(6),
  ImGuiWindowDockStyleCol_TabDimmedSelectedOverline(7),
  ImGuiWindowDockStyleCol_COUNT(8);

  final int value;
  const ImGuiWindowDockStyleCol(this.value);

  static ImGuiWindowDockStyleCol fromValue(int value) => switch (value) {
        0 => ImGuiWindowDockStyleCol_Text,
        1 => ImGuiWindowDockStyleCol_TabHovered,
        2 => ImGuiWindowDockStyleCol_TabFocused,
        3 => ImGuiWindowDockStyleCol_TabSelected,
        4 => ImGuiWindowDockStyleCol_TabSelectedOverline,
        5 => ImGuiWindowDockStyleCol_TabDimmed,
        6 => ImGuiWindowDockStyleCol_TabDimmedSelected,
        7 => ImGuiWindowDockStyleCol_TabDimmedSelectedOverline,
        8 => ImGuiWindowDockStyleCol_COUNT,
        _ => throw ArgumentError(
            "Unknown value for ImGuiWindowDockStyleCol: $value"),
      };
}

final class ImGuiViewportP extends ffi.Struct {
  external ImGuiViewport _ImGuiViewport;

  external ffi.Pointer<ImGuiWindow> Window;

  @ffi.Int()
  external int Idx;

  @ffi.Int()
  external int LastFrameActive;

  @ffi.Int()
  external int LastFocusedStampCount;

  @ImGuiID()
  external int LastNameHash;

  external ImVec2 LastPos;

  external ImVec2 LastSize;

  @ffi.Float()
  external double Alpha;

  @ffi.Float()
  external double LastAlpha;

  @ffi.Bool()
  external bool LastFocusedHadNavWindow;

  @ffi.Short()
  external int PlatformMonitor;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> BgFgDrawListsLastFrame;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Pointer<ImDrawList>> BgFgDrawLists;

  external ImDrawData DrawDataP;

  external ImDrawDataBuilder DrawDataBuilder;

  external ImVec2 LastPlatformPos;

  external ImVec2 LastPlatformSize;

  external ImVec2 LastRendererSize;

  external ImVec2 WorkInsetMin;

  external ImVec2 WorkInsetMax;

  external ImVec2 BuildWorkInsetMin;

  external ImVec2 BuildWorkInsetMax;
}

enum ImGuiDebugLogFlags_ {
  ImGuiDebugLogFlags_None(0),
  ImGuiDebugLogFlags_EventError(1),
  ImGuiDebugLogFlags_EventActiveId(2),
  ImGuiDebugLogFlags_EventFocus(4),
  ImGuiDebugLogFlags_EventPopup(8),
  ImGuiDebugLogFlags_EventNav(16),
  ImGuiDebugLogFlags_EventClipper(32),
  ImGuiDebugLogFlags_EventSelection(64),
  ImGuiDebugLogFlags_EventIO(128),
  ImGuiDebugLogFlags_EventFont(256),
  ImGuiDebugLogFlags_EventInputRouting(512),
  ImGuiDebugLogFlags_EventDocking(1024),
  ImGuiDebugLogFlags_EventViewport(2048),
  ImGuiDebugLogFlags_EventMask_(4095),
  ImGuiDebugLogFlags_OutputToTTY(1048576),
  ImGuiDebugLogFlags_OutputToTestEngine(2097152);

  final int value;
  const ImGuiDebugLogFlags_(this.value);

  static ImGuiDebugLogFlags_ fromValue(int value) => switch (value) {
        0 => ImGuiDebugLogFlags_None,
        1 => ImGuiDebugLogFlags_EventError,
        2 => ImGuiDebugLogFlags_EventActiveId,
        4 => ImGuiDebugLogFlags_EventFocus,
        8 => ImGuiDebugLogFlags_EventPopup,
        16 => ImGuiDebugLogFlags_EventNav,
        32 => ImGuiDebugLogFlags_EventClipper,
        64 => ImGuiDebugLogFlags_EventSelection,
        128 => ImGuiDebugLogFlags_EventIO,
        256 => ImGuiDebugLogFlags_EventFont,
        512 => ImGuiDebugLogFlags_EventInputRouting,
        1024 => ImGuiDebugLogFlags_EventDocking,
        2048 => ImGuiDebugLogFlags_EventViewport,
        4095 => ImGuiDebugLogFlags_EventMask_,
        1048576 => ImGuiDebugLogFlags_OutputToTTY,
        2097152 => ImGuiDebugLogFlags_OutputToTestEngine,
        _ =>
          throw ArgumentError("Unknown value for ImGuiDebugLogFlags_: $value"),
      };
}

final class ImGuiDebugAllocEntry extends ffi.Struct {
  @ffi.Int()
  external int FrameCount;

  @ImS16()
  external int AllocCount;

  @ImS16()
  external int FreeCount;
}

final class ImGuiDebugAllocInfo extends ffi.Struct {
  @ffi.Int()
  external int TotalAllocCount;

  @ffi.Int()
  external int TotalFreeCount;

  @ImS16()
  external int LastEntriesIdx;

  @ffi.Array.multi([6])
  external ffi.Array<ImGuiDebugAllocEntry> LastEntriesBuf;
}

final class ImGuiStackLevelInfo extends ffi.Opaque {}

final class ImGuiIDStackTool extends ffi.Struct {
  @ffi.Int()
  external int LastActiveFrame;

  @ffi.Int()
  external int StackLevel;

  @ImGuiID()
  external int QueryId;

  external ImVector_ImGuiStackLevelInfo Results;

  @ffi.Bool()
  external bool CopyToClipboardOnCtrlC;

  @ffi.Float()
  external double CopyToClipboardLastTime;
}

final class ImVector_ImGuiStackLevelInfo extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiStackLevelInfo> Data;
}

final class ImVector_ImGuiInputEvent extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiInputEvent> Data;
}

final class ImVector_ImGuiWindowStackData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiWindowStackData> Data;
}

final class ImVector_ImGuiColorMod extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiColorMod> Data;
}

final class ImVector_ImGuiStyleMod extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiStyleMod> Data;
}

final class ImVector_ImGuiFocusScopeData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiFocusScopeData> Data;
}

final class ImVector_ImGuiItemFlags extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiItemFlags> Data;
}

final class ImVector_ImGuiGroupData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiGroupData> Data;
}

final class ImVector_ImGuiPopupData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiPopupData> Data;
}

final class ImVector_ImGuiTreeNodeStackData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTreeNodeStackData> Data;
}

final class ImVector_ImGuiViewportPPtr extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.Pointer<ImGuiViewportP>> Data;
}

final class ImVector_unsigned_char extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ffi.UnsignedChar> Data;
}

final class ImVector_ImGuiListClipperData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiListClipperData> Data;
}

final class ImVector_ImGuiTableTempData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTableTempData> Data;
}

final class ImVector_ImGuiTable extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTable> Data;
}

final class ImPool_ImGuiTable extends ffi.Struct {
  external ImVector_ImGuiTable Buf;

  external ImGuiStorage Map;

  @ImPoolIdx()
  external int FreeIdx;

  @ImPoolIdx()
  external int AliveCount;
}

typedef ImPoolIdx = ffi.Int;
typedef DartImPoolIdx = int;

final class ImVector_ImGuiTabBar extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTabBar> Data;
}

final class ImPool_ImGuiTabBar extends ffi.Struct {
  external ImVector_ImGuiTabBar Buf;

  external ImGuiStorage Map;

  @ImPoolIdx()
  external int FreeIdx;

  @ImPoolIdx()
  external int AliveCount;
}

final class ImVector_ImGuiPtrOrIndex extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiPtrOrIndex> Data;
}

final class ImVector_ImGuiShrinkWidthItem extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiShrinkWidthItem> Data;
}

final class ImVector_ImGuiMultiSelectTempData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiMultiSelectTempData> Data;
}

final class ImVector_ImGuiMultiSelectState extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiMultiSelectState> Data;
}

final class ImPool_ImGuiMultiSelectState extends ffi.Struct {
  external ImVector_ImGuiMultiSelectState Buf;

  external ImGuiStorage Map;

  @ImPoolIdx()
  external int FreeIdx;

  @ImPoolIdx()
  external int AliveCount;
}

final class ImVector_ImGuiID extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiID> Data;
}

final class ImVector_ImGuiSettingsHandler extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiSettingsHandler> Data;
}

final class ImChunkStream_ImGuiWindowSettings extends ffi.Struct {
  external ImVector_char Buf;
}

final class ImChunkStream_ImGuiTableSettings extends ffi.Struct {
  external ImVector_char Buf;
}

final class ImVector_ImGuiContextHook extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiContextHook> Data;
}

final class ImVector_ImGuiOldColumns extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiOldColumns> Data;
}

enum ImGuiTabBarFlagsPrivate_ {
  ImGuiTabBarFlags_DockNode(1048576),
  ImGuiTabBarFlags_IsFocused(2097152),
  ImGuiTabBarFlags_SaveSettings(4194304);

  final int value;
  const ImGuiTabBarFlagsPrivate_(this.value);

  static ImGuiTabBarFlagsPrivate_ fromValue(int value) => switch (value) {
        1048576 => ImGuiTabBarFlags_DockNode,
        2097152 => ImGuiTabBarFlags_IsFocused,
        4194304 => ImGuiTabBarFlags_SaveSettings,
        _ => throw ArgumentError(
            "Unknown value for ImGuiTabBarFlagsPrivate_: $value"),
      };
}

enum ImGuiTabItemFlagsPrivate_ {
  ImGuiTabItemFlags_SectionMask_(192),
  ImGuiTabItemFlags_NoCloseButton(1048576),
  ImGuiTabItemFlags_Button(2097152),
  ImGuiTabItemFlags_Unsorted(4194304);

  final int value;
  const ImGuiTabItemFlagsPrivate_(this.value);

  static ImGuiTabItemFlagsPrivate_ fromValue(int value) => switch (value) {
        192 => ImGuiTabItemFlags_SectionMask_,
        1048576 => ImGuiTabItemFlags_NoCloseButton,
        2097152 => ImGuiTabItemFlags_Button,
        4194304 => ImGuiTabItemFlags_Unsorted,
        _ => throw ArgumentError(
            "Unknown value for ImGuiTabItemFlagsPrivate_: $value"),
      };
}

final class ImGuiTableCellData extends ffi.Struct {
  @ImU32()
  external int BgColor;

  @ImGuiTableColumnIdx()
  external int Column;
}

final class ImSpan_ImGuiTableColumn extends ffi.Struct {
  external ffi.Pointer<ImGuiTableColumn> Data;

  external ffi.Pointer<ImGuiTableColumn> DataEnd;
}

final class ImSpan_ImGuiTableColumnIdx extends ffi.Struct {
  external ffi.Pointer<ImGuiTableColumnIdx> Data;

  external ffi.Pointer<ImGuiTableColumnIdx> DataEnd;
}

final class ImSpan_ImGuiTableCellData extends ffi.Struct {
  external ffi.Pointer<ImGuiTableCellData> Data;

  external ffi.Pointer<ImGuiTableCellData> DataEnd;
}

final class ImVector_ImGuiTableInstanceData extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTableInstanceData> Data;
}

final class ImVector_ImGuiTableColumnSortSpecs extends ffi.Struct {
  @ffi.Int()
  external int Size;

  @ffi.Int()
  external int Capacity;

  external ffi.Pointer<ImGuiTableColumnSortSpecs> Data;
}

final class ImGuiTableColumnSettings extends ffi.Opaque {}

typedef ImGuiWindowFlags = ffi.Int;
typedef DartImGuiWindowFlags = int;
typedef ImGuiFocusedFlags = ffi.Int;
typedef DartImGuiFocusedFlags = int;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef ImGuiButtonFlags = ffi.Int;
typedef DartImGuiButtonFlags = int;
typedef ImGuiComboFlags = ffi.Int;
typedef DartImGuiComboFlags = int;
typedef ImGuiSliderFlags = ffi.Int;
typedef DartImGuiSliderFlags = int;
typedef ImGuiInputTextCallback
    = ffi.Pointer<ffi.NativeFunction<ImGuiInputTextCallbackFunction>>;
typedef ImGuiInputTextCallbackFunction = ffi.Int Function(
    ffi.Pointer<ImGuiInputTextCallbackData> data);
typedef DartImGuiInputTextCallbackFunction = int Function(
    ffi.Pointer<ImGuiInputTextCallbackData> data);
typedef ImGuiColorEditFlags = ffi.Int;
typedef DartImGuiColorEditFlags = int;
typedef ImGuiSelectableFlags = ffi.Int;
typedef DartImGuiSelectableFlags = int;
typedef ImGuiPopupFlags = ffi.Int;
typedef DartImGuiPopupFlags = int;
typedef ImGuiTableRowFlags = ffi.Int;
typedef DartImGuiTableRowFlags = int;
typedef ImGuiTableColumnFlags = ffi.Int;
typedef DartImGuiTableColumnFlags = int;
typedef ImGuiTableBgTarget = ffi.Int;
typedef DartImGuiTableBgTarget = int;
typedef ImGuiDragDropFlags = ffi.Int;
typedef DartImGuiDragDropFlags = int;
typedef ImGuiMouseButton = ffi.Int;
typedef DartImGuiMouseButton = int;
typedef ImGuiMouseCursor = ffi.Int;
typedef DartImGuiMouseCursor = int;
typedef ImGuiMemAllocFunc
    = ffi.Pointer<ffi.NativeFunction<ImGuiMemAllocFuncFunction>>;
typedef ImGuiMemAllocFuncFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Size sz, ffi.Pointer<ffi.Void> user_data);
typedef DartImGuiMemAllocFuncFunction = ffi.Pointer<ffi.Void> Function(
    int sz, ffi.Pointer<ffi.Void> user_data);
typedef ImGuiMemFreeFunc
    = ffi.Pointer<ffi.NativeFunction<ImGuiMemFreeFuncFunction>>;
typedef ImGuiMemFreeFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> user_data);
typedef DartImGuiMemFreeFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Pointer<ffi.Void> user_data);
typedef ImDrawFlags = ffi.Int;
typedef DartImDrawFlags = int;
typedef ImFileHandle = ffi.Pointer<_IO_FILE>;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @ffi.Long()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<ffi.Void> _lock;

  @ffi.Long()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef ImGuiFocusRequestFlags = ffi.Int;
typedef DartImGuiFocusRequestFlags = int;
typedef ImGuiScrollFlags = ffi.Int;
typedef DartImGuiScrollFlags = int;
typedef ImGuiLogFlags = ffi.Int;
typedef DartImGuiLogFlags = int;
typedef ImGuiTooltipFlags = ffi.Int;
typedef DartImGuiTooltipFlags = int;
typedef ImGuiNavMoveFlags = ffi.Int;
typedef DartImGuiNavMoveFlags = int;
typedef ImGuiNavRenderCursorFlags = ffi.Int;
typedef DartImGuiNavRenderCursorFlags = int;
typedef ImGuiTextFlags = ffi.Int;
typedef DartImGuiTextFlags = int;
typedef ImGuiSeparatorFlags = ffi.Int;
typedef DartImGuiSeparatorFlags = int;

final class GLFWwindow extends ffi.Opaque {}

final class GLFWmonitor extends ffi.Opaque {}
